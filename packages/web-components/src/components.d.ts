/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface VaAccordion {
        /**
          * Whether or not the accordion items will have borders
         */
        "bordered": boolean;
        /**
          * If true, doesn't fire the CustomEvent which can be used for analytics tracking.
         */
        "disableAnalytics": boolean;
        /**
          * True if only a single item can be opened at once
         */
        "openSingle": boolean;
        /**
          * Optional accordion section heading text. Only used in analytics event. Default is null.
         */
        "sectionHeading": string;
    }
    interface VaAccordionItem {
        /**
          * The accordion item header text
         */
        "header": string;
        /**
          * Header level for button wrapper. Must be between 1 and 6
         */
        "level": number;
        /**
          * True if the item is open
         */
        "open": boolean;
        /**
          * Optional accordion item subheader text. Default is null.
         */
        "subheader": string;
    }
    interface VaAdditionalInfo {
        /**
          * If true, doesn't fire the CustomEvent which can be used for analytics tracking.
         */
        "disableAnalytics": boolean;
        /**
          * If true, left blue border and padding is removed.
         */
        "disableBorder": boolean;
        /**
          * The text to trigger the expansion
         */
        "trigger": string;
    }
    interface VaAlert {
        /**
          * If true, renders the alert with only a background color corresponding to the status - no icon or left border.
         */
        "backgroundOnly": boolean;
        /**
          * Aria-label text for the close button.
         */
        "closeBtnAriaLabel": string;
        /**
          * If true, a close button will be displayed.
         */
        "closeable": boolean;
        /**
          * If true, doesn't fire the CustomEvent which can be used for analytics tracking.
         */
        "disableAnalytics": boolean;
        /**
          * If true, the alert will be full width. Should be for emergency communication only.
         */
        "fullWidth": boolean;
        /**
          * This option only takes effect when background-only is true. If true, the background-only alert will include an icon.
         */
        "showIcon": boolean;
        /**
          * Determines the icon and border/background color. One of `info`, `error`, `success`, `warning`, or `continue`
         */
        "status": string;
        /**
          * If true, the alert will be visible.
         */
        "visible": boolean;
    }
    interface VaBackToTop {
    }
    interface VaBanner {
        /**
          * If true, doesn't fire the CustomEvent which can be used for analytics tracking.
         */
        "disableAnalytics": boolean;
        /**
          * The headline of the banner.
         */
        "headline": string;
        /**
          * Enable the close functionality. The banner will be closed until storage is cleared.
         */
        "showClose": boolean;
        /**
          * The type of the banner. One of 'info', 'error', 'success', 'continue', or 'warning'. This affects both the icon of the AlertBox and the top border color.
         */
        "type": string;
        /**
          * A boolean that when false makes it so that the banner does not render.
         */
        "visible": boolean;
        /**
          * Enable sessionStorage for the Banner otherwise storage if showClose is enabled will default to localStorage
         */
        "windowSession": boolean;
    }
    interface VaBreadcrumbs {
        /**
          * Analytics tracking function(s) will not be called
         */
        "disableAnalytics": boolean;
        /**
          * Adds an aria-label attribute to the <nav /> element.
         */
        "label": string;
    }
    interface VaCheckbox {
        /**
          * The aria-describedby attribute for the `<input>` in the shadow DOM.
         */
        "ariaDescribedby": string;
        /**
          * Whether the checkbox is checked or not.  Note: Because this isn't reflective, vaCheckbox.getAttribute('checked') will not reflect the correct value. Use the property vaCheckbox.checked instead.
         */
        "checked": boolean;
        /**
          * The description to render. If this prop exists, va-checkbox will render it instead of the named slot.
         */
        "description"?: string;
        /**
          * True if the analytics event should fire.
         */
        "enableAnalytics": boolean;
        /**
          * The error message to render.
         */
        "error"?: string;
        /**
          * The label for the checkbox.
         */
        "label": string;
        /**
          * Set the input to required and render the (Required) text.
         */
        "required"?: boolean;
    }
    interface VaCheckboxGroup {
        /**
          * Whether or not an analytics event will be fired.
         */
        "enableAnalytics": boolean;
        /**
          * A string with an error message.
         */
        "error": string;
        /**
          * The text label for the checkbox group.
         */
        "label": string;
        /**
          * Whether or not this input field is required.
         */
        "required": boolean;
    }
    interface VaFeaturedContent {
    }
    interface VaLoadingIndicator {
        /**
          * Analytics tracking function(s) will be called. Form components are disabled by default due to PII/PHI concerns.
         */
        "enableAnalytics": boolean;
        /**
          * An aria label
         */
        "label": string;
        /**
          * The message visible on screen when loading
         */
        "message": string;
        /**
          * Set to true if the loading indicator should capture focus
         */
        "setFocus": boolean;
    }
    interface VaModal {
        /**
          * Click outside modal will trigger closeEvent
         */
        "clickToClose"?: boolean;
        /**
          * If true, analytics event won't be fired
         */
        "disableAnalytics"?: boolean;
        /**
          * Selector to explicitly specify which element should receive focus when the modal is open, if the initially focused element is not the first focusable element in the document
         */
        "initialFocusSelector"?: string;
        /**
          * Title/header text for the modal
         */
        "modalTitle"?: string;
        /**
          * Primary button text
         */
        "primaryButtonText"?: string;
        /**
          * Secondary button text
         */
        "secondaryButtonText"?: string;
        "status"?: 'continue' | 'error' | 'info' | 'success' | 'warning';
        /**
          * If the modal is visible or not
         */
        "visible": boolean;
    }
    interface VaOnThisPage {
    }
    interface VaPagination {
        /**
          * Aria-label suffix text for buttons
         */
        "ariaLabelSuffix": string;
        /**
          * Whether or not an analytics event will be fired
         */
        "enableAnalytics": boolean;
        /**
          * The maximum number of pages to show at once
         */
        "maxPageListLength": number;
        /**
          * The current page number
         */
        "page": number;
        /**
          * The total number of pages
         */
        "pages": number;
        /**
          * Display last page number when the page count exceeds `maxPageListLength`
         */
        "showLastPage": boolean;
    }
    interface VaProcessList {
    }
    interface VaProgressBar {
        /**
          * Whether or not an analytics event will be fired.
         */
        "enableAnalytics": boolean;
        /**
          * The text label for the progress bar.
         */
        "label": string;
        /**
          * Percent of progress made. 0 to 100.
         */
        "percent": number;
    }
    interface VaPromoBanner {
        /**
          * Analytics tracking function(s) will not be called
         */
        "disableAnalytics": boolean;
        /**
          * `href` attribute for the `<a>` tag.
         */
        "href": string;
        /**
          * Controls which icon gets used. Options are 'announcement', 'news', or 'email-signup'.
         */
        "type": 'announcement' | 'news' | 'email-signup';
    }
    interface VaRadio {
        /**
          * Whether or not an analytics event will be fired.
         */
        "enableAnalytics": boolean;
        /**
          * A string with an error message.
         */
        "error": string;
        /**
          * The text label for the radio group.
         */
        "label": string;
        /**
          * Whether or not this input field is required.
         */
        "required": boolean;
    }
    interface VaRadioOption {
        /**
          * Optional string for the ariaDescribedBy attribute.
         */
        "ariaDescribedby": string;
        /**
          * Whether or not the option is selected.
         */
        "checked": boolean;
        /**
          * The text label for the input element.
         */
        "label": string;
        /**
          * The name attribute for the input element.
         */
        "name": string;
        /**
          * The value attribute for the input element.
         */
        "value": string;
    }
    interface VaSegmentedProgressBar {
        /**
          * The current segment in progress
         */
        "current": number;
        /**
          * Whether or not an analytics event will be fired.
         */
        "enableAnalytics": boolean;
        /**
          * An override for the default aria label.
         */
        "label": string;
        /**
          * The total number of segments in the progress bar
         */
        "total": number;
    }
    interface VaSelect {
        /**
          * Whether or not to fire the analytics events
         */
        "enableAnalytics": boolean;
        /**
          * Error message to display. When defined, this indicates an error.
         */
        "error": string;
        /**
          * Text label for the field.
         */
        "label": string;
        /**
          * Name attribute for the select field.
         */
        "name": string;
        /**
          * Whether or not this is a required field.
         */
        "required": boolean;
        /**
          * Selected value (will get updated on select).
         */
        "value": string;
    }
    interface VaTable {
        /**
          * The title of the table
         */
        "tableTitle": string;
    }
    interface VaTableRow {
    }
    interface VaTelephone {
        /**
          * 3 or 10 digit string representing the contact number
         */
        "contact": string;
        /**
          * Optional phone number extension
         */
        "extension": number;
        /**
          * Indicates if this is a number meant to be called from outside the US. Prepends a "+1" to the formatted number.
         */
        "international": boolean;
        /**
          * Indicates if the phone number can be clicked or not
         */
        "notClickable": boolean;
        /**
          * Optional vanity phone number. Replaces the last 4 digits with the vanity text input
         */
        "vanity": string;
    }
    interface VaTextInput {
        /**
          * The aria-describedby attribute for the `<input>` in the shadow DOM.
         */
        "ariaDescribedby"?: string;
        /**
          * What to tell the browser to auto-complete the field with.
         */
        "autocomplete"?: string;
        /**
          * Emit component-library-analytics events on the blur event.
         */
        "enableAnalytics"?: boolean;
        /**
          * The error message to render.
         */
        "error"?: string;
        /**
          * The inputmode attribute.
         */
        "inputmode"?: | 'decimal'
    | 'email'
    | 'numeric'
    | 'search'
    | 'tel'
    | 'text'
    | 'url';
        /**
          * The label for the text input.
         */
        "label"?: string;
        /**
          * The maximum number of characters allowed in the input.
         */
        "maxlength"?: number;
        /**
          * The name to pass to the input element.
         */
        "name"?: string;
        /**
          * Set the input to required and render the (Required) text.
         */
        "required"?: boolean;
        /**
          * The type attribute.
         */
        "type"?: 'email' | 'number' | 'search' | 'tel' | 'text' | 'url';
        /**
          * The value for the input.
         */
        "value"?: string;
    }
}
declare global {
    interface HTMLVaAccordionElement extends Components.VaAccordion, HTMLStencilElement {
    }
    var HTMLVaAccordionElement: {
        prototype: HTMLVaAccordionElement;
        new (): HTMLVaAccordionElement;
    };
    interface HTMLVaAccordionItemElement extends Components.VaAccordionItem, HTMLStencilElement {
    }
    var HTMLVaAccordionItemElement: {
        prototype: HTMLVaAccordionItemElement;
        new (): HTMLVaAccordionItemElement;
    };
    interface HTMLVaAdditionalInfoElement extends Components.VaAdditionalInfo, HTMLStencilElement {
    }
    var HTMLVaAdditionalInfoElement: {
        prototype: HTMLVaAdditionalInfoElement;
        new (): HTMLVaAdditionalInfoElement;
    };
    interface HTMLVaAlertElement extends Components.VaAlert, HTMLStencilElement {
    }
    var HTMLVaAlertElement: {
        prototype: HTMLVaAlertElement;
        new (): HTMLVaAlertElement;
    };
    interface HTMLVaBackToTopElement extends Components.VaBackToTop, HTMLStencilElement {
    }
    var HTMLVaBackToTopElement: {
        prototype: HTMLVaBackToTopElement;
        new (): HTMLVaBackToTopElement;
    };
    interface HTMLVaBannerElement extends Components.VaBanner, HTMLStencilElement {
    }
    var HTMLVaBannerElement: {
        prototype: HTMLVaBannerElement;
        new (): HTMLVaBannerElement;
    };
    interface HTMLVaBreadcrumbsElement extends Components.VaBreadcrumbs, HTMLStencilElement {
    }
    var HTMLVaBreadcrumbsElement: {
        prototype: HTMLVaBreadcrumbsElement;
        new (): HTMLVaBreadcrumbsElement;
    };
    interface HTMLVaCheckboxElement extends Components.VaCheckbox, HTMLStencilElement {
    }
    var HTMLVaCheckboxElement: {
        prototype: HTMLVaCheckboxElement;
        new (): HTMLVaCheckboxElement;
    };
    interface HTMLVaCheckboxGroupElement extends Components.VaCheckboxGroup, HTMLStencilElement {
    }
    var HTMLVaCheckboxGroupElement: {
        prototype: HTMLVaCheckboxGroupElement;
        new (): HTMLVaCheckboxGroupElement;
    };
    interface HTMLVaFeaturedContentElement extends Components.VaFeaturedContent, HTMLStencilElement {
    }
    var HTMLVaFeaturedContentElement: {
        prototype: HTMLVaFeaturedContentElement;
        new (): HTMLVaFeaturedContentElement;
    };
    interface HTMLVaLoadingIndicatorElement extends Components.VaLoadingIndicator, HTMLStencilElement {
    }
    var HTMLVaLoadingIndicatorElement: {
        prototype: HTMLVaLoadingIndicatorElement;
        new (): HTMLVaLoadingIndicatorElement;
    };
    interface HTMLVaModalElement extends Components.VaModal, HTMLStencilElement {
    }
    var HTMLVaModalElement: {
        prototype: HTMLVaModalElement;
        new (): HTMLVaModalElement;
    };
    interface HTMLVaOnThisPageElement extends Components.VaOnThisPage, HTMLStencilElement {
    }
    var HTMLVaOnThisPageElement: {
        prototype: HTMLVaOnThisPageElement;
        new (): HTMLVaOnThisPageElement;
    };
    interface HTMLVaPaginationElement extends Components.VaPagination, HTMLStencilElement {
    }
    var HTMLVaPaginationElement: {
        prototype: HTMLVaPaginationElement;
        new (): HTMLVaPaginationElement;
    };
    interface HTMLVaProcessListElement extends Components.VaProcessList, HTMLStencilElement {
    }
    var HTMLVaProcessListElement: {
        prototype: HTMLVaProcessListElement;
        new (): HTMLVaProcessListElement;
    };
    interface HTMLVaProgressBarElement extends Components.VaProgressBar, HTMLStencilElement {
    }
    var HTMLVaProgressBarElement: {
        prototype: HTMLVaProgressBarElement;
        new (): HTMLVaProgressBarElement;
    };
    interface HTMLVaPromoBannerElement extends Components.VaPromoBanner, HTMLStencilElement {
    }
    var HTMLVaPromoBannerElement: {
        prototype: HTMLVaPromoBannerElement;
        new (): HTMLVaPromoBannerElement;
    };
    interface HTMLVaRadioElement extends Components.VaRadio, HTMLStencilElement {
    }
    var HTMLVaRadioElement: {
        prototype: HTMLVaRadioElement;
        new (): HTMLVaRadioElement;
    };
    interface HTMLVaRadioOptionElement extends Components.VaRadioOption, HTMLStencilElement {
    }
    var HTMLVaRadioOptionElement: {
        prototype: HTMLVaRadioOptionElement;
        new (): HTMLVaRadioOptionElement;
    };
    interface HTMLVaSegmentedProgressBarElement extends Components.VaSegmentedProgressBar, HTMLStencilElement {
    }
    var HTMLVaSegmentedProgressBarElement: {
        prototype: HTMLVaSegmentedProgressBarElement;
        new (): HTMLVaSegmentedProgressBarElement;
    };
    interface HTMLVaSelectElement extends Components.VaSelect, HTMLStencilElement {
    }
    var HTMLVaSelectElement: {
        prototype: HTMLVaSelectElement;
        new (): HTMLVaSelectElement;
    };
    interface HTMLVaTableElement extends Components.VaTable, HTMLStencilElement {
    }
    var HTMLVaTableElement: {
        prototype: HTMLVaTableElement;
        new (): HTMLVaTableElement;
    };
    interface HTMLVaTableRowElement extends Components.VaTableRow, HTMLStencilElement {
    }
    var HTMLVaTableRowElement: {
        prototype: HTMLVaTableRowElement;
        new (): HTMLVaTableRowElement;
    };
    interface HTMLVaTelephoneElement extends Components.VaTelephone, HTMLStencilElement {
    }
    var HTMLVaTelephoneElement: {
        prototype: HTMLVaTelephoneElement;
        new (): HTMLVaTelephoneElement;
    };
    interface HTMLVaTextInputElement extends Components.VaTextInput, HTMLStencilElement {
    }
    var HTMLVaTextInputElement: {
        prototype: HTMLVaTextInputElement;
        new (): HTMLVaTextInputElement;
    };
    interface HTMLElementTagNameMap {
        "va-accordion": HTMLVaAccordionElement;
        "va-accordion-item": HTMLVaAccordionItemElement;
        "va-additional-info": HTMLVaAdditionalInfoElement;
        "va-alert": HTMLVaAlertElement;
        "va-back-to-top": HTMLVaBackToTopElement;
        "va-banner": HTMLVaBannerElement;
        "va-breadcrumbs": HTMLVaBreadcrumbsElement;
        "va-checkbox": HTMLVaCheckboxElement;
        "va-checkbox-group": HTMLVaCheckboxGroupElement;
        "va-featured-content": HTMLVaFeaturedContentElement;
        "va-loading-indicator": HTMLVaLoadingIndicatorElement;
        "va-modal": HTMLVaModalElement;
        "va-on-this-page": HTMLVaOnThisPageElement;
        "va-pagination": HTMLVaPaginationElement;
        "va-process-list": HTMLVaProcessListElement;
        "va-progress-bar": HTMLVaProgressBarElement;
        "va-promo-banner": HTMLVaPromoBannerElement;
        "va-radio": HTMLVaRadioElement;
        "va-radio-option": HTMLVaRadioOptionElement;
        "va-segmented-progress-bar": HTMLVaSegmentedProgressBarElement;
        "va-select": HTMLVaSelectElement;
        "va-table": HTMLVaTableElement;
        "va-table-row": HTMLVaTableRowElement;
        "va-telephone": HTMLVaTelephoneElement;
        "va-text-input": HTMLVaTextInputElement;
    }
}
declare namespace LocalJSX {
    interface VaAccordion {
        /**
          * Whether or not the accordion items will have borders
         */
        "bordered"?: boolean;
        /**
          * If true, doesn't fire the CustomEvent which can be used for analytics tracking.
         */
        "disableAnalytics"?: boolean;
        /**
          * The event used to track usage of the component. This is emitted when an accordion item is toggled and disableAnalytics is not true.
         */
        "onComponent-library-analytics"?: (event: CustomEvent<any>) => void;
        /**
          * True if only a single item can be opened at once
         */
        "openSingle"?: boolean;
        /**
          * Optional accordion section heading text. Only used in analytics event. Default is null.
         */
        "sectionHeading"?: string;
    }
    interface VaAccordionItem {
        /**
          * The accordion item header text
         */
        "header"?: string;
        /**
          * Header level for button wrapper. Must be between 1 and 6
         */
        "level"?: number;
        /**
          * This event is fired so that `<va-accordion>` can manage which items are opened or closed
         */
        "onAccordionItemToggled"?: (event: CustomEvent<any>) => void;
        /**
          * True if the item is open
         */
        "open"?: boolean;
        /**
          * Optional accordion item subheader text. Default is null.
         */
        "subheader"?: string;
    }
    interface VaAdditionalInfo {
        /**
          * If true, doesn't fire the CustomEvent which can be used for analytics tracking.
         */
        "disableAnalytics"?: boolean;
        /**
          * If true, left blue border and padding is removed.
         */
        "disableBorder"?: boolean;
        /**
          * The event used to track usage of the component. This is emitted when an anchor link is clicked and disableAnalytics is not true.
         */
        "onComponent-library-analytics"?: (event: CustomEvent<any>) => void;
        /**
          * The text to trigger the expansion
         */
        "trigger"?: string;
    }
    interface VaAlert {
        /**
          * If true, renders the alert with only a background color corresponding to the status - no icon or left border.
         */
        "backgroundOnly"?: boolean;
        /**
          * Aria-label text for the close button.
         */
        "closeBtnAriaLabel"?: string;
        /**
          * If true, a close button will be displayed.
         */
        "closeable"?: boolean;
        /**
          * If true, doesn't fire the CustomEvent which can be used for analytics tracking.
         */
        "disableAnalytics"?: boolean;
        /**
          * If true, the alert will be full width. Should be for emergency communication only.
         */
        "fullWidth"?: boolean;
        /**
          * Fires when the component is closed by clicking on the close icon. This fires only when closeable is true.
         */
        "onCloseEvent"?: (event: CustomEvent<any>) => void;
        /**
          * The event used to track usage of the component. This is emitted when an anchor link is clicked and disableAnalytics is not true.
         */
        "onComponent-library-analytics"?: (event: CustomEvent<any>) => void;
        /**
          * Fires when the component has successfully finished rendering for the first time.
         */
        "onVa-component-did-load"?: (event: CustomEvent<any>) => void;
        /**
          * This option only takes effect when background-only is true. If true, the background-only alert will include an icon.
         */
        "showIcon"?: boolean;
        /**
          * Determines the icon and border/background color. One of `info`, `error`, `success`, `warning`, or `continue`
         */
        "status"?: string;
        /**
          * If true, the alert will be visible.
         */
        "visible"?: boolean;
    }
    interface VaBackToTop {
    }
    interface VaBanner {
        /**
          * If true, doesn't fire the CustomEvent which can be used for analytics tracking.
         */
        "disableAnalytics"?: boolean;
        /**
          * The headline of the banner.
         */
        "headline"?: string;
        /**
          * The event used to track usage of the component. This is emitted when an anchor link or the dismiss icon is clicked and disableAnalytics is not true.
         */
        "onComponent-library-analytics"?: (event: CustomEvent<any>) => void;
        /**
          * Enable the close functionality. The banner will be closed until storage is cleared.
         */
        "showClose"?: boolean;
        /**
          * The type of the banner. One of 'info', 'error', 'success', 'continue', or 'warning'. This affects both the icon of the AlertBox and the top border color.
         */
        "type"?: string;
        /**
          * A boolean that when false makes it so that the banner does not render.
         */
        "visible"?: boolean;
        /**
          * Enable sessionStorage for the Banner otherwise storage if showClose is enabled will default to localStorage
         */
        "windowSession"?: boolean;
    }
    interface VaBreadcrumbs {
        /**
          * Analytics tracking function(s) will not be called
         */
        "disableAnalytics"?: boolean;
        /**
          * Adds an aria-label attribute to the <nav /> element.
         */
        "label"?: string;
        /**
          * The event used to track usage of the component. This is emitted when a breadcrumb anchor is clicked and disableAnalytics is not true.
         */
        "onComponent-library-analytics"?: (event: CustomEvent<any>) => void;
    }
    interface VaCheckbox {
        /**
          * The aria-describedby attribute for the `<input>` in the shadow DOM.
         */
        "ariaDescribedby"?: string;
        /**
          * Whether the checkbox is checked or not.  Note: Because this isn't reflective, vaCheckbox.getAttribute('checked') will not reflect the correct value. Use the property vaCheckbox.checked instead.
         */
        "checked"?: boolean;
        /**
          * The description to render. If this prop exists, va-checkbox will render it instead of the named slot.
         */
        "description"?: string;
        /**
          * True if the analytics event should fire.
         */
        "enableAnalytics"?: boolean;
        /**
          * The error message to render.
         */
        "error"?: string;
        /**
          * The label for the checkbox.
         */
        "label"?: string;
        /**
          * The event used to track usage of the component. This is emitted when the input value changes and enableAnalytics is true.
         */
        "onComponent-library-analytics"?: (event: CustomEvent<any>) => void;
        /**
          * The event emitted when the input is blurred.
         */
        "onVaBlur"?: (event: CustomEvent<any>) => void;
        /**
          * The event emitted when the input value changes.
         */
        "onVaChange"?: (event: CustomEvent<any>) => void;
        /**
          * Set the input to required and render the (Required) text.
         */
        "required"?: boolean;
    }
    interface VaCheckboxGroup {
        /**
          * Whether or not an analytics event will be fired.
         */
        "enableAnalytics"?: boolean;
        /**
          * A string with an error message.
         */
        "error"?: string;
        /**
          * The text label for the checkbox group.
         */
        "label"?: string;
        /**
          * The event used to track usage of the component. This is emitted when an input value changes and enableAnalytics is true.
         */
        "onComponent-library-analytics"?: (event: CustomEvent<any>) => void;
        /**
          * Whether or not this input field is required.
         */
        "required"?: boolean;
    }
    interface VaFeaturedContent {
    }
    interface VaLoadingIndicator {
        /**
          * Analytics tracking function(s) will be called. Form components are disabled by default due to PII/PHI concerns.
         */
        "enableAnalytics"?: boolean;
        /**
          * An aria label
         */
        "label"?: string;
        /**
          * The message visible on screen when loading
         */
        "message"?: string;
        /**
          * The event used to track usage of the component.
         */
        "onComponent-library-analytics"?: (event: CustomEvent<any>) => void;
        /**
          * Set to true if the loading indicator should capture focus
         */
        "setFocus"?: boolean;
    }
    interface VaModal {
        /**
          * Click outside modal will trigger closeEvent
         */
        "clickToClose"?: boolean;
        /**
          * If true, analytics event won't be fired
         */
        "disableAnalytics"?: boolean;
        /**
          * Selector to explicitly specify which element should receive focus when the modal is open, if the initially focused element is not the first focusable element in the document
         */
        "initialFocusSelector"?: string;
        /**
          * Title/header text for the modal
         */
        "modalTitle"?: string;
        /**
          * Fires when modal is closed.
         */
        "onCloseEvent"?: (event: CustomEvent<any>) => void;
        /**
          * The event used to track usage of the component. Fires when a a page is selected if enable-analytics is true.
         */
        "onComponent-library-analytics"?: (event: CustomEvent<any>) => void;
        /**
          * Fires when primary button is clicked.
         */
        "onPrimaryButtonClick"?: (event: CustomEvent<any>) => void;
        /**
          * Fires when secondary button is clicked.
         */
        "onSecondaryButtonClick"?: (event: CustomEvent<any>) => void;
        /**
          * Primary button text
         */
        "primaryButtonText"?: string;
        /**
          * Secondary button text
         */
        "secondaryButtonText"?: string;
        "status"?: 'continue' | 'error' | 'info' | 'success' | 'warning';
        /**
          * If the modal is visible or not
         */
        "visible"?: boolean;
    }
    interface VaOnThisPage {
    }
    interface VaPagination {
        /**
          * Aria-label suffix text for buttons
         */
        "ariaLabelSuffix"?: string;
        /**
          * Whether or not an analytics event will be fired
         */
        "enableAnalytics"?: boolean;
        /**
          * The maximum number of pages to show at once
         */
        "maxPageListLength"?: number;
        /**
          * The event used to track usage of the component. Fires when a a page is selected if enable-analytics is true.
         */
        "onComponent-library-analytics"?: (event: CustomEvent<any>) => void;
        /**
          * Fires when a page is selected
         */
        "onPageSelect"?: (event: CustomEvent<any>) => void;
        /**
          * The current page number
         */
        "page"?: number;
        /**
          * The total number of pages
         */
        "pages"?: number;
        /**
          * Display last page number when the page count exceeds `maxPageListLength`
         */
        "showLastPage"?: boolean;
    }
    interface VaProcessList {
    }
    interface VaProgressBar {
        /**
          * Whether or not an analytics event will be fired.
         */
        "enableAnalytics"?: boolean;
        /**
          * The text label for the progress bar.
         */
        "label"?: string;
        /**
          * The event used to track usage of the component. This is emitted when percent is 0 or 100 and enableAnalytics is true.
         */
        "onComponent-library-analytics"?: (event: CustomEvent<any>) => void;
        /**
          * Percent of progress made. 0 to 100.
         */
        "percent"?: number;
    }
    interface VaPromoBanner {
        /**
          * Analytics tracking function(s) will not be called
         */
        "disableAnalytics"?: boolean;
        /**
          * `href` attribute for the `<a>` tag.
         */
        "href"?: string;
        /**
          * Fires when the component is closed by clicking on the close icon.
         */
        "onCloseEvent"?: (event: CustomEvent<any>) => void;
        /**
          * The event used to track usage of the component. This is emitted when an anchor link or the dismiss icon is clicked and disableAnalytics is not true.
         */
        "onComponent-library-analytics"?: (event: CustomEvent<any>) => void;
        /**
          * Controls which icon gets used. Options are 'announcement', 'news', or 'email-signup'.
         */
        "type"?: 'announcement' | 'news' | 'email-signup';
    }
    interface VaRadio {
        /**
          * Whether or not an analytics event will be fired.
         */
        "enableAnalytics"?: boolean;
        /**
          * A string with an error message.
         */
        "error"?: string;
        /**
          * The text label for the radio group.
         */
        "label"?: string;
        /**
          * The event used to track usage of the component. This is emitted when a radio option is selected and enableAnalytics is true.
         */
        "onComponent-library-analytics"?: (event: CustomEvent<any>) => void;
        /**
          * The event emitted when the selected value changes
         */
        "onVaValueChange"?: (event: CustomEvent<any>) => void;
        /**
          * Whether or not this input field is required.
         */
        "required"?: boolean;
    }
    interface VaRadioOption {
        /**
          * Optional string for the ariaDescribedBy attribute.
         */
        "ariaDescribedby"?: string;
        /**
          * Whether or not the option is selected.
         */
        "checked"?: boolean;
        /**
          * The text label for the input element.
         */
        "label"?: string;
        /**
          * The name attribute for the input element.
         */
        "name"?: string;
        /**
          * The event emitted when the selected option value changes
         */
        "onRadioOptionSelected"?: (event: CustomEvent<any>) => void;
        /**
          * The value attribute for the input element.
         */
        "value"?: string;
    }
    interface VaSegmentedProgressBar {
        /**
          * The current segment in progress
         */
        "current"?: number;
        /**
          * Whether or not an analytics event will be fired.
         */
        "enableAnalytics"?: boolean;
        /**
          * An override for the default aria label.
         */
        "label"?: string;
        /**
          * The event used to track usage of the component. This is emitted when the component renders and enableAnalytics is true.
         */
        "onComponent-library-analytics"?: (event: CustomEvent<any>) => void;
        /**
          * The total number of segments in the progress bar
         */
        "total"?: number;
    }
    interface VaSelect {
        /**
          * Whether or not to fire the analytics events
         */
        "enableAnalytics"?: boolean;
        /**
          * Error message to display. When defined, this indicates an error.
         */
        "error"?: string;
        /**
          * Text label for the field.
         */
        "label"?: string;
        /**
          * Name attribute for the select field.
         */
        "name"?: string;
        /**
          * The event used to track usage of the component. This is emitted when an option is selected and enableAnalytics is true.
         */
        "onComponent-library-analytics"?: (event: CustomEvent<any>) => void;
        /**
          * The event attached to select's onkeydown
         */
        "onVaKeyDown"?: (event: CustomEvent<any>) => void;
        /**
          * The event emitted when the selected value changes
         */
        "onVaSelect"?: (event: CustomEvent<any>) => void;
        /**
          * Whether or not this is a required field.
         */
        "required"?: boolean;
        /**
          * Selected value (will get updated on select).
         */
        "value"?: string;
    }
    interface VaTable {
        /**
          * The title of the table
         */
        "tableTitle"?: string;
    }
    interface VaTableRow {
    }
    interface VaTelephone {
        /**
          * 3 or 10 digit string representing the contact number
         */
        "contact": string;
        /**
          * Optional phone number extension
         */
        "extension"?: number;
        /**
          * Indicates if this is a number meant to be called from outside the US. Prepends a "+1" to the formatted number.
         */
        "international"?: boolean;
        /**
          * Indicates if the phone number can be clicked or not
         */
        "notClickable"?: boolean;
        /**
          * The event used to track usage of the component. This is emitted when clicking on an anchor link.
         */
        "onComponent-library-analytics"?: (event: CustomEvent<any>) => void;
        /**
          * Optional vanity phone number. Replaces the last 4 digits with the vanity text input
         */
        "vanity"?: string;
    }
    interface VaTextInput {
        /**
          * The aria-describedby attribute for the `<input>` in the shadow DOM.
         */
        "ariaDescribedby"?: string;
        /**
          * What to tell the browser to auto-complete the field with.
         */
        "autocomplete"?: string;
        /**
          * Emit component-library-analytics events on the blur event.
         */
        "enableAnalytics"?: boolean;
        /**
          * The error message to render.
         */
        "error"?: string;
        /**
          * The inputmode attribute.
         */
        "inputmode"?: | 'decimal'
    | 'email'
    | 'numeric'
    | 'search'
    | 'tel'
    | 'text'
    | 'url';
        /**
          * The label for the text input.
         */
        "label"?: string;
        /**
          * The maximum number of characters allowed in the input.
         */
        "maxlength"?: number;
        /**
          * The name to pass to the input element.
         */
        "name"?: string;
        /**
          * The event used to track usage of the component. This is emitted when the input is blurred and enableAnalytics is true.
         */
        "onComponent-library-analytics"?: (event: CustomEvent<any>) => void;
        /**
          * The event emitted when the input is blurred.
         */
        "onVaBlur"?: (event: CustomEvent<any>) => void;
        /**
          * The event emitted when the input value changes
         */
        "onVaChange"?: (event: CustomEvent<any>) => void;
        /**
          * Set the input to required and render the (Required) text.
         */
        "required"?: boolean;
        /**
          * The type attribute.
         */
        "type"?: 'email' | 'number' | 'search' | 'tel' | 'text' | 'url';
        /**
          * The value for the input.
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "va-accordion": VaAccordion;
        "va-accordion-item": VaAccordionItem;
        "va-additional-info": VaAdditionalInfo;
        "va-alert": VaAlert;
        "va-back-to-top": VaBackToTop;
        "va-banner": VaBanner;
        "va-breadcrumbs": VaBreadcrumbs;
        "va-checkbox": VaCheckbox;
        "va-checkbox-group": VaCheckboxGroup;
        "va-featured-content": VaFeaturedContent;
        "va-loading-indicator": VaLoadingIndicator;
        "va-modal": VaModal;
        "va-on-this-page": VaOnThisPage;
        "va-pagination": VaPagination;
        "va-process-list": VaProcessList;
        "va-progress-bar": VaProgressBar;
        "va-promo-banner": VaPromoBanner;
        "va-radio": VaRadio;
        "va-radio-option": VaRadioOption;
        "va-segmented-progress-bar": VaSegmentedProgressBar;
        "va-select": VaSelect;
        "va-table": VaTable;
        "va-table-row": VaTableRow;
        "va-telephone": VaTelephone;
        "va-text-input": VaTextInput;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "va-accordion": LocalJSX.VaAccordion & JSXBase.HTMLAttributes<HTMLVaAccordionElement>;
            "va-accordion-item": LocalJSX.VaAccordionItem & JSXBase.HTMLAttributes<HTMLVaAccordionItemElement>;
            "va-additional-info": LocalJSX.VaAdditionalInfo & JSXBase.HTMLAttributes<HTMLVaAdditionalInfoElement>;
            "va-alert": LocalJSX.VaAlert & JSXBase.HTMLAttributes<HTMLVaAlertElement>;
            "va-back-to-top": LocalJSX.VaBackToTop & JSXBase.HTMLAttributes<HTMLVaBackToTopElement>;
            "va-banner": LocalJSX.VaBanner & JSXBase.HTMLAttributes<HTMLVaBannerElement>;
            "va-breadcrumbs": LocalJSX.VaBreadcrumbs & JSXBase.HTMLAttributes<HTMLVaBreadcrumbsElement>;
            "va-checkbox": LocalJSX.VaCheckbox & JSXBase.HTMLAttributes<HTMLVaCheckboxElement>;
            "va-checkbox-group": LocalJSX.VaCheckboxGroup & JSXBase.HTMLAttributes<HTMLVaCheckboxGroupElement>;
            "va-featured-content": LocalJSX.VaFeaturedContent & JSXBase.HTMLAttributes<HTMLVaFeaturedContentElement>;
            "va-loading-indicator": LocalJSX.VaLoadingIndicator & JSXBase.HTMLAttributes<HTMLVaLoadingIndicatorElement>;
            "va-modal": LocalJSX.VaModal & JSXBase.HTMLAttributes<HTMLVaModalElement>;
            "va-on-this-page": LocalJSX.VaOnThisPage & JSXBase.HTMLAttributes<HTMLVaOnThisPageElement>;
            "va-pagination": LocalJSX.VaPagination & JSXBase.HTMLAttributes<HTMLVaPaginationElement>;
            "va-process-list": LocalJSX.VaProcessList & JSXBase.HTMLAttributes<HTMLVaProcessListElement>;
            "va-progress-bar": LocalJSX.VaProgressBar & JSXBase.HTMLAttributes<HTMLVaProgressBarElement>;
            "va-promo-banner": LocalJSX.VaPromoBanner & JSXBase.HTMLAttributes<HTMLVaPromoBannerElement>;
            "va-radio": LocalJSX.VaRadio & JSXBase.HTMLAttributes<HTMLVaRadioElement>;
            "va-radio-option": LocalJSX.VaRadioOption & JSXBase.HTMLAttributes<HTMLVaRadioOptionElement>;
            "va-segmented-progress-bar": LocalJSX.VaSegmentedProgressBar & JSXBase.HTMLAttributes<HTMLVaSegmentedProgressBarElement>;
            "va-select": LocalJSX.VaSelect & JSXBase.HTMLAttributes<HTMLVaSelectElement>;
            "va-table": LocalJSX.VaTable & JSXBase.HTMLAttributes<HTMLVaTableElement>;
            "va-table-row": LocalJSX.VaTableRow & JSXBase.HTMLAttributes<HTMLVaTableRowElement>;
            "va-telephone": LocalJSX.VaTelephone & JSXBase.HTMLAttributes<HTMLVaTelephoneElement>;
            "va-text-input": LocalJSX.VaTextInput & JSXBase.HTMLAttributes<HTMLVaTextInputElement>;
        }
    }
}
