/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Breadcrumb } from "./components/va-breadcrumbs/va-breadcrumbs";
export namespace Components {
    interface VaAccordion {
        /**
          * If `true`, doesn't fire the CustomEvent which can be used for analytics tracking.
         */
        "disableAnalytics"?: boolean;
        /**
          * True if only a single item can be opened at once
         */
        "openSingle"?: boolean;
        /**
          * Optional accordion section heading text. Only used in analytics event. Default is null.
         */
        "sectionHeading"?: string;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
    }
    interface VaAccordionItem {
        /**
          * Whether or not the accordion item will have a border
         */
        "bordered"?: boolean;
        /**
          * The accordion item header text
         */
        "header"?: string;
        /**
          * Header level for button wrapper. Must be between 1 and 6
         */
        "level"?: number;
        /**
          * True if the item is open
         */
        "open"?: boolean;
        /**
          * Optional accordion item subheader text. Default is null.
         */
        "subheader"?: string;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
    }
    interface VaAdditionalInfo {
        /**
          * If `true`, doesn't fire the CustomEvent which can be used for analytics tracking.
         */
        "disableAnalytics"?: boolean;
        /**
          * If `true`, left blue border and padding is removed.
         */
        "disableBorder"?: boolean;
        /**
          * The text to trigger the expansion
         */
        "trigger": string;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
    }
    interface VaAlert {
        /**
          * If `true`, renders the alert with only a background color corresponding to the status - no left border. (v1 only)
         */
        "backgroundOnly"?: boolean;
        /**
          * Aria-label text for the close button.
         */
        "closeBtnAriaLabel"?: string;
        /**
          * If `true`, a close button will be displayed.
         */
        "closeable"?: boolean;
        /**
          * If `true`, doesn't fire the CustomEvent which can be used for analytics tracking.
         */
        "disableAnalytics"?: boolean;
        /**
          * If `true`, the alert will be full width. Should be for emergency communication only.
         */
        "fullWidth"?: boolean;
        /**
          * Displays the slim variation. Available when USWDS is true.
         */
        "slim"?: boolean;
        /**
          * Determines the icon and border/background color.
         */
        "status"?: | 'info'
    | 'warning'
    | 'error'
    | 'success'
    | 'continue';
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
        /**
          * If `true`, the alert will be visible.
         */
        "visible"?: boolean;
    }
    interface VaAlertExpandable {
        /**
          * If `true`, doesn't fire the CustomEvent which can be used for analytics tracking.
         */
        "disableAnalytics"?: boolean;
        /**
          * If `true`, the status icon is removed.
         */
        "iconless"?: boolean;
        /**
          * Determines the icon and background color. One of `info`, `error`, `success`, `warning`, or `continue`
         */
        "status"?: 'continue' | 'error' | 'info' | 'success' | 'warning';
        /**
          * The text to trigger the expansion
         */
        "trigger": string;
    }
    interface VaBackToTop {
    }
    interface VaBanner {
        /**
          * Aria Label for the "region" of the nested va-alert.
         */
        "dataLabel"?: string;
        /**
          * If true, doesn't fire the CustomEvent which can be used for analytics tracking.
         */
        "disableAnalytics"?: boolean;
        /**
          * The headline of the banner.
         */
        "headline": string;
        /**
          * Enable the close functionality. The banner will be closed until storage is cleared.
         */
        "showClose"?: boolean;
        /**
          * The type of the banner. This affects both the icon of the AlertBox and the top border color.
         */
        "type"?: 'info' | 'warning' | 'error' | 'success' | 'continue';
        /**
          * A boolean that when false makes it so that the banner does not render.
         */
        "visible"?: boolean;
        /**
          * Enable sessionStorage for the Banner otherwise storage if showClose is enabled will default to localStorage
         */
        "windowSession"?: boolean;
    }
    interface VaBreadcrumbs {
        /**
          * Represents a list of breadcrumbs. Use a JSON array of objects with label and href properties, then wrap in a string if using non-React-binding version. See Storybook examples for React-binding version. For pure web components, here's an example link: ``[{"href": "/link1", "label": "Link 1"}]`. This prop is available when `uswds` is set to `true`.
         */
        "breadcrumbList"?: Breadcrumb[] | string;
        /**
          * Analytics tracking function(s) will not be called
         */
        "disableAnalytics"?: boolean;
        /**
          * When true, the first breadcrumb label will be "VA.gov home".
         */
        "homeVeteransAffairs"?: boolean;
        /**
          * Adds an aria-label attribute to the <nav /> element.
         */
        "label"?: string;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
        /**
          * Whether or not the component will wrap the breadcrumbs. This prop is available when `uswds` is set to `true`.
         */
        "wrapping"?: boolean;
    }
    interface VaButton {
        /**
          * If `true`, the button will use `Back` as its text and an icon to represent going back in form flows.
         */
        "back"?: boolean;
        /**
          * If `true`, the button will use the big variant.
         */
        "big"?: boolean;
        /**
          * If `true`, the button will use `Continue` as its text and an icon to represent proceeding forward in form flows.
         */
        "continue"?: boolean;
        /**
          * If `true`, the component-library-analytics event is disabled.
         */
        "disableAnalytics"?: boolean;
        /**
          * If `true`, the click event will not fire.
         */
        "disabled"?: boolean;
        /**
          * The aria-label of the component.
         */
        "label"?: string;
        /**
          * An optional message that will be read by screen readers when the input is focused.
         */
        "messageAriaDescribedby"?: string;
        /**
          * If `true`, the button will use the primary alternate variant.
         */
        "primaryAlternate"?: boolean;
        /**
          * If `true`, the button will use the secondary variant.
         */
        "secondary"?: boolean;
        /**
          * If `true`, the button will submit form data when clicked.
         */
        "submit"?: boolean;
        /**
          * The text displayed on the button. If `continue` or `back` is true, the value of text is ignored.
         */
        "text"?: string;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
    }
    interface VaButtonIcon {
        "buttonType": keyof typeof this.buttonTypeMap;
        /**
          * If `true`, the component-library-analytics event is disabled.
         */
        "disableAnalytics"?: boolean;
        /**
          * The aria-label of the component.
         */
        "label"?: string;
    }
    interface VaButtonPair {
        /**
          * If `true`, button pair will use Continue and Back for button text.
         */
        "continue"?: boolean;
        /**
          * If `true`, the component-library-analytics event is disabled.
         */
        "disableAnalytics"?: boolean;
        /**
          * Applies to the primary button aria-label.
         */
        "primaryLabel"?: string;
        /**
          * Applies to the secondary button aria-label.
         */
        "secondaryLabel"?: string;
        /**
          * If `true`, the primary button will submit form data when clicked.
         */
        "submit"?: boolean;
        /**
          * If `true`, button pair will use Update and Cancel for button text.
         */
        "update"?: boolean;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
    }
    interface VaCard {
        /**
          * If `true`, the card will have a gray background.
         */
        "background"?: boolean;
        /**
          * If `true`, a drop-shadow will be displayed with a white background.
         */
        "showShadow"?: boolean;
    }
    interface VaCheckbox {
        /**
          * Description of the option displayed below the checkbox label. Available when uswds is true.
         */
        "checkboxDescription"?: string;
        /**
          * Whether the checkbox is checked or not.  Note: Because this isn't reflective, vaCheckbox.getAttribute('checked') will not reflect the correct value. Use the property vaCheckbox.checked instead.
         */
        "checked"?: boolean;
        /**
          * The description to render. If this prop exists, va-checkbox will render it instead of the named slot.
         */
        "description"?: string;
        /**
          * Whether or not the checkbox option is disabled. Available when uswds is true.
         */
        "disabled"?: boolean;
        /**
          * True if the analytics event should fire.
         */
        "enableAnalytics"?: boolean;
        /**
          * The error message to render.
         */
        "error"?: string;
        /**
          * Optional hint text.
         */
        "hint"?: string;
        /**
          * The label for the checkbox.
         */
        "label": string;
        /**
          * An optional message that will be read by screen readers when the checkbox is focused.
         */
        "messageAriaDescribedby"?: string;
        /**
          * The name to pass to the checkbox element.
         */
        "name"?: string;
        /**
          * Set the input to required and render the (Required) text.
         */
        "required"?: boolean;
        /**
          * Whether or not the component will display as a tile. Available when uswds is true.
         */
        "tile"?: boolean;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
    }
    interface VaCheckboxGroup {
        /**
          * Whether or not an analytics event will be fired.
         */
        "enableAnalytics"?: boolean;
        /**
          * A string with an error message.
         */
        "error"?: string;
        /**
          * The content of the heading if `useFormsPattern` and `uswds` are true.
         */
        "formHeading"?: string;
        /**
          * The heading level for the heading if `useFormsPattern` and `uswds` are true.
         */
        "formHeadingLevel"?: number;
        /**
          * Optional hint text.
         */
        "hint"?: string;
        /**
          * The text label for the checkbox group.
         */
        "label": string;
        /**
          * Insert a header with defined level inside the label (legend)
         */
        "labelHeaderLevel"?: string;
        /**
          * Whether or not this input field is required.
         */
        "required"?: boolean;
        /**
          * Enabling this will add a heading and description for integrating into the forms pattern. Accepts `single` or `multiple` to indicate if the form is a single input or will have multiple inputs. `uswds` should be true.
         */
        "useFormsPattern"?: string;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
    }
    interface VaCrisisLineModal {
    }
    interface VaDate {
        /**
          * Whether or not an analytics event will be fired.
         */
        "enableAnalytics": boolean;
        /**
          * The error message to render (if any) This prop should be leveraged to display any custom validations needed for this component
         */
        "error"?: string;
        /**
          * Optional hint text.
         */
        "hint"?: string;
        "invalidDay": boolean;
        "invalidMonth": boolean;
        "invalidYear": boolean;
        /**
          * Label for the field.
         */
        "label": string;
        /**
          * Whether or not only the Month and Year inputs should be displayed.
         */
        "monthYearOnly"?: boolean;
        /**
          * Used to create unique name attributes for each input.
         */
        "name": string;
        /**
          * Render marker indicating field is required.
         */
        "required"?: boolean;
        /**
          * Set the default date value must be in YYYY-MM-DD format.
         */
        "value"?: string;
    }
    interface VaFileInput {
        /**
          * A comma-separated list of unique file type specifiers.
         */
        "accept"?: string;
        /**
          * The text displayed on the button.
         */
        "buttonText": string;
        /**
          * Emit component-library-analytics events on the file input change event.
         */
        "enableAnalytics"?: boolean;
        /**
          * The error message to render.
         */
        "error"?: string;
        /**
          * Optionally specifies the size of the header element to use instead of the base label. Accepts a number from 1 to 6, corresponding to HTML header elements h1 through h6. If not provided, defaults to standard label styling.
         */
        "headerSize"?: number;
        /**
          * DST only prop removes extraneous display for multiple file input
         */
        "headless"?: boolean;
        /**
          * Optional hint text.
         */
        "hint"?: string;
        /**
          * The label for the file input.
         */
        "label"?: string;
        /**
          * The name for the input element.
         */
        "name"?: string;
        /**
          * Sets the input to required and renders the (*Required) text.
         */
        "required"?: boolean;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
    }
    interface VaFileInputMultiple {
        /**
          * Defines acceptable file types the user can select; uses file type or extensions.
         */
        "accept"?: string;
        /**
          * If enabled, emits custom analytics events when file changes occur.
         */
        "enableAnalytics"?: boolean;
        /**
          * Array of error messages corresponding to each file input. The length and order match the files array.
         */
        "errors": string[];
        /**
          * Specifies the header size of the label element, from 1 (largest) to 6 (smallest).
         */
        "headerSize"?: number;
        /**
          * Hint text provided to guide users on the expected format or type of files.
         */
        "hint"?: string;
        /**
          * Label for the file input, displayed above the input.
         */
        "label"?: string;
        /**
          * Name attribute for the file input element, used to identify the form data in the submission.
         */
        "name"?: string;
        /**
          * If true, the file input is marked as required, and users must select a file.
         */
        "required"?: boolean;
    }
    interface VaHeaderMinimal {
        /**
          * Disables use of heading tags in the minimal header in favor of `<div>` tags. This is for when a heading level 1 needs to be used elsewhere, as there should only be one heading level 1 per page.
         */
        "disableHeadings"?: boolean;
        "header"?: string;
        "subheader"?: string;
    }
    interface VaIcon {
        /**
          * The name of the icon to use
         */
        "icon": string;
        /**
          * The size variant of the icon, an integer between 3 and 9 inclusive
         */
        "size"?: number;
        /**
          * Screen-reader text if the icon has semantic meaning and is not purely decorative.
         */
        "srtext"?: string;
    }
    interface VaLink {
        /**
          * The title used in the abbr element. If filetype is PDF, the abbr title will be Portable Document Format.
         */
        "abbrTitle"?: string;
        /**
          * If `true`, the anchor text will be bolded and include a right arrow icon.
         */
        "active"?: boolean;
        /**
          * If `true`, a calendar icon will be displayed before the anchor text.
         */
        "calendar"?: boolean;
        /**
          * If `true`, a channel icon will be displayed before the anchor text.
         */
        "channel"?: boolean;
        /**
          * If `true`, the component-library-analytics event is disabled.
         */
        "disableAnalytics"?: boolean;
        /**
          * If `true`, the link will be treated as a download, and a download icon will be displayed before the anchor text.
         */
        "download"?: boolean;
        /**
          * The suggested filename. Only valid if download or calendar is `true`.
         */
        "filename"?: string;
        /**
          * The type of the file. Only displayed if download is `true`.
         */
        "filetype"?: string;
        /**
          * The href attribute of the anchor.
         */
        "href": string;
        /**
          * The name of the icon to be displayed in the link.
         */
        "iconName"?: string;
        /**
          * The size variant of the icon, an integer between 3 and 9 inclusive.
         */
        "iconSize"?: number;
        /**
          * Adds an aria-label attribute to the link element.
         */
        "label"?: string;
        /**
          * The number of pages of the file. Only displayed if download is `true`.
         */
        "pages"?: number;
        /**
          * If 'true', will represent the link with white text instead of blue.
         */
        "reverse"?: boolean;
        /**
          * The anchor text.
         */
        "text": string;
        /**
          * If `true`, a video icon will be displayed before the anchor text.
         */
        "video"?: boolean;
    }
    interface VaLinkAction {
        /**
          * If `true`, the component-library-analytics event is disabled.
         */
        "disableAnalytics"?: boolean;
        /**
          * The href attribute of the anchor.
         */
        "href": string;
        /**
          * An optional message that will be read by screen readers when the link is focused.
         */
        "messageAriaDescribedby"?: string;
        /**
          * The anchor text.
         */
        "text": string;
        /**
          * The type of the link, which determines its style. Can be 'primary', 'secondary', or 'reverse'.
         */
        "type": "primary" | "secondary" | "reverse";
    }
    interface VaLoadingIndicator {
        /**
          * Analytics tracking function(s) will be called. Form components are disabled by default due to PII/PHI concerns.
         */
        "enableAnalytics"?: boolean;
        /**
          * An aria label
         */
        "label"?: string;
        /**
          * The message visible on screen when loading
         */
        "message": string;
        /**
          * Set to true if the loading indicator should capture focus
         */
        "setFocus"?: boolean;
    }
    interface VaMaintenanceBanner {
        /**
          * A unique ID that will be used for conditionally rendering the banner based on if the user has dismissed it already.
         */
        "bannerId": string;
        /**
          * Whether or not an analytics event will be fired.
         */
        "disableAnalytics"?: boolean;
        /**
          * Override logic for whether to show error or warning
         */
        "isError": boolean;
        /**
          * The Date/Time of when the maintenance is scheduled to end.
         */
        "maintenanceEndDateTime": string;
        /**
          * The Date/Time of when the maintenance is scheduled to begin.
         */
        "maintenanceStartDateTime": string;
        /**
          * The title of the banner shown during active maintenance.
         */
        "maintenanceTitle": string;
        /**
          * The Date/Time of when to be begin warning users of upcoming site maintenance.
         */
        "upcomingWarnStartDateTime": string;
        /**
          * The title of the banner shown for upcoming site maintenance.
         */
        "upcomingWarnTitle": string;
    }
    interface VaMemorableDate {
        /**
          * A custom error message to display if the day is invalid
         */
        "customDayErrorMessage"?: string;
        /**
          * A custom error message to display if the month is invalid
         */
        "customMonthErrorMessage"?: string;
        /**
          * A custom error message to display if the year is invalid
         */
        "customYearErrorMessage"?: string;
        /**
          * Whether or not an analytics event will be fired.
         */
        "enableAnalytics": boolean;
        /**
          * The error message to render (if any) This prop should be leveraged to display any custom validations needed for this component
         */
        "error"?: string;
        /**
          * The content of the heading if `useFormsPattern`.
         */
        "formHeading"?: string;
        /**
          * The heading level for the heading if `useFormsPattern`.
         */
        "formHeadingLevel"?: number;
        /**
          * Hint text string
         */
        "hint"?: string;
        "invalidDay": boolean;
        "invalidMonth": boolean;
        "invalidYear": boolean;
        /**
          * Label for the field.
         */
        "label": string;
        /**
          * Whether or not to use the month as an input or select.
         */
        "monthSelect"?: boolean;
        /**
          * Used to create unique name attributes for each input.
         */
        "name": string;
        /**
          * Render marker indicating field is required.
         */
        "required"?: boolean;
        /**
          * Enabling this will add a heading and description for integrating into the forms pattern. Accepts `single` or `multiple` to indicate if the form is a single input or will have multiple inputs.
         */
        "useFormsPattern"?: string;
        /**
          * Set the default date value must be in YYYY-MM-DD format.
         */
        "value"?: string;
    }
    interface VaMinimalFooter {
    }
    interface VaModal {
        /**
          * Additional DOM-nodes that should not be hidden from screen readers. Useful when an open modal shouldn't hide all content behind the overlay.
         */
        "ariaHiddenNodeExceptions"?: HTMLElement[];
        /**
          * Click outside modal will trigger closeEvent
         */
        "clickToClose"?: boolean;
        /**
          * If true, analytics event won't be fired
         */
        "disableAnalytics"?: boolean;
        /**
          * Whether or not the component will be forced to take action.
         */
        "forcedModal"?: boolean;
        /**
          * Selector to explicitly specify which element should receive focus when the modal is open, if the initially focused element is not the first focusable element in the document
         */
        "initialFocusSelector"?: string;
        /**
          * If `true`, modal will be wider.
         */
        "large"?: boolean;
        /**
          * Title/header text for the modal
         */
        "modalTitle"?: string;
        /**
          * Primary button text
         */
        "primaryButtonText"?: string;
        /**
          * Secondary button text
         */
        "secondaryButtonText"?: string;
        "status"?: 'continue' | 'error' | 'info' | 'success' | 'warning';
        /**
          * Whether or not the component will be using the unstyled button.
         */
        "unstyled"?: boolean;
        /**
          * If the modal is visible or not
         */
        "visible"?: boolean;
    }
    interface VaNeedHelp {
    }
    interface VaNotification {
        /**
          * Aria-label text for the close button.
         */
        "closeBtnAriaLabel"?: string;
        /**
          * If `true`, a close button will be displayed.
         */
        "closeable"?: boolean;
        /**
          * Date and time for notification. This will also be incorporated into a unique aria-describedby label.
         */
        "dateTime"?: string;
        /**
          * If `true`, the component-library-analytics event is disabled.
         */
        "disableAnalytics"?: boolean;
        /**
          * If `false`, card will not have border
         */
        "hasBorder"?: boolean;
        /**
          * If `false`, card will not have the word "CLOSE" next to close icon
         */
        "hasCloseText"?: boolean;
        /**
          * Headline for notification
         */
        "headline"?: string;
        /**
          * Define level for headline. Font size will remain the same regardless of header level.
         */
        "headlineLevel"?: string;
        /**
          * Destination URL for link (optional)
         */
        "href"?: string;
        /**
          * Symbol indicates type of notification Current options are: action-required, update
         */
        "symbol"?: string;
        /**
          * Text for destination link. Set to empty string if you don't want a link.
         */
        "text"?: string;
        /**
          * If `true`, the card will be visible.
         */
        "visible"?: boolean;
    }
    interface VaNumberInput {
        /**
          * Whether this component will be used to accept a currency value.
         */
        "currency"?: boolean;
        /**
          * Emit component-library-analytics events on the blur event.
         */
        "enableAnalytics"?: boolean;
        /**
          * The error message to render.
         */
        "error"?: string;
        /**
          * The content of the heading if `useFormsPattern` and `uswds` are true.
         */
        "formHeading"?: string;
        /**
          * The heading level for the heading if `useFormsPattern` and `uswds` are true.
         */
        "formHeadingLevel"?: number;
        /**
          * Optional hint text.
         */
        "hint"?: string;
        /**
          * The inputmode attribute.
         */
        "inputmode"?: 'decimal' | 'numeric';
        /**
          * The label for the text input.
         */
        "label"?: string;
        /**
          * Maximum number value The max attribute specifies the maximum value for an input element.
         */
        "max": number | string;
        /**
          * An optional message that will be read by screen readers when the input is focused.
         */
        "messageAriaDescribedby"?: string;
        /**
          * Minimum number value The min attribute specifies the minimum value for an input element.
         */
        "min": number | string;
        /**
          * The name to pass to the input element.
         */
        "name"?: string;
        /**
          * Set the input to required and render the (Required) text.
         */
        "required"?: boolean;
        /**
          * Enabling this will add a heading and description for integrating into the forms pattern. Accepts `single` or `multiple` to indicate if the form is a single input or will have multiple inputs. `uswds` should be true.
         */
        "useFormsPattern"?: string;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
        /**
          * The value for the input.
         */
        "value"?: string;
        /**
          * Displays the input at a specific width. Accepts 2xs (4ex), xs (7ex), sm or small (10ex), md or medium (20ex), lg (30ex), xl (40ex), and 2xl (50ex).
         */
        "width"?: string;
    }
    interface VaOfficialGovBanner {
        /**
          * If `true`, the component-library-analytics event is disabled.
         */
        "disableAnalytics"?: boolean;
        /**
          * Accepts a top level domain (TLD) value of either `gov` or `mil`. Default is `gov`.
         */
        "tld": string;
    }
    interface VaOmbInfo {
        /**
          * The name of the benefit displayed in the Respondent Burden section of the Privacy Act Statement.
         */
        "benefitType"?: string;
        /**
          * The form expiration date.
         */
        "expDate": string;
        /**
          * The OMB control number or form number.
         */
        "ombNumber"?: string;
        /**
          * Displays the Respondent Burden section in the Privacy Act Statement modal and how many minutes the form is expected to take.
         */
        "resBurden"?: number;
    }
    interface VaOnThisPage {
        /**
          * If true, analytics event will not be fired
         */
        "disableAnalytics"?: boolean;
    }
    interface VaPagination {
        /**
          * Aria-label suffix text for buttons
         */
        "ariaLabelSuffix"?: string;
        /**
          * Whether or not an analytics event will be fired
         */
        "enableAnalytics"?: boolean;
        /**
          * The maximum number of pages to show at once
         */
        "maxPageListLength"?: number;
        /**
          * The current page number
         */
        "page": number;
        /**
          * The total number of pages
         */
        "pages": number;
        /**
          * Display last page number when the page count exceeds `maxPageListLength`
         */
        "showLastPage"?: boolean;
        /**
          * Don't show last page when the page count exceeds `maxPageListLength` (but do show the ellipsis). Only relevant if uswds is true.
         */
        "unbounded"?: boolean;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
    }
    interface VaPrivacyAgreement {
        /**
          * Whether the checkbox is checked or not.
         */
        "checked"?: boolean;
        /**
          * Emit component-library-analytics events on the blur event.
         */
        "enableAnalytics"?: boolean;
        /**
          * Whether to display the error message or not.
         */
        "showError"?: boolean;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
    }
    interface VaProcessList {
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
    }
    interface VaProcessListItem {
        /**
          * Whether or not the item is active
         */
        "active"?: boolean;
        /**
          * Whether or not the item should display the checkmark icon
         */
        "checkmark"?: boolean;
        /**
          * The process list item header text
         */
        "header"?: string;
        /**
          * Header level for item header. Must be between 1 and 6
         */
        "level"?: number;
        /**
          * Whether or not the item is pending
         */
        "pending"?: boolean;
    }
    interface VaProgressBar {
        /**
          * Whether or not an analytics event will be fired.
         */
        "enableAnalytics"?: boolean;
        /**
          * The text label for the progress bar.
         */
        "label"?: string;
        /**
          * Percent of progress made. 0 to 100.
         */
        "percent": number;
    }
    interface VaPromoBanner {
        /**
          * Analytics tracking function(s) will not be called
         */
        "disableAnalytics"?: boolean;
        /**
          * `href` attribute for the anchor tag.
         */
        "href": string;
        /**
          * Controls which icon gets used. Options are 'announcement', 'news', or 'email-signup'.
         */
        "type": 'announcement' | 'news' | 'email-signup';
    }
    interface VaRadio {
        /**
          * Whether or not an analytics event will be fired.
         */
        "enableAnalytics"?: boolean;
        /**
          * A string with an error message.
         */
        "error"?: string;
        /**
          * The content of the heading if `useFormsPattern` and `uswds` are true.
         */
        "formHeading"?: string;
        /**
          * The heading level for the heading if `useFormsPattern` and `uswds` are true.
         */
        "formHeadingLevel"?: number;
        /**
          * An optional message that will be read by screen readers when the header is focused. The label-header-level prop must be set for this to be active.
         */
        "headerAriaDescribedby"?: string;
        /**
          * Optional hint text.
         */
        "hint"?: string;
        /**
          * The text label for the radio group.
         */
        "label": string;
        /**
          * Insert a header with defined level inside the label (legend)
         */
        "labelHeaderLevel"?: string;
        /**
          * Whether or not this input field is required.
         */
        "required"?: boolean;
        /**
          * Enabling this will add a heading and description for integrating into the forms pattern. Accepts `single` or `multiple` to indicate if the form is a single input or will have multiple inputs. `uswds` should be true.
         */
        "useFormsPattern"?: string;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
    }
    interface VaRadioOption {
        /**
          * Optional string for the ariaDescribedBy attribute.
         */
        "ariaDescribedby"?: string;
        /**
          * Whether or not the option is selected.
         */
        "checked"?: boolean;
        /**
          * Description of the option displayed below the option label. Available when uswds is true.
         */
        "description"?: string;
        /**
          * Whether or not the radio option is disabled. Can be used if the USWDS option is active.
         */
        "disabled"?: boolean;
        /**
          * The text label for the input element.
         */
        "label": string;
        /**
          * The name attribute for the input element.
         */
        "name": string;
        /**
          * Whether or not the component will display as a tile. Available when uswds is true.
         */
        "tile"?: boolean;
        /**
          * Whether or not the component will use USWDS v3. styling.
         */
        "uswds"?: boolean;
        /**
          * The value attribute for the input element.
         */
        "value": string;
    }
    interface VaSearchInput {
        /**
          * If `true`, the component will use the big variant. Only available when `uswds` is `true`.
         */
        "big"?: boolean;
        /**
          * Text displayed inside the search button
         */
        "buttonText"?: string;
        /**
          * The aria-label for search input and button. Default is 'Search'.
         */
        "label"?: string;
        /**
          * If `true`, the component will use the small variant. Only available when `uswds` is `true`.
         */
        "small"?: boolean;
        /**
          * An array of strings containing suggestions to be displayed in listbox. This component displays up to 5 suggestions.
         */
        "suggestions"?: any;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
        /**
          * The value of the input field
         */
        "value"?: string;
    }
    interface VaSegmentedProgressBar {
        /**
          * Whether or not to center the step labels (v3 only)
         */
        "centeredLabels"?: boolean;
        /**
          * Show number counters for each step (v3 only)
         */
        "counters"?: "default" | "small";
        /**
          * The current segment in progress
         */
        "current": number;
        /**
          * Whether or not an analytics event will be fired.
         */
        "enableAnalytics"?: boolean;
        /**
          * Header level for button wrapper. Must be between 1 and 6 (v3 only)
         */
        "headerLevel"?: number;
        /**
          * Text of current step (v3 only)
         */
        "headingText"?: string;
        /**
          * An override for the default aria label.
         */
        "label"?: string;
        /**
          * String containing a list of step labels delimited by a semi-colon (v3 only) Example: `"Step 1;Step 2;Step 3"`
         */
        "labels"?: string;
        /**
          * The term used to indicate the current progress for the heading "[progressTerm] 2 of 5". (Screen reader only)
         */
        "progressTerm"?: string;
        /**
          * The total number of segments in the progress bar
         */
        "total": number;
        /**
          * When true, this makes the segmented-progress-bar use a div instead of a heading (v3 only)
         */
        "useDiv"?: boolean;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
    }
    interface VaSelect {
        /**
          * Whether or not to fire the analytics events
         */
        "enableAnalytics"?: boolean;
        /**
          * Error message to display. When defined, this indicates an error.
         */
        "error"?: string;
        /**
          * Optional hint text.
         */
        "hint"?: string;
        /**
          * Whether or not `aria-invalid` will be set on the inner select. Useful when composing the component into something larger, like a date component.
         */
        "invalid"?: boolean;
        /**
          * Text label for the field.
         */
        "label": string;
        /**
          * An optional message that will be read by screen readers when the select is focused.
         */
        "messageAriaDescribedby"?: string;
        /**
          * Name attribute for the select field.
         */
        "name": string;
        /**
          * Whether or not to add usa-input--error as class if error message is outside of component
         */
        "reflectInputError"?: boolean;
        /**
          * Whether or not this is a required field.
         */
        "required"?: boolean;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
        /**
          * Selected value (will get updated on select).
         */
        "value"?: string;
    }
    interface VaStatementOfTruth {
        /**
          * The error to be applied to the va-check-box element
         */
        "checkboxError": string;
        /**
          * The label for the va-checkbox-component
         */
        "checkboxLabel": string;
        /**
          * The flag to prefill the checked state of the va-checkbox component
         */
        "checked": boolean;
        /**
          * An optional custom header for the component
         */
        "heading": string;
        /**
          * The error to be applied to the va-text-input element
         */
        "inputError": string;
        /**
          * The label for the va-text-input component
         */
        "inputLabel": string;
        /**
          * An optional message that will be read by screen readers when the input in the va-text-input component is focused.
         */
        "inputMessageAriaDescribedby": string;
        /**
          * The value to pre-fill the va-text-input element
         */
        "inputValue": string;
    }
    interface VaSummaryBox {
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
    }
    interface VaTable {
        /**
          * Whether the initial sort state will be descending or not.
         */
        "descending"?: boolean;
        /**
          * The zero-based index of the column to sort by (Doesn't work in IE11). Optional.
         */
        "sortColumn"?: number;
        /**
          * Convert to a stacked table when screen size is small True by default, must specify if false if this is unwanted
         */
        "stacked"?: boolean;
        /**
          * The title of the table
         */
        "tableTitle"?: string;
        /**
          * If uswds is true, the type of table
         */
        "tableType"?: 'borderless';
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
    }
    interface VaTableInner {
        /**
          * If uswds is true, the number of columns in the table
         */
        "cols"?: number;
        /**
          * Whether the initial sort state will be descending or not.
         */
        "descending"?: boolean;
        "rows"?: number;
        /**
          * The zero-based index of the column to sort by (Doesn't work in IE11). Optional.
         */
        "sortColumn"?: number;
        /**
          * If true convert to a stacked table when screen size is small
         */
        "stacked"?: boolean;
        /**
          * The title of the table
         */
        "tableTitle": string;
        /**
          * If uswds is true, the type of table to be used
         */
        "tableType"?: 'borderless';
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
        /**
          * A live reference to the va-table-rows in the table which are hard to access from this component
         */
        "vaTableRowRefs"?: any;
    }
    interface VaTableRow {
    }
    interface VaTelephone {
        /**
          * Numeric string representing the contact number. Typical length is 3 or 10 digits - SMS short codes will be 5 or 6 digits.
         */
        "contact": string;
        /**
          * Optional numeric string phone number extension
         */
        "extension"?: string;
        /**
          * Indicates if this is a number meant to be called from outside the US. Prepends a "+1" to the formatted number.
         */
        "international"?: boolean;
        /**
          * An optional message that will be read by screen readers when the phone number is focused.
         */
        "messageAriaDescribedby"?: string;
        /**
          * Indicates if the phone number can be clicked or not
         */
        "notClickable"?: boolean;
        /**
          * Indicates if this is a number meant to be used to text.
         */
        "sms"?: boolean;
        /**
          * Indicates if this is a number meant to be called from a teletypewriter for deaf users.
         */
        "tty"?: boolean;
        /**
          * Optional vanity phone number. Replaces the last 4 digits with the vanity text input
         */
        "vanity"?: string;
    }
    interface VaTextInput {
        /**
          * Allows the browser to automatically complete the input.
         */
        "autocomplete"?: string;
        /**
          * Whether the component should show a character count message. Has no effect without uswds and maxlength being set.
         */
        "charcount"?: boolean;
        /**
          * Whether this component will be used to accept a currency value.
         */
        "currency"?: boolean;
        /**
          * Emit component-library-analytics events on the blur event.
         */
        "enableAnalytics"?: boolean;
        /**
          * The error message to render.
         */
        "error"?: string;
        /**
          * The content of the heading if `useFormsPattern` and `uswds` are true.
         */
        "formHeading"?: string;
        /**
          * The heading level for the heading if `useFormsPattern` and `uswds` are true.
         */
        "formHeadingLevel"?: number;
        /**
          * Optional hint text.
         */
        "hint"?: string;
        /**
          * The inputmode attribute.
         */
        "inputmode"?: | 'decimal'
    | 'email'
    | 'numeric'
    | 'search'
    | 'tel'
    | 'text'
    | 'url';
        /**
          * Whether or not `aria-invalid` will be set on the inner input. Useful when composing the component into something larger, like a date component.
         */
        "invalid"?: boolean;
        /**
          * The label for the text input.
         */
        "label"?: string;
        /**
          * The max attribute specifies the maximum value for an input element if the inputmode is numeric.
         */
        "max"?: number | string;
        /**
          * The maximum number of characters allowed in the input. Negative and zero values will be ignored.
         */
        "maxlength"?: number;
        /**
          * An optional message that will be read by screen readers when the input is focused.
         */
        "messageAriaDescribedby"?: string;
        /**
          * The min attribute specifies the minimum value for an input element if the inputmode is numeric.
         */
        "min"?: number | string;
        /**
          * The minimum number of characters allowed in the input.
         */
        "minlength"?: number;
        /**
          * The name to pass to the input element.
         */
        "name"?: string;
        /**
          * The regular expression that the input element's value is checked against on submission
         */
        "pattern"?: string;
        /**
          * Whether or not to add usa-input--error as class if error message is outside of component
         */
        "reflectInputError"?: boolean;
        /**
          * Set the input to required and render the (Required) text.
         */
        "required"?: boolean;
        /**
          * Adds styling based on status value
         */
        "success"?: boolean;
        /**
          * The type attribute.
         */
        "type"?: 'email' | 'number' | 'search' | 'tel' | 'text' | 'url';
        /**
          * Enabling this will add a heading and description for integrating into the forms pattern. Accepts `single` or `multiple` to indicate if the form is a single input or will have multiple inputs. `uswds` should be true.
         */
        "useFormsPattern"?: string;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
        /**
          * The value for the input.
         */
        "value"?: string;
        /**
          * Displays the input at a specific width. Accepts 2xs (4ex), xs (7ex), sm or small (10ex), md or medium (20ex), lg (30ex), xl (40ex), and 2xl (50ex).
         */
        "width"?: string;
    }
    interface VaTextarea {
        /**
          * Whether the component should show a character count message. Has no effect without uswds and maxlength being set.
         */
        "charcount"?: boolean;
        /**
          * Emit component-library-analytics events on the blur event.
         */
        "enableAnalytics"?: boolean;
        /**
          * The error message to render.
         */
        "error"?: string;
        /**
          * The content of the heading if `useFormsPattern` and `uswds` are true.
         */
        "formHeading"?: string;
        /**
          * The heading level for the heading if `useFormsPattern` and `uswds` are true.
         */
        "formHeadingLevel"?: number;
        /**
          * Optional hint text.
         */
        "hint"?: string;
        /**
          * The label for the textarea.
         */
        "label"?: string;
        /**
          * The maximum number of characters allowed in the input. Negative and zero values will be ignored.
         */
        "maxlength"?: number;
        /**
          * An optional message that will be read by screen readers when the input is focused.
         */
        "messageAriaDescribedby"?: string;
        /**
          * The name for the input.
         */
        "name"?: string;
        /**
          * The placeholder string.
         */
        "placeholder"?: string;
        /**
          * Set the input to required and render the (Required) text.
         */
        "required"?: boolean;
        /**
          * Enabling this will add a heading and description for integrating into the forms pattern. Accepts `single` or `multiple` to indicate if the form is a single input or will have multiple inputs. `uswds` should be true.
         */
        "useFormsPattern"?: string;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
        /**
          * The value of the textarea
         */
        "value"?: string;
    }
}
export interface VaAccordionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaAccordionElement;
}
export interface VaAccordionItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaAccordionItemElement;
}
export interface VaAdditionalInfoCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaAdditionalInfoElement;
}
export interface VaAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaAlertElement;
}
export interface VaAlertExpandableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaAlertExpandableElement;
}
export interface VaBannerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaBannerElement;
}
export interface VaBreadcrumbsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaBreadcrumbsElement;
}
export interface VaButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaButtonElement;
}
export interface VaButtonIconCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaButtonIconElement;
}
export interface VaButtonPairCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaButtonPairElement;
}
export interface VaCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaCheckboxElement;
}
export interface VaCheckboxGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaCheckboxGroupElement;
}
export interface VaDateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaDateElement;
}
export interface VaFileInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaFileInputElement;
}
export interface VaFileInputMultipleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaFileInputMultipleElement;
}
export interface VaLinkCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaLinkElement;
}
export interface VaLinkActionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaLinkActionElement;
}
export interface VaLoadingIndicatorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaLoadingIndicatorElement;
}
export interface VaMaintenanceBannerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaMaintenanceBannerElement;
}
export interface VaMemorableDateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaMemorableDateElement;
}
export interface VaModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaModalElement;
}
export interface VaNotificationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaNotificationElement;
}
export interface VaNumberInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaNumberInputElement;
}
export interface VaOfficialGovBannerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaOfficialGovBannerElement;
}
export interface VaOnThisPageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaOnThisPageElement;
}
export interface VaPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaPaginationElement;
}
export interface VaPrivacyAgreementCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaPrivacyAgreementElement;
}
export interface VaProgressBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaProgressBarElement;
}
export interface VaPromoBannerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaPromoBannerElement;
}
export interface VaRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaRadioElement;
}
export interface VaRadioOptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaRadioOptionElement;
}
export interface VaSearchInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaSearchInputElement;
}
export interface VaSegmentedProgressBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaSegmentedProgressBarElement;
}
export interface VaSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaSelectElement;
}
export interface VaStatementOfTruthCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaStatementOfTruthElement;
}
export interface VaTelephoneCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaTelephoneElement;
}
export interface VaTextInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaTextInputElement;
}
export interface VaTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVaTextareaElement;
}
declare global {
    interface HTMLVaAccordionElement extends Components.VaAccordion, HTMLStencilElement {
    }
    var HTMLVaAccordionElement: {
        prototype: HTMLVaAccordionElement;
        new (): HTMLVaAccordionElement;
    };
    interface HTMLVaAccordionItemElement extends Components.VaAccordionItem, HTMLStencilElement {
    }
    var HTMLVaAccordionItemElement: {
        prototype: HTMLVaAccordionItemElement;
        new (): HTMLVaAccordionItemElement;
    };
    interface HTMLVaAdditionalInfoElement extends Components.VaAdditionalInfo, HTMLStencilElement {
    }
    var HTMLVaAdditionalInfoElement: {
        prototype: HTMLVaAdditionalInfoElement;
        new (): HTMLVaAdditionalInfoElement;
    };
    interface HTMLVaAlertElement extends Components.VaAlert, HTMLStencilElement {
    }
    var HTMLVaAlertElement: {
        prototype: HTMLVaAlertElement;
        new (): HTMLVaAlertElement;
    };
    interface HTMLVaAlertExpandableElement extends Components.VaAlertExpandable, HTMLStencilElement {
    }
    var HTMLVaAlertExpandableElement: {
        prototype: HTMLVaAlertExpandableElement;
        new (): HTMLVaAlertExpandableElement;
    };
    interface HTMLVaBackToTopElement extends Components.VaBackToTop, HTMLStencilElement {
    }
    var HTMLVaBackToTopElement: {
        prototype: HTMLVaBackToTopElement;
        new (): HTMLVaBackToTopElement;
    };
    interface HTMLVaBannerElement extends Components.VaBanner, HTMLStencilElement {
    }
    var HTMLVaBannerElement: {
        prototype: HTMLVaBannerElement;
        new (): HTMLVaBannerElement;
    };
    interface HTMLVaBreadcrumbsElement extends Components.VaBreadcrumbs, HTMLStencilElement {
    }
    var HTMLVaBreadcrumbsElement: {
        prototype: HTMLVaBreadcrumbsElement;
        new (): HTMLVaBreadcrumbsElement;
    };
    interface HTMLVaButtonElement extends Components.VaButton, HTMLStencilElement {
    }
    var HTMLVaButtonElement: {
        prototype: HTMLVaButtonElement;
        new (): HTMLVaButtonElement;
    };
    interface HTMLVaButtonIconElement extends Components.VaButtonIcon, HTMLStencilElement {
    }
    var HTMLVaButtonIconElement: {
        prototype: HTMLVaButtonIconElement;
        new (): HTMLVaButtonIconElement;
    };
    interface HTMLVaButtonPairElement extends Components.VaButtonPair, HTMLStencilElement {
    }
    var HTMLVaButtonPairElement: {
        prototype: HTMLVaButtonPairElement;
        new (): HTMLVaButtonPairElement;
    };
    interface HTMLVaCardElement extends Components.VaCard, HTMLStencilElement {
    }
    var HTMLVaCardElement: {
        prototype: HTMLVaCardElement;
        new (): HTMLVaCardElement;
    };
    interface HTMLVaCheckboxElement extends Components.VaCheckbox, HTMLStencilElement {
    }
    var HTMLVaCheckboxElement: {
        prototype: HTMLVaCheckboxElement;
        new (): HTMLVaCheckboxElement;
    };
    interface HTMLVaCheckboxGroupElement extends Components.VaCheckboxGroup, HTMLStencilElement {
    }
    var HTMLVaCheckboxGroupElement: {
        prototype: HTMLVaCheckboxGroupElement;
        new (): HTMLVaCheckboxGroupElement;
    };
    interface HTMLVaCrisisLineModalElement extends Components.VaCrisisLineModal, HTMLStencilElement {
    }
    var HTMLVaCrisisLineModalElement: {
        prototype: HTMLVaCrisisLineModalElement;
        new (): HTMLVaCrisisLineModalElement;
    };
    interface HTMLVaDateElement extends Components.VaDate, HTMLStencilElement {
    }
    var HTMLVaDateElement: {
        prototype: HTMLVaDateElement;
        new (): HTMLVaDateElement;
    };
    interface HTMLVaFileInputElement extends Components.VaFileInput, HTMLStencilElement {
    }
    var HTMLVaFileInputElement: {
        prototype: HTMLVaFileInputElement;
        new (): HTMLVaFileInputElement;
    };
    interface HTMLVaFileInputMultipleElement extends Components.VaFileInputMultiple, HTMLStencilElement {
    }
    var HTMLVaFileInputMultipleElement: {
        prototype: HTMLVaFileInputMultipleElement;
        new (): HTMLVaFileInputMultipleElement;
    };
    interface HTMLVaHeaderMinimalElement extends Components.VaHeaderMinimal, HTMLStencilElement {
    }
    var HTMLVaHeaderMinimalElement: {
        prototype: HTMLVaHeaderMinimalElement;
        new (): HTMLVaHeaderMinimalElement;
    };
    interface HTMLVaIconElement extends Components.VaIcon, HTMLStencilElement {
    }
    var HTMLVaIconElement: {
        prototype: HTMLVaIconElement;
        new (): HTMLVaIconElement;
    };
    interface HTMLVaLinkElement extends Components.VaLink, HTMLStencilElement {
    }
    var HTMLVaLinkElement: {
        prototype: HTMLVaLinkElement;
        new (): HTMLVaLinkElement;
    };
    interface HTMLVaLinkActionElement extends Components.VaLinkAction, HTMLStencilElement {
    }
    var HTMLVaLinkActionElement: {
        prototype: HTMLVaLinkActionElement;
        new (): HTMLVaLinkActionElement;
    };
    interface HTMLVaLoadingIndicatorElement extends Components.VaLoadingIndicator, HTMLStencilElement {
    }
    var HTMLVaLoadingIndicatorElement: {
        prototype: HTMLVaLoadingIndicatorElement;
        new (): HTMLVaLoadingIndicatorElement;
    };
    interface HTMLVaMaintenanceBannerElement extends Components.VaMaintenanceBanner, HTMLStencilElement {
    }
    var HTMLVaMaintenanceBannerElement: {
        prototype: HTMLVaMaintenanceBannerElement;
        new (): HTMLVaMaintenanceBannerElement;
    };
    interface HTMLVaMemorableDateElement extends Components.VaMemorableDate, HTMLStencilElement {
    }
    var HTMLVaMemorableDateElement: {
        prototype: HTMLVaMemorableDateElement;
        new (): HTMLVaMemorableDateElement;
    };
    interface HTMLVaMinimalFooterElement extends Components.VaMinimalFooter, HTMLStencilElement {
    }
    var HTMLVaMinimalFooterElement: {
        prototype: HTMLVaMinimalFooterElement;
        new (): HTMLVaMinimalFooterElement;
    };
    interface HTMLVaModalElement extends Components.VaModal, HTMLStencilElement {
    }
    var HTMLVaModalElement: {
        prototype: HTMLVaModalElement;
        new (): HTMLVaModalElement;
    };
    interface HTMLVaNeedHelpElement extends Components.VaNeedHelp, HTMLStencilElement {
    }
    var HTMLVaNeedHelpElement: {
        prototype: HTMLVaNeedHelpElement;
        new (): HTMLVaNeedHelpElement;
    };
    interface HTMLVaNotificationElement extends Components.VaNotification, HTMLStencilElement {
    }
    var HTMLVaNotificationElement: {
        prototype: HTMLVaNotificationElement;
        new (): HTMLVaNotificationElement;
    };
    interface HTMLVaNumberInputElement extends Components.VaNumberInput, HTMLStencilElement {
    }
    var HTMLVaNumberInputElement: {
        prototype: HTMLVaNumberInputElement;
        new (): HTMLVaNumberInputElement;
    };
    interface HTMLVaOfficialGovBannerElement extends Components.VaOfficialGovBanner, HTMLStencilElement {
    }
    var HTMLVaOfficialGovBannerElement: {
        prototype: HTMLVaOfficialGovBannerElement;
        new (): HTMLVaOfficialGovBannerElement;
    };
    interface HTMLVaOmbInfoElement extends Components.VaOmbInfo, HTMLStencilElement {
    }
    var HTMLVaOmbInfoElement: {
        prototype: HTMLVaOmbInfoElement;
        new (): HTMLVaOmbInfoElement;
    };
    interface HTMLVaOnThisPageElement extends Components.VaOnThisPage, HTMLStencilElement {
    }
    var HTMLVaOnThisPageElement: {
        prototype: HTMLVaOnThisPageElement;
        new (): HTMLVaOnThisPageElement;
    };
    interface HTMLVaPaginationElement extends Components.VaPagination, HTMLStencilElement {
    }
    var HTMLVaPaginationElement: {
        prototype: HTMLVaPaginationElement;
        new (): HTMLVaPaginationElement;
    };
    interface HTMLVaPrivacyAgreementElement extends Components.VaPrivacyAgreement, HTMLStencilElement {
    }
    var HTMLVaPrivacyAgreementElement: {
        prototype: HTMLVaPrivacyAgreementElement;
        new (): HTMLVaPrivacyAgreementElement;
    };
    interface HTMLVaProcessListElement extends Components.VaProcessList, HTMLStencilElement {
    }
    var HTMLVaProcessListElement: {
        prototype: HTMLVaProcessListElement;
        new (): HTMLVaProcessListElement;
    };
    interface HTMLVaProcessListItemElement extends Components.VaProcessListItem, HTMLStencilElement {
    }
    var HTMLVaProcessListItemElement: {
        prototype: HTMLVaProcessListItemElement;
        new (): HTMLVaProcessListItemElement;
    };
    interface HTMLVaProgressBarElement extends Components.VaProgressBar, HTMLStencilElement {
    }
    var HTMLVaProgressBarElement: {
        prototype: HTMLVaProgressBarElement;
        new (): HTMLVaProgressBarElement;
    };
    interface HTMLVaPromoBannerElement extends Components.VaPromoBanner, HTMLStencilElement {
    }
    var HTMLVaPromoBannerElement: {
        prototype: HTMLVaPromoBannerElement;
        new (): HTMLVaPromoBannerElement;
    };
    interface HTMLVaRadioElement extends Components.VaRadio, HTMLStencilElement {
    }
    var HTMLVaRadioElement: {
        prototype: HTMLVaRadioElement;
        new (): HTMLVaRadioElement;
    };
    interface HTMLVaRadioOptionElement extends Components.VaRadioOption, HTMLStencilElement {
    }
    var HTMLVaRadioOptionElement: {
        prototype: HTMLVaRadioOptionElement;
        new (): HTMLVaRadioOptionElement;
    };
    interface HTMLVaSearchInputElement extends Components.VaSearchInput, HTMLStencilElement {
    }
    var HTMLVaSearchInputElement: {
        prototype: HTMLVaSearchInputElement;
        new (): HTMLVaSearchInputElement;
    };
    interface HTMLVaSegmentedProgressBarElement extends Components.VaSegmentedProgressBar, HTMLStencilElement {
    }
    var HTMLVaSegmentedProgressBarElement: {
        prototype: HTMLVaSegmentedProgressBarElement;
        new (): HTMLVaSegmentedProgressBarElement;
    };
    interface HTMLVaSelectElement extends Components.VaSelect, HTMLStencilElement {
    }
    var HTMLVaSelectElement: {
        prototype: HTMLVaSelectElement;
        new (): HTMLVaSelectElement;
    };
    interface HTMLVaStatementOfTruthElement extends Components.VaStatementOfTruth, HTMLStencilElement {
    }
    var HTMLVaStatementOfTruthElement: {
        prototype: HTMLVaStatementOfTruthElement;
        new (): HTMLVaStatementOfTruthElement;
    };
    interface HTMLVaSummaryBoxElement extends Components.VaSummaryBox, HTMLStencilElement {
    }
    var HTMLVaSummaryBoxElement: {
        prototype: HTMLVaSummaryBoxElement;
        new (): HTMLVaSummaryBoxElement;
    };
    interface HTMLVaTableElement extends Components.VaTable, HTMLStencilElement {
    }
    var HTMLVaTableElement: {
        prototype: HTMLVaTableElement;
        new (): HTMLVaTableElement;
    };
    interface HTMLVaTableInnerElement extends Components.VaTableInner, HTMLStencilElement {
    }
    var HTMLVaTableInnerElement: {
        prototype: HTMLVaTableInnerElement;
        new (): HTMLVaTableInnerElement;
    };
    interface HTMLVaTableRowElement extends Components.VaTableRow, HTMLStencilElement {
    }
    var HTMLVaTableRowElement: {
        prototype: HTMLVaTableRowElement;
        new (): HTMLVaTableRowElement;
    };
    interface HTMLVaTelephoneElement extends Components.VaTelephone, HTMLStencilElement {
    }
    var HTMLVaTelephoneElement: {
        prototype: HTMLVaTelephoneElement;
        new (): HTMLVaTelephoneElement;
    };
    interface HTMLVaTextInputElement extends Components.VaTextInput, HTMLStencilElement {
    }
    var HTMLVaTextInputElement: {
        prototype: HTMLVaTextInputElement;
        new (): HTMLVaTextInputElement;
    };
    interface HTMLVaTextareaElement extends Components.VaTextarea, HTMLStencilElement {
    }
    var HTMLVaTextareaElement: {
        prototype: HTMLVaTextareaElement;
        new (): HTMLVaTextareaElement;
    };
    interface HTMLElementTagNameMap {
        "va-accordion": HTMLVaAccordionElement;
        "va-accordion-item": HTMLVaAccordionItemElement;
        "va-additional-info": HTMLVaAdditionalInfoElement;
        "va-alert": HTMLVaAlertElement;
        "va-alert-expandable": HTMLVaAlertExpandableElement;
        "va-back-to-top": HTMLVaBackToTopElement;
        "va-banner": HTMLVaBannerElement;
        "va-breadcrumbs": HTMLVaBreadcrumbsElement;
        "va-button": HTMLVaButtonElement;
        "va-button-icon": HTMLVaButtonIconElement;
        "va-button-pair": HTMLVaButtonPairElement;
        "va-card": HTMLVaCardElement;
        "va-checkbox": HTMLVaCheckboxElement;
        "va-checkbox-group": HTMLVaCheckboxGroupElement;
        "va-crisis-line-modal": HTMLVaCrisisLineModalElement;
        "va-date": HTMLVaDateElement;
        "va-file-input": HTMLVaFileInputElement;
        "va-file-input-multiple": HTMLVaFileInputMultipleElement;
        "va-header-minimal": HTMLVaHeaderMinimalElement;
        "va-icon": HTMLVaIconElement;
        "va-link": HTMLVaLinkElement;
        "va-link-action": HTMLVaLinkActionElement;
        "va-loading-indicator": HTMLVaLoadingIndicatorElement;
        "va-maintenance-banner": HTMLVaMaintenanceBannerElement;
        "va-memorable-date": HTMLVaMemorableDateElement;
        "va-minimal-footer": HTMLVaMinimalFooterElement;
        "va-modal": HTMLVaModalElement;
        "va-need-help": HTMLVaNeedHelpElement;
        "va-notification": HTMLVaNotificationElement;
        "va-number-input": HTMLVaNumberInputElement;
        "va-official-gov-banner": HTMLVaOfficialGovBannerElement;
        "va-omb-info": HTMLVaOmbInfoElement;
        "va-on-this-page": HTMLVaOnThisPageElement;
        "va-pagination": HTMLVaPaginationElement;
        "va-privacy-agreement": HTMLVaPrivacyAgreementElement;
        "va-process-list": HTMLVaProcessListElement;
        "va-process-list-item": HTMLVaProcessListItemElement;
        "va-progress-bar": HTMLVaProgressBarElement;
        "va-promo-banner": HTMLVaPromoBannerElement;
        "va-radio": HTMLVaRadioElement;
        "va-radio-option": HTMLVaRadioOptionElement;
        "va-search-input": HTMLVaSearchInputElement;
        "va-segmented-progress-bar": HTMLVaSegmentedProgressBarElement;
        "va-select": HTMLVaSelectElement;
        "va-statement-of-truth": HTMLVaStatementOfTruthElement;
        "va-summary-box": HTMLVaSummaryBoxElement;
        "va-table": HTMLVaTableElement;
        "va-table-inner": HTMLVaTableInnerElement;
        "va-table-row": HTMLVaTableRowElement;
        "va-telephone": HTMLVaTelephoneElement;
        "va-text-input": HTMLVaTextInputElement;
        "va-textarea": HTMLVaTextareaElement;
    }
}
declare namespace LocalJSX {
    interface VaAccordion {
        /**
          * If `true`, doesn't fire the CustomEvent which can be used for analytics tracking.
         */
        "disableAnalytics"?: boolean;
        /**
          * The event used to track usage of the component. This is emitted when an accordion item is toggled and disableAnalytics is not true.
         */
        "onComponent-library-analytics"?: (event: VaAccordionCustomEvent<any>) => void;
        /**
          * True if only a single item can be opened at once
         */
        "openSingle"?: boolean;
        /**
          * Optional accordion section heading text. Only used in analytics event. Default is null.
         */
        "sectionHeading"?: string;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
    }
    interface VaAccordionItem {
        /**
          * Whether or not the accordion item will have a border
         */
        "bordered"?: boolean;
        /**
          * The accordion item header text
         */
        "header"?: string;
        /**
          * Header level for button wrapper. Must be between 1 and 6
         */
        "level"?: number;
        /**
          * This event is fired so that va-accordion element can manage which items are opened or closed
         */
        "onAccordionItemToggled"?: (event: VaAccordionItemCustomEvent<any>) => void;
        /**
          * True if the item is open
         */
        "open"?: boolean;
        /**
          * Optional accordion item subheader text. Default is null.
         */
        "subheader"?: string;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
    }
    interface VaAdditionalInfo {
        /**
          * If `true`, doesn't fire the CustomEvent which can be used for analytics tracking.
         */
        "disableAnalytics"?: boolean;
        /**
          * If `true`, left blue border and padding is removed.
         */
        "disableBorder"?: boolean;
        /**
          * The event used to track usage of the component. This is emitted when an anchor link is clicked and disableAnalytics is not true.
         */
        "onComponent-library-analytics"?: (event: VaAdditionalInfoCustomEvent<any>) => void;
        /**
          * The text to trigger the expansion
         */
        "trigger": string;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
    }
    interface VaAlert {
        /**
          * If `true`, renders the alert with only a background color corresponding to the status - no left border. (v1 only)
         */
        "backgroundOnly"?: boolean;
        /**
          * Aria-label text for the close button.
         */
        "closeBtnAriaLabel"?: string;
        /**
          * If `true`, a close button will be displayed.
         */
        "closeable"?: boolean;
        /**
          * If `true`, doesn't fire the CustomEvent which can be used for analytics tracking.
         */
        "disableAnalytics"?: boolean;
        /**
          * If `true`, the alert will be full width. Should be for emergency communication only.
         */
        "fullWidth"?: boolean;
        /**
          * Fires when the component is closed by clicking on the close icon. This fires only when closeable is true.
         */
        "onCloseEvent"?: (event: VaAlertCustomEvent<any>) => void;
        /**
          * The event used to track usage of the component. This is emitted when an anchor link is clicked and disableAnalytics is not true.
         */
        "onComponent-library-analytics"?: (event: VaAlertCustomEvent<any>) => void;
        /**
          * Fires when the component has successfully finished rendering for the first time.
         */
        "onVa-component-did-load"?: (event: VaAlertCustomEvent<any>) => void;
        /**
          * Displays the slim variation. Available when USWDS is true.
         */
        "slim"?: boolean;
        /**
          * Determines the icon and border/background color.
         */
        "status"?: | 'info'
    | 'warning'
    | 'error'
    | 'success'
    | 'continue';
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
        /**
          * If `true`, the alert will be visible.
         */
        "visible"?: boolean;
    }
    interface VaAlertExpandable {
        /**
          * If `true`, doesn't fire the CustomEvent which can be used for analytics tracking.
         */
        "disableAnalytics"?: boolean;
        /**
          * If `true`, the status icon is removed.
         */
        "iconless"?: boolean;
        /**
          * The event used to track usage of the component. This is emitted when an anchor link is clicked and disableAnalytics is not true.
         */
        "onComponent-library-analytics"?: (event: VaAlertExpandableCustomEvent<any>) => void;
        /**
          * Determines the icon and background color. One of `info`, `error`, `success`, `warning`, or `continue`
         */
        "status"?: 'continue' | 'error' | 'info' | 'success' | 'warning';
        /**
          * The text to trigger the expansion
         */
        "trigger": string;
    }
    interface VaBackToTop {
    }
    interface VaBanner {
        /**
          * Aria Label for the "region" of the nested va-alert.
         */
        "dataLabel"?: string;
        /**
          * If true, doesn't fire the CustomEvent which can be used for analytics tracking.
         */
        "disableAnalytics"?: boolean;
        /**
          * The headline of the banner.
         */
        "headline"?: string;
        /**
          * The event used to track usage of the component. This is emitted when an anchor link or the dismiss icon is clicked and disableAnalytics is not true.
         */
        "onComponent-library-analytics"?: (event: VaBannerCustomEvent<any>) => void;
        /**
          * Enable the close functionality. The banner will be closed until storage is cleared.
         */
        "showClose"?: boolean;
        /**
          * The type of the banner. This affects both the icon of the AlertBox and the top border color.
         */
        "type"?: 'info' | 'warning' | 'error' | 'success' | 'continue';
        /**
          * A boolean that when false makes it so that the banner does not render.
         */
        "visible"?: boolean;
        /**
          * Enable sessionStorage for the Banner otherwise storage if showClose is enabled will default to localStorage
         */
        "windowSession"?: boolean;
    }
    interface VaBreadcrumbs {
        /**
          * Represents a list of breadcrumbs. Use a JSON array of objects with label and href properties, then wrap in a string if using non-React-binding version. See Storybook examples for React-binding version. For pure web components, here's an example link: ``[{"href": "/link1", "label": "Link 1"}]`. This prop is available when `uswds` is set to `true`.
         */
        "breadcrumbList"?: Breadcrumb[] | string;
        /**
          * Analytics tracking function(s) will not be called
         */
        "disableAnalytics"?: boolean;
        /**
          * When true, the first breadcrumb label will be "VA.gov home".
         */
        "homeVeteransAffairs"?: boolean;
        /**
          * Adds an aria-label attribute to the <nav /> element.
         */
        "label"?: string;
        /**
          * The event used to track usage of the component. This is emitted when a breadcrumb anchor is clicked and disableAnalytics is not true.
         */
        "onComponent-library-analytics"?: (event: VaBreadcrumbsCustomEvent<any>) => void;
        /**
          * Fires when user clicks on breadcrumb anchor tag. Has no effect unless uswds is true and the href of anchor tag is part of breadcrumb object that also has isRouterLink: true
         */
        "onRouteChange"?: (event: VaBreadcrumbsCustomEvent<{ href: string }>) => void;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
        /**
          * Whether or not the component will wrap the breadcrumbs. This prop is available when `uswds` is set to `true`.
         */
        "wrapping"?: boolean;
    }
    interface VaButton {
        /**
          * If `true`, the button will use `Back` as its text and an icon to represent going back in form flows.
         */
        "back"?: boolean;
        /**
          * If `true`, the button will use the big variant.
         */
        "big"?: boolean;
        /**
          * If `true`, the button will use `Continue` as its text and an icon to represent proceeding forward in form flows.
         */
        "continue"?: boolean;
        /**
          * If `true`, the component-library-analytics event is disabled.
         */
        "disableAnalytics"?: boolean;
        /**
          * If `true`, the click event will not fire.
         */
        "disabled"?: boolean;
        /**
          * The aria-label of the component.
         */
        "label"?: string;
        /**
          * An optional message that will be read by screen readers when the input is focused.
         */
        "messageAriaDescribedby"?: string;
        /**
          * The event used to track usage of the component.
         */
        "onComponent-library-analytics"?: (event: VaButtonCustomEvent<any>) => void;
        /**
          * If `true`, the button will use the primary alternate variant.
         */
        "primaryAlternate"?: boolean;
        /**
          * If `true`, the button will use the secondary variant.
         */
        "secondary"?: boolean;
        /**
          * If `true`, the button will submit form data when clicked.
         */
        "submit"?: boolean;
        /**
          * The text displayed on the button. If `continue` or `back` is true, the value of text is ignored.
         */
        "text"?: string;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
    }
    interface VaButtonIcon {
        "buttonType"?: keyof typeof this.buttonTypeMap;
        /**
          * If `true`, the component-library-analytics event is disabled.
         */
        "disableAnalytics"?: boolean;
        /**
          * The aria-label of the component.
         */
        "label"?: string;
        /**
          * The event used to track usage of the component.
         */
        "onComponent-library-analytics"?: (event: VaButtonIconCustomEvent<any>) => void;
    }
    interface VaButtonPair {
        /**
          * If `true`, button pair will use Continue and Back for button text.
         */
        "continue"?: boolean;
        /**
          * If `true`, the component-library-analytics event is disabled.
         */
        "disableAnalytics"?: boolean;
        /**
          * The event used to track usage of the component.
         */
        "onComponent-library-analytics"?: (event: VaButtonPairCustomEvent<any>) => void;
        /**
          * Fires when the primary button is clicked.
         */
        "onPrimaryClick"?: (event: VaButtonPairCustomEvent<any>) => void;
        /**
          * Fires when the secondary button is clicked.
         */
        "onSecondaryClick"?: (event: VaButtonPairCustomEvent<any>) => void;
        /**
          * Applies to the primary button aria-label.
         */
        "primaryLabel"?: string;
        /**
          * Applies to the secondary button aria-label.
         */
        "secondaryLabel"?: string;
        /**
          * If `true`, the primary button will submit form data when clicked.
         */
        "submit"?: boolean;
        /**
          * If `true`, button pair will use Update and Cancel for button text.
         */
        "update"?: boolean;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
    }
    interface VaCard {
        /**
          * If `true`, the card will have a gray background.
         */
        "background"?: boolean;
        /**
          * If `true`, a drop-shadow will be displayed with a white background.
         */
        "showShadow"?: boolean;
    }
    interface VaCheckbox {
        /**
          * Description of the option displayed below the checkbox label. Available when uswds is true.
         */
        "checkboxDescription"?: string;
        /**
          * Whether the checkbox is checked or not.  Note: Because this isn't reflective, vaCheckbox.getAttribute('checked') will not reflect the correct value. Use the property vaCheckbox.checked instead.
         */
        "checked"?: boolean;
        /**
          * The description to render. If this prop exists, va-checkbox will render it instead of the named slot.
         */
        "description"?: string;
        /**
          * Whether or not the checkbox option is disabled. Available when uswds is true.
         */
        "disabled"?: boolean;
        /**
          * True if the analytics event should fire.
         */
        "enableAnalytics"?: boolean;
        /**
          * The error message to render.
         */
        "error"?: string;
        /**
          * Optional hint text.
         */
        "hint"?: string;
        /**
          * The label for the checkbox.
         */
        "label": string;
        /**
          * An optional message that will be read by screen readers when the checkbox is focused.
         */
        "messageAriaDescribedby"?: string;
        /**
          * The name to pass to the checkbox element.
         */
        "name"?: string;
        /**
          * The event used to track usage of the component. This is emitted when the input value changes and enableAnalytics is true.
         */
        "onComponent-library-analytics"?: (event: VaCheckboxCustomEvent<any>) => void;
        /**
          * The event emitted when the input value changes.
         */
        "onVaChange"?: (event: VaCheckboxCustomEvent<any>) => void;
        /**
          * Set the input to required and render the (Required) text.
         */
        "required"?: boolean;
        /**
          * Whether or not the component will display as a tile. Available when uswds is true.
         */
        "tile"?: boolean;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
    }
    interface VaCheckboxGroup {
        /**
          * Whether or not an analytics event will be fired.
         */
        "enableAnalytics"?: boolean;
        /**
          * A string with an error message.
         */
        "error"?: string;
        /**
          * The content of the heading if `useFormsPattern` and `uswds` are true.
         */
        "formHeading"?: string;
        /**
          * The heading level for the heading if `useFormsPattern` and `uswds` are true.
         */
        "formHeadingLevel"?: number;
        /**
          * Optional hint text.
         */
        "hint"?: string;
        /**
          * The text label for the checkbox group.
         */
        "label": string;
        /**
          * Insert a header with defined level inside the label (legend)
         */
        "labelHeaderLevel"?: string;
        /**
          * The event used to track usage of the component. This is emitted when an input value changes and enableAnalytics is true.
         */
        "onComponent-library-analytics"?: (event: VaCheckboxGroupCustomEvent<any>) => void;
        /**
          * Whether or not this input field is required.
         */
        "required"?: boolean;
        /**
          * Enabling this will add a heading and description for integrating into the forms pattern. Accepts `single` or `multiple` to indicate if the form is a single input or will have multiple inputs. `uswds` should be true.
         */
        "useFormsPattern"?: string;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
    }
    interface VaCrisisLineModal {
    }
    interface VaDate {
        /**
          * Whether or not an analytics event will be fired.
         */
        "enableAnalytics"?: boolean;
        /**
          * The error message to render (if any) This prop should be leveraged to display any custom validations needed for this component
         */
        "error"?: string;
        /**
          * Optional hint text.
         */
        "hint"?: string;
        "invalidDay"?: boolean;
        "invalidMonth"?: boolean;
        "invalidYear"?: boolean;
        /**
          * Label for the field.
         */
        "label": string;
        /**
          * Whether or not only the Month and Year inputs should be displayed.
         */
        "monthYearOnly"?: boolean;
        /**
          * Used to create unique name attributes for each input.
         */
        "name": string;
        /**
          * The event used to track usage of the component. This is emitted when an input value changes and enableAnalytics is true.
         */
        "onComponent-library-analytics"?: (event: VaDateCustomEvent<any>) => void;
        /**
          * Fires when the date input loses focus
         */
        "onDateBlur"?: (event: VaDateCustomEvent<any>) => void;
        /**
          * Fires when the date input loses focus after its value was changed
         */
        "onDateChange"?: (event: VaDateCustomEvent<any>) => void;
        /**
          * Render marker indicating field is required.
         */
        "required"?: boolean;
        /**
          * Set the default date value must be in YYYY-MM-DD format.
         */
        "value"?: string;
    }
    interface VaFileInput {
        /**
          * A comma-separated list of unique file type specifiers.
         */
        "accept"?: string;
        /**
          * The text displayed on the button.
         */
        "buttonText"?: string;
        /**
          * Emit component-library-analytics events on the file input change event.
         */
        "enableAnalytics"?: boolean;
        /**
          * The error message to render.
         */
        "error"?: string;
        /**
          * Optionally specifies the size of the header element to use instead of the base label. Accepts a number from 1 to 6, corresponding to HTML header elements h1 through h6. If not provided, defaults to standard label styling.
         */
        "headerSize"?: number;
        /**
          * DST only prop removes extraneous display for multiple file input
         */
        "headless"?: boolean;
        /**
          * Optional hint text.
         */
        "hint"?: string;
        /**
          * The label for the file input.
         */
        "label"?: string;
        /**
          * The name for the input element.
         */
        "name"?: string;
        /**
          * The event used to track usage of the component. This is emitted when the file input changes and enableAnalytics is true.
         */
        "onComponent-library-analytics"?: (event: VaFileInputCustomEvent<any>) => void;
        /**
          * The event emitted when the file input value changes.
         */
        "onVaChange"?: (event: VaFileInputCustomEvent<any>) => void;
        /**
          * Sets the input to required and renders the (*Required) text.
         */
        "required"?: boolean;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
    }
    interface VaFileInputMultiple {
        /**
          * Defines acceptable file types the user can select; uses file type or extensions.
         */
        "accept"?: string;
        /**
          * If enabled, emits custom analytics events when file changes occur.
         */
        "enableAnalytics"?: boolean;
        /**
          * Array of error messages corresponding to each file input. The length and order match the files array.
         */
        "errors"?: string[];
        /**
          * Specifies the header size of the label element, from 1 (largest) to 6 (smallest).
         */
        "headerSize"?: number;
        /**
          * Hint text provided to guide users on the expected format or type of files.
         */
        "hint"?: string;
        /**
          * Label for the file input, displayed above the input.
         */
        "label"?: string;
        /**
          * Name attribute for the file input element, used to identify the form data in the submission.
         */
        "name"?: string;
        /**
          * Event emitted when any change to the file inputs occurs.
         */
        "onVaMultipleChange"?: (event: VaFileInputMultipleCustomEvent<any>) => void;
        /**
          * If true, the file input is marked as required, and users must select a file.
         */
        "required"?: boolean;
    }
    interface VaHeaderMinimal {
        /**
          * Disables use of heading tags in the minimal header in favor of `<div>` tags. This is for when a heading level 1 needs to be used elsewhere, as there should only be one heading level 1 per page.
         */
        "disableHeadings"?: boolean;
        "header"?: string;
        "subheader"?: string;
    }
    interface VaIcon {
        /**
          * The name of the icon to use
         */
        "icon": string;
        /**
          * The size variant of the icon, an integer between 3 and 9 inclusive
         */
        "size"?: number;
        /**
          * Screen-reader text if the icon has semantic meaning and is not purely decorative.
         */
        "srtext"?: string;
    }
    interface VaLink {
        /**
          * The title used in the abbr element. If filetype is PDF, the abbr title will be Portable Document Format.
         */
        "abbrTitle"?: string;
        /**
          * If `true`, the anchor text will be bolded and include a right arrow icon.
         */
        "active"?: boolean;
        /**
          * If `true`, a calendar icon will be displayed before the anchor text.
         */
        "calendar"?: boolean;
        /**
          * If `true`, a channel icon will be displayed before the anchor text.
         */
        "channel"?: boolean;
        /**
          * If `true`, the component-library-analytics event is disabled.
         */
        "disableAnalytics"?: boolean;
        /**
          * If `true`, the link will be treated as a download, and a download icon will be displayed before the anchor text.
         */
        "download"?: boolean;
        /**
          * The suggested filename. Only valid if download or calendar is `true`.
         */
        "filename"?: string;
        /**
          * The type of the file. Only displayed if download is `true`.
         */
        "filetype"?: string;
        /**
          * The href attribute of the anchor.
         */
        "href": string;
        /**
          * The name of the icon to be displayed in the link.
         */
        "iconName"?: string;
        /**
          * The size variant of the icon, an integer between 3 and 9 inclusive.
         */
        "iconSize"?: number;
        /**
          * Adds an aria-label attribute to the link element.
         */
        "label"?: string;
        /**
          * The event used to track usage of the component.
         */
        "onComponent-library-analytics"?: (event: VaLinkCustomEvent<any>) => void;
        /**
          * The number of pages of the file. Only displayed if download is `true`.
         */
        "pages"?: number;
        /**
          * If 'true', will represent the link with white text instead of blue.
         */
        "reverse"?: boolean;
        /**
          * The anchor text.
         */
        "text": string;
        /**
          * If `true`, a video icon will be displayed before the anchor text.
         */
        "video"?: boolean;
    }
    interface VaLinkAction {
        /**
          * If `true`, the component-library-analytics event is disabled.
         */
        "disableAnalytics"?: boolean;
        /**
          * The href attribute of the anchor.
         */
        "href": string;
        /**
          * An optional message that will be read by screen readers when the link is focused.
         */
        "messageAriaDescribedby"?: string;
        /**
          * The event used to track usage of the component.
         */
        "onComponent-library-analytics"?: (event: VaLinkActionCustomEvent<any>) => void;
        /**
          * The anchor text.
         */
        "text": string;
        /**
          * The type of the link, which determines its style. Can be 'primary', 'secondary', or 'reverse'.
         */
        "type"?: "primary" | "secondary" | "reverse";
    }
    interface VaLoadingIndicator {
        /**
          * Analytics tracking function(s) will be called. Form components are disabled by default due to PII/PHI concerns.
         */
        "enableAnalytics"?: boolean;
        /**
          * An aria label
         */
        "label"?: string;
        /**
          * The message visible on screen when loading
         */
        "message"?: string;
        /**
          * The event used to track usage of the component.
         */
        "onComponent-library-analytics"?: (event: VaLoadingIndicatorCustomEvent<any>) => void;
        /**
          * Set to true if the loading indicator should capture focus
         */
        "setFocus"?: boolean;
    }
    interface VaMaintenanceBanner {
        /**
          * A unique ID that will be used for conditionally rendering the banner based on if the user has dismissed it already.
         */
        "bannerId": string;
        /**
          * Whether or not an analytics event will be fired.
         */
        "disableAnalytics"?: boolean;
        /**
          * Override logic for whether to show error or warning
         */
        "isError"?: boolean;
        /**
          * The Date/Time of when the maintenance is scheduled to end.
         */
        "maintenanceEndDateTime": string;
        /**
          * The Date/Time of when the maintenance is scheduled to begin.
         */
        "maintenanceStartDateTime": string;
        /**
          * The title of the banner shown during active maintenance.
         */
        "maintenanceTitle"?: string;
        /**
          * Fires when the component is closed by clicking on the close icon.
         */
        "onCloseEvent"?: (event: VaMaintenanceBannerCustomEvent<any>) => void;
        /**
          * The event used to track usage of the component. This is emitted when the component renders and enableAnalytics is true.
         */
        "onComponent-library-analytics"?: (event: VaMaintenanceBannerCustomEvent<any>) => void;
        /**
          * The Date/Time of when to be begin warning users of upcoming site maintenance.
         */
        "upcomingWarnStartDateTime": string;
        /**
          * The title of the banner shown for upcoming site maintenance.
         */
        "upcomingWarnTitle"?: string;
    }
    interface VaMemorableDate {
        /**
          * A custom error message to display if the day is invalid
         */
        "customDayErrorMessage"?: string;
        /**
          * A custom error message to display if the month is invalid
         */
        "customMonthErrorMessage"?: string;
        /**
          * A custom error message to display if the year is invalid
         */
        "customYearErrorMessage"?: string;
        /**
          * Whether or not an analytics event will be fired.
         */
        "enableAnalytics"?: boolean;
        /**
          * The error message to render (if any) This prop should be leveraged to display any custom validations needed for this component
         */
        "error"?: string;
        /**
          * The content of the heading if `useFormsPattern`.
         */
        "formHeading"?: string;
        /**
          * The heading level for the heading if `useFormsPattern`.
         */
        "formHeadingLevel"?: number;
        /**
          * Hint text string
         */
        "hint"?: string;
        "invalidDay"?: boolean;
        "invalidMonth"?: boolean;
        "invalidYear"?: boolean;
        /**
          * Label for the field.
         */
        "label": string;
        /**
          * Whether or not to use the month as an input or select.
         */
        "monthSelect"?: boolean;
        /**
          * Used to create unique name attributes for each input.
         */
        "name": string;
        /**
          * The event used to track usage of the component. This is emitted when an input value changes and enableAnalytics is true.
         */
        "onComponent-library-analytics"?: (event: VaMemorableDateCustomEvent<any>) => void;
        /**
          * Fires when the date input loses focus
         */
        "onDateBlur"?: (event: VaMemorableDateCustomEvent<any>) => void;
        /**
          * Fires when the date input loses focus after its value was changed
         */
        "onDateChange"?: (event: VaMemorableDateCustomEvent<any>) => void;
        /**
          * Render marker indicating field is required.
         */
        "required"?: boolean;
        /**
          * Enabling this will add a heading and description for integrating into the forms pattern. Accepts `single` or `multiple` to indicate if the form is a single input or will have multiple inputs.
         */
        "useFormsPattern"?: string;
        /**
          * Set the default date value must be in YYYY-MM-DD format.
         */
        "value"?: string;
    }
    interface VaMinimalFooter {
    }
    interface VaModal {
        /**
          * Additional DOM-nodes that should not be hidden from screen readers. Useful when an open modal shouldn't hide all content behind the overlay.
         */
        "ariaHiddenNodeExceptions"?: HTMLElement[];
        /**
          * Click outside modal will trigger closeEvent
         */
        "clickToClose"?: boolean;
        /**
          * If true, analytics event won't be fired
         */
        "disableAnalytics"?: boolean;
        /**
          * Whether or not the component will be forced to take action.
         */
        "forcedModal"?: boolean;
        /**
          * Selector to explicitly specify which element should receive focus when the modal is open, if the initially focused element is not the first focusable element in the document
         */
        "initialFocusSelector"?: string;
        /**
          * If `true`, modal will be wider.
         */
        "large"?: boolean;
        /**
          * Title/header text for the modal
         */
        "modalTitle"?: string;
        /**
          * Fires when modal is closed.
         */
        "onCloseEvent"?: (event: VaModalCustomEvent<any>) => void;
        /**
          * The event used to track usage of the component. Fires when a a page is selected if enable-analytics is true.
         */
        "onComponent-library-analytics"?: (event: VaModalCustomEvent<any>) => void;
        /**
          * Fires when primary button is clicked.
         */
        "onPrimaryButtonClick"?: (event: VaModalCustomEvent<any>) => void;
        /**
          * Fires when secondary button is clicked.
         */
        "onSecondaryButtonClick"?: (event: VaModalCustomEvent<any>) => void;
        /**
          * Primary button text
         */
        "primaryButtonText"?: string;
        /**
          * Secondary button text
         */
        "secondaryButtonText"?: string;
        "status"?: 'continue' | 'error' | 'info' | 'success' | 'warning';
        /**
          * Whether or not the component will be using the unstyled button.
         */
        "unstyled"?: boolean;
        /**
          * If the modal is visible or not
         */
        "visible"?: boolean;
    }
    interface VaNeedHelp {
    }
    interface VaNotification {
        /**
          * Aria-label text for the close button.
         */
        "closeBtnAriaLabel"?: string;
        /**
          * If `true`, a close button will be displayed.
         */
        "closeable"?: boolean;
        /**
          * Date and time for notification. This will also be incorporated into a unique aria-describedby label.
         */
        "dateTime"?: string;
        /**
          * If `true`, the component-library-analytics event is disabled.
         */
        "disableAnalytics"?: boolean;
        /**
          * If `false`, card will not have border
         */
        "hasBorder"?: boolean;
        /**
          * If `false`, card will not have the word "CLOSE" next to close icon
         */
        "hasCloseText"?: boolean;
        /**
          * Headline for notification
         */
        "headline"?: string;
        /**
          * Define level for headline. Font size will remain the same regardless of header level.
         */
        "headlineLevel"?: string;
        /**
          * Destination URL for link (optional)
         */
        "href"?: string;
        /**
          * Fires when the component is closed by clicking on the close icon. This fires only when closeable is true.
         */
        "onCloseEvent"?: (event: VaNotificationCustomEvent<any>) => void;
        /**
          * The event used to track usage of the component.
         */
        "onComponent-library-analytics"?: (event: VaNotificationCustomEvent<any>) => void;
        /**
          * Symbol indicates type of notification Current options are: action-required, update
         */
        "symbol"?: string;
        /**
          * Text for destination link. Set to empty string if you don't want a link.
         */
        "text"?: string;
        /**
          * If `true`, the card will be visible.
         */
        "visible"?: boolean;
    }
    interface VaNumberInput {
        /**
          * Whether this component will be used to accept a currency value.
         */
        "currency"?: boolean;
        /**
          * Emit component-library-analytics events on the blur event.
         */
        "enableAnalytics"?: boolean;
        /**
          * The error message to render.
         */
        "error"?: string;
        /**
          * The content of the heading if `useFormsPattern` and `uswds` are true.
         */
        "formHeading"?: string;
        /**
          * The heading level for the heading if `useFormsPattern` and `uswds` are true.
         */
        "formHeadingLevel"?: number;
        /**
          * Optional hint text.
         */
        "hint"?: string;
        /**
          * The inputmode attribute.
         */
        "inputmode"?: 'decimal' | 'numeric';
        /**
          * The label for the text input.
         */
        "label"?: string;
        /**
          * Maximum number value The max attribute specifies the maximum value for an input element.
         */
        "max"?: number | string;
        /**
          * An optional message that will be read by screen readers when the input is focused.
         */
        "messageAriaDescribedby"?: string;
        /**
          * Minimum number value The min attribute specifies the minimum value for an input element.
         */
        "min"?: number | string;
        /**
          * The name to pass to the input element.
         */
        "name"?: string;
        /**
          * The event used to track usage of the component. This is emitted when the input is blurred and enableAnalytics is true.
         */
        "onComponent-library-analytics"?: (event: VaNumberInputCustomEvent<any>) => void;
        /**
          * Set the input to required and render the (Required) text.
         */
        "required"?: boolean;
        /**
          * Enabling this will add a heading and description for integrating into the forms pattern. Accepts `single` or `multiple` to indicate if the form is a single input or will have multiple inputs. `uswds` should be true.
         */
        "useFormsPattern"?: string;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
        /**
          * The value for the input.
         */
        "value"?: string;
        /**
          * Displays the input at a specific width. Accepts 2xs (4ex), xs (7ex), sm or small (10ex), md or medium (20ex), lg (30ex), xl (40ex), and 2xl (50ex).
         */
        "width"?: string;
    }
    interface VaOfficialGovBanner {
        /**
          * If `true`, the component-library-analytics event is disabled.
         */
        "disableAnalytics"?: boolean;
        /**
          * The event used to track usage of the component.
         */
        "onComponent-library-analytics"?: (event: VaOfficialGovBannerCustomEvent<any>) => void;
        /**
          * Accepts a top level domain (TLD) value of either `gov` or `mil`. Default is `gov`.
         */
        "tld"?: string;
    }
    interface VaOmbInfo {
        /**
          * The name of the benefit displayed in the Respondent Burden section of the Privacy Act Statement.
         */
        "benefitType"?: string;
        /**
          * The form expiration date.
         */
        "expDate": string;
        /**
          * The OMB control number or form number.
         */
        "ombNumber"?: string;
        /**
          * Displays the Respondent Burden section in the Privacy Act Statement modal and how many minutes the form is expected to take.
         */
        "resBurden"?: number;
    }
    interface VaOnThisPage {
        /**
          * If true, analytics event will not be fired
         */
        "disableAnalytics"?: boolean;
        /**
          * The event used to track usage of the component. This is emitted when the user clicks on a link and enableAnalytics is true.
         */
        "onComponent-library-analytics"?: (event: VaOnThisPageCustomEvent<any>) => void;
    }
    interface VaPagination {
        /**
          * Aria-label suffix text for buttons
         */
        "ariaLabelSuffix"?: string;
        /**
          * Whether or not an analytics event will be fired
         */
        "enableAnalytics"?: boolean;
        /**
          * The maximum number of pages to show at once
         */
        "maxPageListLength"?: number;
        /**
          * The event used to track usage of the component. Fires when a a page is selected if enable-analytics is true.
         */
        "onComponent-library-analytics"?: (event: VaPaginationCustomEvent<any>) => void;
        /**
          * Fires when a page is selected
         */
        "onPageSelect"?: (event: VaPaginationCustomEvent<any>) => void;
        /**
          * The current page number
         */
        "page"?: number;
        /**
          * The total number of pages
         */
        "pages"?: number;
        /**
          * Display last page number when the page count exceeds `maxPageListLength`
         */
        "showLastPage"?: boolean;
        /**
          * Don't show last page when the page count exceeds `maxPageListLength` (but do show the ellipsis). Only relevant if uswds is true.
         */
        "unbounded"?: boolean;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
    }
    interface VaPrivacyAgreement {
        /**
          * Whether the checkbox is checked or not.
         */
        "checked"?: boolean;
        /**
          * Emit component-library-analytics events on the blur event.
         */
        "enableAnalytics"?: boolean;
        /**
          * The event used to track usage of the component. This is emitted when the checked value changes and enableAnalytics is true.
         */
        "onComponent-library-analytics"?: (event: VaPrivacyAgreementCustomEvent<any>) => void;
        /**
          * The event emitted when the checkbox changes.
         */
        "onVaChange"?: (event: VaPrivacyAgreementCustomEvent<any>) => void;
        /**
          * Whether to display the error message or not.
         */
        "showError"?: boolean;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
    }
    interface VaProcessList {
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
    }
    interface VaProcessListItem {
        /**
          * Whether or not the item is active
         */
        "active"?: boolean;
        /**
          * Whether or not the item should display the checkmark icon
         */
        "checkmark"?: boolean;
        /**
          * The process list item header text
         */
        "header"?: string;
        /**
          * Header level for item header. Must be between 1 and 6
         */
        "level"?: number;
        /**
          * Whether or not the item is pending
         */
        "pending"?: boolean;
    }
    interface VaProgressBar {
        /**
          * Whether or not an analytics event will be fired.
         */
        "enableAnalytics"?: boolean;
        /**
          * The text label for the progress bar.
         */
        "label"?: string;
        /**
          * The event used to track usage of the component. This is emitted when percent is 0 or 100 and enableAnalytics is true.
         */
        "onComponent-library-analytics"?: (event: VaProgressBarCustomEvent<any>) => void;
        /**
          * Percent of progress made. 0 to 100.
         */
        "percent": number;
    }
    interface VaPromoBanner {
        /**
          * Analytics tracking function(s) will not be called
         */
        "disableAnalytics"?: boolean;
        /**
          * `href` attribute for the anchor tag.
         */
        "href"?: string;
        /**
          * Fires when the component is closed by clicking on the close icon.
         */
        "onCloseEvent"?: (event: VaPromoBannerCustomEvent<any>) => void;
        /**
          * The event used to track usage of the component. This is emitted when an anchor link or the dismiss icon is clicked and disableAnalytics is not true.
         */
        "onComponent-library-analytics"?: (event: VaPromoBannerCustomEvent<any>) => void;
        /**
          * Controls which icon gets used. Options are 'announcement', 'news', or 'email-signup'.
         */
        "type"?: 'announcement' | 'news' | 'email-signup';
    }
    interface VaRadio {
        /**
          * Whether or not an analytics event will be fired.
         */
        "enableAnalytics"?: boolean;
        /**
          * A string with an error message.
         */
        "error"?: string;
        /**
          * The content of the heading if `useFormsPattern` and `uswds` are true.
         */
        "formHeading"?: string;
        /**
          * The heading level for the heading if `useFormsPattern` and `uswds` are true.
         */
        "formHeadingLevel"?: number;
        /**
          * An optional message that will be read by screen readers when the header is focused. The label-header-level prop must be set for this to be active.
         */
        "headerAriaDescribedby"?: string;
        /**
          * Optional hint text.
         */
        "hint"?: string;
        /**
          * The text label for the radio group.
         */
        "label": string;
        /**
          * Insert a header with defined level inside the label (legend)
         */
        "labelHeaderLevel"?: string;
        /**
          * The event used to track usage of the component. This is emitted when a radio option is selected and enableAnalytics is true.
         */
        "onComponent-library-analytics"?: (event: VaRadioCustomEvent<any>) => void;
        /**
          * The event emitted when the selected value changes
         */
        "onVaValueChange"?: (event: VaRadioCustomEvent<any>) => void;
        /**
          * Whether or not this input field is required.
         */
        "required"?: boolean;
        /**
          * Enabling this will add a heading and description for integrating into the forms pattern. Accepts `single` or `multiple` to indicate if the form is a single input or will have multiple inputs. `uswds` should be true.
         */
        "useFormsPattern"?: string;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
    }
    interface VaRadioOption {
        /**
          * Optional string for the ariaDescribedBy attribute.
         */
        "ariaDescribedby"?: string;
        /**
          * Whether or not the option is selected.
         */
        "checked"?: boolean;
        /**
          * Description of the option displayed below the option label. Available when uswds is true.
         */
        "description"?: string;
        /**
          * Whether or not the radio option is disabled. Can be used if the USWDS option is active.
         */
        "disabled"?: boolean;
        /**
          * The text label for the input element.
         */
        "label": string;
        /**
          * The name attribute for the input element.
         */
        "name": string;
        /**
          * The event emitted when the selected option value changes
         */
        "onRadioOptionSelected"?: (event: VaRadioOptionCustomEvent<any>) => void;
        /**
          * Whether or not the component will display as a tile. Available when uswds is true.
         */
        "tile"?: boolean;
        /**
          * Whether or not the component will use USWDS v3. styling.
         */
        "uswds"?: boolean;
        /**
          * The value attribute for the input element.
         */
        "value": string;
    }
    interface VaSearchInput {
        /**
          * If `true`, the component will use the big variant. Only available when `uswds` is `true`.
         */
        "big"?: boolean;
        /**
          * Text displayed inside the search button
         */
        "buttonText"?: string;
        /**
          * The aria-label for search input and button. Default is 'Search'.
         */
        "label"?: string;
        /**
          * The event used to track usage of the component. This is emitted when the search button is clicked and when blur occurs on the input field.
         */
        "onComponent-library-analytics"?: (event: VaSearchInputCustomEvent<any>) => void;
        /**
          * If `true`, the component will use the small variant. Only available when `uswds` is `true`.
         */
        "small"?: boolean;
        /**
          * An array of strings containing suggestions to be displayed in listbox. This component displays up to 5 suggestions.
         */
        "suggestions"?: any;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
        /**
          * The value of the input field
         */
        "value"?: string;
    }
    interface VaSegmentedProgressBar {
        /**
          * Whether or not to center the step labels (v3 only)
         */
        "centeredLabels"?: boolean;
        /**
          * Show number counters for each step (v3 only)
         */
        "counters"?: "default" | "small";
        /**
          * The current segment in progress
         */
        "current": number;
        /**
          * Whether or not an analytics event will be fired.
         */
        "enableAnalytics"?: boolean;
        /**
          * Header level for button wrapper. Must be between 1 and 6 (v3 only)
         */
        "headerLevel"?: number;
        /**
          * Text of current step (v3 only)
         */
        "headingText"?: string;
        /**
          * An override for the default aria label.
         */
        "label"?: string;
        /**
          * String containing a list of step labels delimited by a semi-colon (v3 only) Example: `"Step 1;Step 2;Step 3"`
         */
        "labels"?: string;
        /**
          * The event used to track usage of the component. This is emitted when the component renders and enableAnalytics is true.
         */
        "onComponent-library-analytics"?: (event: VaSegmentedProgressBarCustomEvent<any>) => void;
        /**
          * The term used to indicate the current progress for the heading "[progressTerm] 2 of 5". (Screen reader only)
         */
        "progressTerm"?: string;
        /**
          * The total number of segments in the progress bar
         */
        "total": number;
        /**
          * When true, this makes the segmented-progress-bar use a div instead of a heading (v3 only)
         */
        "useDiv"?: boolean;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
    }
    interface VaSelect {
        /**
          * Whether or not to fire the analytics events
         */
        "enableAnalytics"?: boolean;
        /**
          * Error message to display. When defined, this indicates an error.
         */
        "error"?: string;
        /**
          * Optional hint text.
         */
        "hint"?: string;
        /**
          * Whether or not `aria-invalid` will be set on the inner select. Useful when composing the component into something larger, like a date component.
         */
        "invalid"?: boolean;
        /**
          * Text label for the field.
         */
        "label": string;
        /**
          * An optional message that will be read by screen readers when the select is focused.
         */
        "messageAriaDescribedby"?: string;
        /**
          * Name attribute for the select field.
         */
        "name": string;
        /**
          * The event used to track usage of the component. This is emitted when an option is selected and enableAnalytics is true.
         */
        "onComponent-library-analytics"?: (event: VaSelectCustomEvent<any>) => void;
        /**
          * The event attached to select's onkeydown
         */
        "onVaKeyDown"?: (event: VaSelectCustomEvent<any>) => void;
        /**
          * The event emitted when the selected value changes
         */
        "onVaSelect"?: (event: VaSelectCustomEvent<any>) => void;
        /**
          * Whether or not to add usa-input--error as class if error message is outside of component
         */
        "reflectInputError"?: boolean;
        /**
          * Whether or not this is a required field.
         */
        "required"?: boolean;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
        /**
          * Selected value (will get updated on select).
         */
        "value"?: string;
    }
    interface VaStatementOfTruth {
        /**
          * The error to be applied to the va-check-box element
         */
        "checkboxError"?: string;
        /**
          * The label for the va-checkbox-component
         */
        "checkboxLabel"?: string;
        /**
          * The flag to prefill the checked state of the va-checkbox component
         */
        "checked"?: boolean;
        /**
          * An optional custom header for the component
         */
        "heading"?: string;
        /**
          * The error to be applied to the va-text-input element
         */
        "inputError"?: string;
        /**
          * The label for the va-text-input component
         */
        "inputLabel"?: string;
        /**
          * An optional message that will be read by screen readers when the input in the va-text-input component is focused.
         */
        "inputMessageAriaDescribedby"?: string;
        /**
          * The value to pre-fill the va-text-input element
         */
        "inputValue"?: string;
        /**
          * The event emitted when the checked state of the va-checkbox changes
         */
        "onVaCheckboxChange"?: (event: VaStatementOfTruthCustomEvent<any>) => void;
        /**
          * The event emitted when the user tabs out of the input
         */
        "onVaInputBlur"?: (event: VaStatementOfTruthCustomEvent<any>) => void;
        /**
          * The event emitted when the value of the input changes
         */
        "onVaInputChange"?: (event: VaStatementOfTruthCustomEvent<any>) => void;
    }
    interface VaSummaryBox {
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
    }
    interface VaTable {
        /**
          * Whether the initial sort state will be descending or not.
         */
        "descending"?: boolean;
        /**
          * The zero-based index of the column to sort by (Doesn't work in IE11). Optional.
         */
        "sortColumn"?: number;
        /**
          * Convert to a stacked table when screen size is small True by default, must specify if false if this is unwanted
         */
        "stacked"?: boolean;
        /**
          * The title of the table
         */
        "tableTitle"?: string;
        /**
          * If uswds is true, the type of table
         */
        "tableType"?: 'borderless';
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
    }
    interface VaTableInner {
        /**
          * If uswds is true, the number of columns in the table
         */
        "cols"?: number;
        /**
          * Whether the initial sort state will be descending or not.
         */
        "descending"?: boolean;
        "rows"?: number;
        /**
          * The zero-based index of the column to sort by (Doesn't work in IE11). Optional.
         */
        "sortColumn"?: number;
        /**
          * If true convert to a stacked table when screen size is small
         */
        "stacked"?: boolean;
        /**
          * The title of the table
         */
        "tableTitle"?: string;
        /**
          * If uswds is true, the type of table to be used
         */
        "tableType"?: 'borderless';
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
        /**
          * A live reference to the va-table-rows in the table which are hard to access from this component
         */
        "vaTableRowRefs"?: any;
    }
    interface VaTableRow {
    }
    interface VaTelephone {
        /**
          * Numeric string representing the contact number. Typical length is 3 or 10 digits - SMS short codes will be 5 or 6 digits.
         */
        "contact": string;
        /**
          * Optional numeric string phone number extension
         */
        "extension"?: string;
        /**
          * Indicates if this is a number meant to be called from outside the US. Prepends a "+1" to the formatted number.
         */
        "international"?: boolean;
        /**
          * An optional message that will be read by screen readers when the phone number is focused.
         */
        "messageAriaDescribedby"?: string;
        /**
          * Indicates if the phone number can be clicked or not
         */
        "notClickable"?: boolean;
        /**
          * The event used to track usage of the component. This is emitted when clicking on an anchor link.
         */
        "onComponent-library-analytics"?: (event: VaTelephoneCustomEvent<any>) => void;
        /**
          * Indicates if this is a number meant to be used to text.
         */
        "sms"?: boolean;
        /**
          * Indicates if this is a number meant to be called from a teletypewriter for deaf users.
         */
        "tty"?: boolean;
        /**
          * Optional vanity phone number. Replaces the last 4 digits with the vanity text input
         */
        "vanity"?: string;
    }
    interface VaTextInput {
        /**
          * Allows the browser to automatically complete the input.
         */
        "autocomplete"?: string;
        /**
          * Whether the component should show a character count message. Has no effect without uswds and maxlength being set.
         */
        "charcount"?: boolean;
        /**
          * Whether this component will be used to accept a currency value.
         */
        "currency"?: boolean;
        /**
          * Emit component-library-analytics events on the blur event.
         */
        "enableAnalytics"?: boolean;
        /**
          * The error message to render.
         */
        "error"?: string;
        /**
          * The content of the heading if `useFormsPattern` and `uswds` are true.
         */
        "formHeading"?: string;
        /**
          * The heading level for the heading if `useFormsPattern` and `uswds` are true.
         */
        "formHeadingLevel"?: number;
        /**
          * Optional hint text.
         */
        "hint"?: string;
        /**
          * The inputmode attribute.
         */
        "inputmode"?: | 'decimal'
    | 'email'
    | 'numeric'
    | 'search'
    | 'tel'
    | 'text'
    | 'url';
        /**
          * Whether or not `aria-invalid` will be set on the inner input. Useful when composing the component into something larger, like a date component.
         */
        "invalid"?: boolean;
        /**
          * The label for the text input.
         */
        "label"?: string;
        /**
          * The max attribute specifies the maximum value for an input element if the inputmode is numeric.
         */
        "max"?: number | string;
        /**
          * The maximum number of characters allowed in the input. Negative and zero values will be ignored.
         */
        "maxlength"?: number;
        /**
          * An optional message that will be read by screen readers when the input is focused.
         */
        "messageAriaDescribedby"?: string;
        /**
          * The min attribute specifies the minimum value for an input element if the inputmode is numeric.
         */
        "min"?: number | string;
        /**
          * The minimum number of characters allowed in the input.
         */
        "minlength"?: number;
        /**
          * The name to pass to the input element.
         */
        "name"?: string;
        /**
          * The event used to track usage of the component. This is emitted when the input is blurred and enableAnalytics is true.
         */
        "onComponent-library-analytics"?: (event: VaTextInputCustomEvent<any>) => void;
        /**
          * The regular expression that the input element's value is checked against on submission
         */
        "pattern"?: string;
        /**
          * Whether or not to add usa-input--error as class if error message is outside of component
         */
        "reflectInputError"?: boolean;
        /**
          * Set the input to required and render the (Required) text.
         */
        "required"?: boolean;
        /**
          * Adds styling based on status value
         */
        "success"?: boolean;
        /**
          * The type attribute.
         */
        "type"?: 'email' | 'number' | 'search' | 'tel' | 'text' | 'url';
        /**
          * Enabling this will add a heading and description for integrating into the forms pattern. Accepts `single` or `multiple` to indicate if the form is a single input or will have multiple inputs. `uswds` should be true.
         */
        "useFormsPattern"?: string;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
        /**
          * The value for the input.
         */
        "value"?: string;
        /**
          * Displays the input at a specific width. Accepts 2xs (4ex), xs (7ex), sm or small (10ex), md or medium (20ex), lg (30ex), xl (40ex), and 2xl (50ex).
         */
        "width"?: string;
    }
    interface VaTextarea {
        /**
          * Whether the component should show a character count message. Has no effect without uswds and maxlength being set.
         */
        "charcount"?: boolean;
        /**
          * Emit component-library-analytics events on the blur event.
         */
        "enableAnalytics"?: boolean;
        /**
          * The error message to render.
         */
        "error"?: string;
        /**
          * The content of the heading if `useFormsPattern` and `uswds` are true.
         */
        "formHeading"?: string;
        /**
          * The heading level for the heading if `useFormsPattern` and `uswds` are true.
         */
        "formHeadingLevel"?: number;
        /**
          * Optional hint text.
         */
        "hint"?: string;
        /**
          * The label for the textarea.
         */
        "label"?: string;
        /**
          * The maximum number of characters allowed in the input. Negative and zero values will be ignored.
         */
        "maxlength"?: number;
        /**
          * An optional message that will be read by screen readers when the input is focused.
         */
        "messageAriaDescribedby"?: string;
        /**
          * The name for the input.
         */
        "name"?: string;
        /**
          * The event used to track usage of the component. This is emitted when the textarea is blurred and `enableAnalytics` is true
         */
        "onComponent-library-analytics"?: (event: VaTextareaCustomEvent<any>) => void;
        /**
          * The placeholder string.
         */
        "placeholder"?: string;
        /**
          * Set the input to required and render the (Required) text.
         */
        "required"?: boolean;
        /**
          * Enabling this will add a heading and description for integrating into the forms pattern. Accepts `single` or `multiple` to indicate if the form is a single input or will have multiple inputs. `uswds` should be true.
         */
        "useFormsPattern"?: string;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
        /**
          * The value of the textarea
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "va-accordion": VaAccordion;
        "va-accordion-item": VaAccordionItem;
        "va-additional-info": VaAdditionalInfo;
        "va-alert": VaAlert;
        "va-alert-expandable": VaAlertExpandable;
        "va-back-to-top": VaBackToTop;
        "va-banner": VaBanner;
        "va-breadcrumbs": VaBreadcrumbs;
        "va-button": VaButton;
        "va-button-icon": VaButtonIcon;
        "va-button-pair": VaButtonPair;
        "va-card": VaCard;
        "va-checkbox": VaCheckbox;
        "va-checkbox-group": VaCheckboxGroup;
        "va-crisis-line-modal": VaCrisisLineModal;
        "va-date": VaDate;
        "va-file-input": VaFileInput;
        "va-file-input-multiple": VaFileInputMultiple;
        "va-header-minimal": VaHeaderMinimal;
        "va-icon": VaIcon;
        "va-link": VaLink;
        "va-link-action": VaLinkAction;
        "va-loading-indicator": VaLoadingIndicator;
        "va-maintenance-banner": VaMaintenanceBanner;
        "va-memorable-date": VaMemorableDate;
        "va-minimal-footer": VaMinimalFooter;
        "va-modal": VaModal;
        "va-need-help": VaNeedHelp;
        "va-notification": VaNotification;
        "va-number-input": VaNumberInput;
        "va-official-gov-banner": VaOfficialGovBanner;
        "va-omb-info": VaOmbInfo;
        "va-on-this-page": VaOnThisPage;
        "va-pagination": VaPagination;
        "va-privacy-agreement": VaPrivacyAgreement;
        "va-process-list": VaProcessList;
        "va-process-list-item": VaProcessListItem;
        "va-progress-bar": VaProgressBar;
        "va-promo-banner": VaPromoBanner;
        "va-radio": VaRadio;
        "va-radio-option": VaRadioOption;
        "va-search-input": VaSearchInput;
        "va-segmented-progress-bar": VaSegmentedProgressBar;
        "va-select": VaSelect;
        "va-statement-of-truth": VaStatementOfTruth;
        "va-summary-box": VaSummaryBox;
        "va-table": VaTable;
        "va-table-inner": VaTableInner;
        "va-table-row": VaTableRow;
        "va-telephone": VaTelephone;
        "va-text-input": VaTextInput;
        "va-textarea": VaTextarea;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "va-accordion": LocalJSX.VaAccordion & JSXBase.HTMLAttributes<HTMLVaAccordionElement>;
            "va-accordion-item": LocalJSX.VaAccordionItem & JSXBase.HTMLAttributes<HTMLVaAccordionItemElement>;
            "va-additional-info": LocalJSX.VaAdditionalInfo & JSXBase.HTMLAttributes<HTMLVaAdditionalInfoElement>;
            "va-alert": LocalJSX.VaAlert & JSXBase.HTMLAttributes<HTMLVaAlertElement>;
            "va-alert-expandable": LocalJSX.VaAlertExpandable & JSXBase.HTMLAttributes<HTMLVaAlertExpandableElement>;
            "va-back-to-top": LocalJSX.VaBackToTop & JSXBase.HTMLAttributes<HTMLVaBackToTopElement>;
            "va-banner": LocalJSX.VaBanner & JSXBase.HTMLAttributes<HTMLVaBannerElement>;
            "va-breadcrumbs": LocalJSX.VaBreadcrumbs & JSXBase.HTMLAttributes<HTMLVaBreadcrumbsElement>;
            "va-button": LocalJSX.VaButton & JSXBase.HTMLAttributes<HTMLVaButtonElement>;
            "va-button-icon": LocalJSX.VaButtonIcon & JSXBase.HTMLAttributes<HTMLVaButtonIconElement>;
            "va-button-pair": LocalJSX.VaButtonPair & JSXBase.HTMLAttributes<HTMLVaButtonPairElement>;
            "va-card": LocalJSX.VaCard & JSXBase.HTMLAttributes<HTMLVaCardElement>;
            "va-checkbox": LocalJSX.VaCheckbox & JSXBase.HTMLAttributes<HTMLVaCheckboxElement>;
            "va-checkbox-group": LocalJSX.VaCheckboxGroup & JSXBase.HTMLAttributes<HTMLVaCheckboxGroupElement>;
            "va-crisis-line-modal": LocalJSX.VaCrisisLineModal & JSXBase.HTMLAttributes<HTMLVaCrisisLineModalElement>;
            "va-date": LocalJSX.VaDate & JSXBase.HTMLAttributes<HTMLVaDateElement>;
            "va-file-input": LocalJSX.VaFileInput & JSXBase.HTMLAttributes<HTMLVaFileInputElement>;
            "va-file-input-multiple": LocalJSX.VaFileInputMultiple & JSXBase.HTMLAttributes<HTMLVaFileInputMultipleElement>;
            "va-header-minimal": LocalJSX.VaHeaderMinimal & JSXBase.HTMLAttributes<HTMLVaHeaderMinimalElement>;
            "va-icon": LocalJSX.VaIcon & JSXBase.HTMLAttributes<HTMLVaIconElement>;
            "va-link": LocalJSX.VaLink & JSXBase.HTMLAttributes<HTMLVaLinkElement>;
            "va-link-action": LocalJSX.VaLinkAction & JSXBase.HTMLAttributes<HTMLVaLinkActionElement>;
            "va-loading-indicator": LocalJSX.VaLoadingIndicator & JSXBase.HTMLAttributes<HTMLVaLoadingIndicatorElement>;
            "va-maintenance-banner": LocalJSX.VaMaintenanceBanner & JSXBase.HTMLAttributes<HTMLVaMaintenanceBannerElement>;
            "va-memorable-date": LocalJSX.VaMemorableDate & JSXBase.HTMLAttributes<HTMLVaMemorableDateElement>;
            "va-minimal-footer": LocalJSX.VaMinimalFooter & JSXBase.HTMLAttributes<HTMLVaMinimalFooterElement>;
            "va-modal": LocalJSX.VaModal & JSXBase.HTMLAttributes<HTMLVaModalElement>;
            "va-need-help": LocalJSX.VaNeedHelp & JSXBase.HTMLAttributes<HTMLVaNeedHelpElement>;
            "va-notification": LocalJSX.VaNotification & JSXBase.HTMLAttributes<HTMLVaNotificationElement>;
            "va-number-input": LocalJSX.VaNumberInput & JSXBase.HTMLAttributes<HTMLVaNumberInputElement>;
            "va-official-gov-banner": LocalJSX.VaOfficialGovBanner & JSXBase.HTMLAttributes<HTMLVaOfficialGovBannerElement>;
            "va-omb-info": LocalJSX.VaOmbInfo & JSXBase.HTMLAttributes<HTMLVaOmbInfoElement>;
            "va-on-this-page": LocalJSX.VaOnThisPage & JSXBase.HTMLAttributes<HTMLVaOnThisPageElement>;
            "va-pagination": LocalJSX.VaPagination & JSXBase.HTMLAttributes<HTMLVaPaginationElement>;
            "va-privacy-agreement": LocalJSX.VaPrivacyAgreement & JSXBase.HTMLAttributes<HTMLVaPrivacyAgreementElement>;
            "va-process-list": LocalJSX.VaProcessList & JSXBase.HTMLAttributes<HTMLVaProcessListElement>;
            "va-process-list-item": LocalJSX.VaProcessListItem & JSXBase.HTMLAttributes<HTMLVaProcessListItemElement>;
            "va-progress-bar": LocalJSX.VaProgressBar & JSXBase.HTMLAttributes<HTMLVaProgressBarElement>;
            "va-promo-banner": LocalJSX.VaPromoBanner & JSXBase.HTMLAttributes<HTMLVaPromoBannerElement>;
            "va-radio": LocalJSX.VaRadio & JSXBase.HTMLAttributes<HTMLVaRadioElement>;
            "va-radio-option": LocalJSX.VaRadioOption & JSXBase.HTMLAttributes<HTMLVaRadioOptionElement>;
            "va-search-input": LocalJSX.VaSearchInput & JSXBase.HTMLAttributes<HTMLVaSearchInputElement>;
            "va-segmented-progress-bar": LocalJSX.VaSegmentedProgressBar & JSXBase.HTMLAttributes<HTMLVaSegmentedProgressBarElement>;
            "va-select": LocalJSX.VaSelect & JSXBase.HTMLAttributes<HTMLVaSelectElement>;
            "va-statement-of-truth": LocalJSX.VaStatementOfTruth & JSXBase.HTMLAttributes<HTMLVaStatementOfTruthElement>;
            "va-summary-box": LocalJSX.VaSummaryBox & JSXBase.HTMLAttributes<HTMLVaSummaryBoxElement>;
            "va-table": LocalJSX.VaTable & JSXBase.HTMLAttributes<HTMLVaTableElement>;
            "va-table-inner": LocalJSX.VaTableInner & JSXBase.HTMLAttributes<HTMLVaTableInnerElement>;
            "va-table-row": LocalJSX.VaTableRow & JSXBase.HTMLAttributes<HTMLVaTableRowElement>;
            "va-telephone": LocalJSX.VaTelephone & JSXBase.HTMLAttributes<HTMLVaTelephoneElement>;
            "va-text-input": LocalJSX.VaTextInput & JSXBase.HTMLAttributes<HTMLVaTextInputElement>;
            "va-textarea": LocalJSX.VaTextarea & JSXBase.HTMLAttributes<HTMLVaTextareaElement>;
        }
    }
}
