@charset "UTF-8";
/*
 * PORTED: Complete set of Formation styles
 */
/**
  Variables ported over from Formation so that we can keep those stylesheets
  working while we work on deprecation.
**/
/*
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
========================================
========================================
========================================
----------------------------------------
GENERAL SETTINGS
----------------------------------------
Read more about settings and
USWDS style tokens in the documentation:
https://designsystem.digital.gov/design-tokens
----------------------------------------
*/
/*
----------------------------------------
Image path
----------------------------------------
Relative image file path
----------------------------------------
*/
/*
----------------------------------------
Show compile warnings
----------------------------------------
Show Sass warnings when functions and
mixins use non-standard tokens.
AND
Show updates and notifications.
----------------------------------------
*/
/*
----------------------------------------
Namespace
----------------------------------------
*/
/*
----------------------------------------
Prefix separator
----------------------------------------
Set the character the separates
responsive and state prefixes from the
main class name.
The default (":") needs to be preceded
by two backslashes to be properly
escaped.
----------------------------------------
*/
/*
----------------------------------------
Layout grid
----------------------------------------
Should the layout grid classes output
with !important
----------------------------------------
*/
/*
----------------------------------------
Border box sizing
----------------------------------------
When set to true, sets the box-sizing
property of all site elements to
`border-box`.
----------------------------------------
*/
/*
----------------------------------------
Focus styles
----------------------------------------
*/
/*
----------------------------------------
Icons
----------------------------------------
*/
/*
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
========================================
========================================
========================================
----------------------------------------
TYPOGRAPHY SETTINGS
----------------------------------------
Read more about settings and
USWDS typography tokens in the documentation:
https://designsystem.digital.gov/design-tokens/typesetting/overview/
----------------------------------------
*/
/*
----------------------------------------
Root font size
----------------------------------------
Setting $theme-respect-user-font-size to
true sets the root font size to 100% and
uses ems for media queries
----------------------------------------
$theme-root-font-size only applies when
$theme-respect-user-font-size is set to
false.

This will set the root font size
as a specific px value and use px values
for media queries.

Accepts true or false
----------------------------------------
*/
/*
----------------------------------------
Global styles
----------------------------------------
Adds basic styling for the following
unclassed elements:

- paragraph: paragraph text
- link: links
- content: paragraph text, links,
  headings, lists, and tables
----------------------------------------
*/
/*
----------------------------------------
Broswer compatibility mode
----------------------------------------
When true, outputs woff and ttf font 
formats in addition to woff2
----------------------------------------
*/
/*
----------------------------------------
Font path
----------------------------------------
Relative font file path
----------------------------------------
*/
/*
----------------------------------------
Custom typeface tokens
----------------------------------------
Add a new custom typeface token if
your project uses a typeface not already
defined by USWDS.
----------------------------------------
USWDS defines the following tokens
by default:
----------------------------------------
'georgia'
'helvetica'
'merriweather'
'open-sans'
'public-sans'
'roboto-mono'
'source-sans-pro'
'system'
'tahoma'
'verdana'
----------------------------------------
Add as many new tokens as you have
custom typefaces. Reference your new
token(s) in the type-based font settings
using the quoted name of the token.

For example:

$theme-font-type-cond: 'example-font-token';

display-name:
The display name of your font

cap-height:
The height of a 500px `N` in Sketch
----------------------------------------
You should change `example-[style]-token`
names to something more descriptive.
----------------------------------------
*/
/*
----------------------------------------
Type-based font settings
----------------------------------------
Set the type-based tokens for your
project from the following tokens,
or from any new font tokens you added in
$theme-typeface-tokens.
----------------------------------------
'georgia'
'helvetica'
'merriweather'
'open-sans'
'public-sans'
'roboto-mono'
'source-sans-pro'
'system'
'tahoma'
'verdana'
----------------------------------------
*/
/*
----------------------------------------
Custom font stacks
----------------------------------------
Add custom font stacks to any of the
type-based fonts. Any USWDS typeface
token already has a default stack.

Custom stacks don't need to include the
font's display name. It will
automatically appear at the start of
the stack.
----------------------------------------
Example:
$theme-font-type-sans: 'source-sans-pro';
$theme-font-sans-custom-stack: "Helvetica Neue", Helvetica, Arial, sans;

Output:
font-family: "Source Sans Pro", "Helvetica Neue", Helvetica, Arial, sans;
----------------------------------------
*/
/*
----------------------------------------
Add any custom font source files
----------------------------------------
If you want USWDS to generate additional
@font-face declarations, add your font
data below, following the example that
follows.
----------------------------------------
USWDS automatically generates @font-face
declarations for the following

'merriweather'
'public-sans'
'roboto-mono'
'source-sans-pro'

These typefaces not require custom
source files.
----------------------------------------
EXAMPLE

- dir:
  Directory relative to $theme-font-path
- This directory should include fonts saved as
  .woff2
  ExampleSerif-Normal.woff2

$theme-font-serif-custom-src: (
  dir: 'custom/example-serif',
  roman: (
    100: false,
    200: false,
    300: 'ExampleSerif-Light',
    400: 'ExampleSerif-Normal',
    500: false,
    600: false,
    700: 'ExampleSerif-Bold',
    800: false,
    900: false,
  ),
  italic: (
    100: false,
    200: false,
    300: 'ExampleSerif-LightItalic',
    400: 'ExampleSerif-Italic',
    500: false,
    600: false,
    700: 'ExampleSerif-BoldItalic',
    800: false,
    900: false,
  ),
);
----------------------------------------
*/
/*
----------------------------------------
Role-based font settings
----------------------------------------
Set the role-based tokens for your
project from the following font-type
tokens.
----------------------------------------
'cond'
'icon'
'lang'
'mono'
'sans'
'serif'
----------------------------------------
*/
/*
----------------------------------------
Type scale
----------------------------------------
Define your project's type scale using
values from the USWDS system type scale

1-20
----------------------------------------
*/
/*
----------------------------------------
Font weights
----------------------------------------
Assign weights 100-900
Or use `false` for unneeded weights.
----------------------------------------
*/
/*
----------------------------------------
General typography settings
----------------------------------------
Type scale tokens
----------------------------------------
micro:      10px
1:          12px
2:          13px
3:          14px
4:          15px
5:          16px
6:          17px
7:          18px
8:          20px
9:          22px
10:         24px
11:         28px
12:         32px
13:         36px
14:         40px
15:         48px
16:         56px
17:         64px
18:         80px
19:         120px
20:         140px
----------------------------------------
Line height tokens
----------------------------------------
1:    1
2:    1.15
3:    1.35
4:    1.5
5:    1.62
6:    1.75
----------------------------------------
Font role tokens
----------------------------------------
'ui'
'heading'
'body'
'code'
'alt'
----------------------------------------
Measure (max-width) tokens
----------------------------------------
1:       44ex
2:       60ex
3:       64ex
4:       68ex
5:       74ex
6:       88ex
none:    none
----------------------------------------
*/
/*
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
========================================
========================================
========================================
----------------------------------------
COLOR SETTINGS
----------------------------------------
Read more about settings and
USWDS color tokens in the documentation:
https://designsystem.digital.gov/design-tokens/color
----------------------------------------
*/
/*
----------------------------------------
Theme palette colors
----------------------------------------
*/
/*
----------------------------------------
State palette colors
----------------------------------------
*/
/*
----------------------------------------
General colors
----------------------------------------
*/
/*
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
========================================
========================================
========================================
----------------------------------------
COMPONENT SETTINGS
----------------------------------------
Read more about settings and
USWDS style tokens in the documentation:
https://designsystem.digital.gov/design-tokens
----------------------------------------
*/
/*
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
========================================
========================================
========================================
----------------------------------------
SPACING SETTINGS
----------------------------------------
Read more about settings and
USWDS spacing units tokens in the
documentation:
https://designsystem.digital.gov/design-tokens/spacing-units
----------------------------------------
*/
/*
----------------------------------------
Border radius
----------------------------------------
2px           2px
0.5           4px
1             8px
1.5           12px
2             16px
2.5           20px
3             24px
4             32px
5             40px
6             48px
7             56px
8             64px
9             72px
----------------------------------------
*/
/*
----------------------------------------
Column gap
----------------------------------------
2px         2px
0.5         4px
1           8px
2           16px
3           24px
4           32px
5           40px
6           48px
----------------------------------------
*/
/*
----------------------------------------
Grid container max-width
----------------------------------------
mobile
mobile-lg
tablet
tablet-lg
desktop
desktop-lg
widescreen
----------------------------------------
*/
/*
----------------------------------------
Site
----------------------------------------
*/
/*
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
========================================
========================================
========================================
----------------------------------------
UTILITIES SETTINGS
----------------------------------------
Read more about settings and
USWDS utilities in the documentation:
https://designsystem.digital.gov/utilities
----------------------------------------
*/
/*
----------------------------------------
Utility breakpoints
----------------------------------------
Which breakpoints does your project
need? Select as `true` any breakpoint
used by utilities or layout grid
----------------------------------------
*/
/*
----------------------------------------
Global colors
----------------------------------------
The following palettes will be added to
- background-color
- border-color
- color
- text-decoration-color
----------------------------------------
*/
/*
----------------------------------------
Settings
----------------------------------------
*/
/*
----------------------------------------
Values
----------------------------------------
*/
/*
----------------------------------------
color()
----------------------------------------
Derive a color from a color shortcode
----------------------------------------
*/
/*
----------------------------------------
append-important()
----------------------------------------
Append `!important` to a list
----------------------------------------
*/
/*
----------------------------------------
get-last()
----------------------------------------
Return the last item of a list,
Return null if the value is null
----------------------------------------
*/
/*
----------------------------------------
de-list()
----------------------------------------
Transform a one-element list or arglist
into that single element.
----------------------------------------
(1) => 1
((1)) => (1)
----------------------------------------
*/
/*
----------------------------------------
error-not-token()
----------------------------------------
Returns a common not-a-token error.
----------------------------------------
*/
/*
----------------------------------------
uswds-error()
----------------------------------------
Allow the system to pass an error as text
to test error states in unit testing
----------------------------------------
*/
/*
----------------------------------------
get-default()
----------------------------------------
Returns the default value from a map
of project defaults
get-default("bg-color")
> $theme-body-background-color
----------------------------------------
*/
/*
----------------------------------------
has-important()
----------------------------------------
Check to see if `!important` is
being passed in a mixin's props
----------------------------------------
*/
/*
----------------------------------------
map-collect()
----------------------------------------
Collect multiple maps into a single
large map
source: https://gist.github.com/bigglesrocks/d75091700f8f2be5abfe
----------------------------------------
*/
/*
----------------------------------------
map-deep-get()
----------------------------------------
@author Hugo Giraudel
@access public
@param {Map} $map - Map
@param {Arglist} $keys - Key chain
@return {*} - Desired value
----------------------------------------
*/
/*
----------------------------------------
multi-cat()
----------------------------------------
Concatenate two lists
----------------------------------------
*/
/*
----------------------------------------
remove()
----------------------------------------
Remove a value from a list
----------------------------------------
*/
/*
----------------------------------------
smart-quote()
----------------------------------------
Quotes strings
Inspects `px`, `xs`, and `xl` numbers
Leaves bools as is
----------------------------------------
*/
/*
----------------------------------------
str-replace()
----------------------------------------
Replace any substring with another
string
----------------------------------------
*/
/*
----------------------------------------
str-split()
----------------------------------------
Split a string at a given separator
and convert into a list of substrings
----------------------------------------
*/
/*
----------------------------------------
strip-unit()
----------------------------------------
Remove the unit of a length
@author Hugo Giraudel
@param {Number} $number - Number to remove unit from
@return {Number} - Unitless number
----------------------------------------
*/
/*
----------------------------------------
base-to-map()
@TODO: Deprecate and delete
----------------------------------------
Convert a single base to a USWDS
value map.

Candidate for deprecation if we remove
isReadable
----------------------------------------
*/
/*
----------------------------------------
to-number()
----------------------------------------
Casts a string into a number
----------------------------------------
@param {String | Number} $value - Value to be parsed
@return {Number}
----------------------------------------
*/
/*
----------------------------------------
unpack()
----------------------------------------
Create lists of single items from lists
of lists.
----------------------------------------
(1, (2.1, 2.2), 3) -->
(1, 2.1, 2.2, 3)
----------------------------------------
*/
/*
----------------------------------------
color()
----------------------------------------
Derive a color from a color shortcode
----------------------------------------
*/
/*
----------------------------------------
color()
----------------------------------------
Derive a color from a color shortcode
----------------------------------------
*/
/*
----------------------------------------
get-system-color()
----------------------------------------
Derive a system color from its
family, value, and vivid or a passed
variable that is, itself, a list
----------------------------------------
*/
/*
----------------------------------------
color()
----------------------------------------
Derive a color from a color shortcode
----------------------------------------
*/
/*
----------------------------------------
color()
----------------------------------------
Derive a color from a color shortcode
----------------------------------------
*/
/*
----------------------------------------
color()
----------------------------------------
Derive a color from a color shortcode
----------------------------------------
*/
/*
----------------------------------------
set-theme-color()
----------------------------------------
Derive a color from a system color token
or a hex value
----------------------------------------
*/
/*
----------------------------------------
px-to-rem()
----------------------------------------
Converts a value in px to a value in rem
----------------------------------------
*/
/*
----------------------------------------
rem-to-px()
----------------------------------------
Converts a value in rem to a value in px
----------------------------------------
*/
/*
----------------------------------------
rem-to-user-em()
----------------------------------------
Converts a value in rem to a value in
[user-settings] em for use in media
queries
----------------------------------------
*/
/*
----------------------------------------
spacing-multiple()
----------------------------------------
Converts a spacing unit multiple into
the desired final units (currently rem)
----------------------------------------
*/
/*
----------------------------------------
units()
----------------------------------------
Converts a spacing unit into
the desired final units (currently rem)
----------------------------------------
*/
/*
----------------------------------------
number-to-token()
----------------------------------------
Converts an integer or numeric value
into a system value

Ex: 0.5   --> '05'
    -1px  --> 'neg-1px'
----------------------------------------
*/
/*
----------------------------------------
Project fonts
----------------------------------------
Collects font settings in a map for
looping.
----------------------------------------
*/
/*
----------------------------------------
Luminance ranges
----------------------------------------
*/
/*
----------------------------------------
ns()
----------------------------------------
Add a namesspace of $type if that
namespace is set to output
----------------------------------------
*/
/*
----------------------------------------
Line height
----------------------------------------
*/
/*
----------------------------------------
Measure
----------------------------------------
*/
/*
----------------------------------------
cap-height()
----------------------------------------
Get the cap height of a valid typeface
----------------------------------------
*/
/*
----------------------------------------
validate-typeface-token()
----------------------------------------
Check to see if a typeface-token exists.
Throw an error if a passed token does
not exist in the typeface-token map.
----------------------------------------
*/
/*
----------------------------------------
convert-to-font-type()
----------------------------------------
Converts a font-role token into a
font-type token. Leaves font-type tokens
unchanged.
----------------------------------------
*/
/*
----------------------------------------
font-sources()
----------------------------------------
Outputs a list of font sources used in
a @font-face declaration.

$theme-font-browser-compatibility: true - output woff2, woff, ttf
$theme-font-browser-compatibility: false - output woff2

@param stem: string - [font path]/[custom-src.dir]/[custom-src.[style].[weight]]
@output: string

filetypes must be one of the filetypes set in variables/$project-font-face-filetypes (woff, woff2, ttf)
----------------------------------------
*/
/*
----------------------------------------
get-font-stack()
----------------------------------------
Get a font stack from a style- or
role-based font token.
----------------------------------------
*/
/*
----------------------------------------
get-typeface-token()
----------------------------------------
Get a typeface token from a font-type or
font-role token.
----------------------------------------
*/
/*
----------------------------------------
normalize-type-scale()
----------------------------------------
Normalizes a specific face's optical size
to a set target
----------------------------------------
*/
/*
----------------------------------------
system-type-scale()
----------------------------------------
Get a value from the system type scale
----------------------------------------
*/
/*
----------------------------------------
Easing
----------------------------------------
*/
/*  deprecated.scss
    ---
    Occasionally the design system will deprecate
    old variables or functionality. If we replace
    the old functionality with something new, this is a
    place to connect the old functionality to the
    new functionality, in the service of better
    continuity and backwards compatibility within a
    major release cycle.

    Note the USWDS version where we deprecated the
    old functionality in a comment.

    Be sure to update notifications.scss.

    This file should started fresh at each
    major version.
*/
/*
----------------------------------------
advanced-color()
----------------------------------------
Derive a color from a color triplet:
[family], [grade], [variant]
----------------------------------------
*/
/*
----------------------------------------
calculate-grade()
----------------------------------------
Derive the grade equivalent any color,
even non-token colors
----------------------------------------
*/
/*
----------------------------------------
color-token-assignment()
----------------------------------------
Get the system token equivalent of any
theme color token
----------------------------------------
*/
/*
----------------------------------------
is-system-color-token()
----------------------------------------
Return whether a token is a system
color token
----------------------------------------
*/
/*
----------------------------------------
is-theme-color-token()
----------------------------------------
Return whether a token is a theme
color token
----------------------------------------
*/
/*
----------------------------------------
color-token-family()
----------------------------------------
Returns the family of a color token.
Returns: color-family
color-token-family("accent-warm-vivid")
> "accent-warm"
color-token-family("red-50v")
> "red"
color-token-variant(("red", 50, "vivid"))
> "red"
----------------------------------------
*/
/*
----------------------------------------
decompose()
----------------------------------------
Convert a color token into into a list
of form [family], [grade], [variant]
Vivid variants return "vivid" as the
variant.
If neither grade nor variant exists,
returns 'null'
----------------------------------------
*/
/*
----------------------------------------
color-token-family()
----------------------------------------
Returns the family of a color token.
Returns: color-family
color-token-family("accent-warm-vivid")
> "accent-warm"
color-token-family("red-50v")
> "red"
color-token-variant(("red", 50, "vivid"))
> "red"
----------------------------------------
*/
/*
----------------------------------------
color-token-grade()
----------------------------------------
Returns the grade of a USWDS color token.
Returns: color-grade
color-token-grade("accent-warm")
> "root"
color-token-grade("accent-warm-vivid")
> "root"
color-token-grade("accent-warm-darker")
> "darker"
color-token-grade("red-50v")
> 50
color-token-variant(("red", 50, "vivid"))
> 50
----------------------------------------
*/
/*
----------------------------------------
color-token-family()
----------------------------------------
Returns the family of a color token.
Returns: color-family
color-token-family("accent-warm-vivid")
> "accent-warm"
color-token-family("red-50v")
> "red"
color-token-variant(("red", 50, "vivid"))
> "red"
----------------------------------------
*/
/*
----------------------------------------
is-color-token()
----------------------------------------
Returns whether a given string is a
USWDS color token.
----------------------------------------
*/
/*
----------------------------------------
pow()
----------------------------------------
Raises a unitless number to the power
of another unitless number
Includes helper functions
----------------------------------------
*/
/*
----------------------------------------
Helper functions
----------------------------------------
*/
/* factorial()
----------------------------------------
*/
/* summation()
----------------------------------------
*/
/* exp-maclaurin()
----------------------------------------
*/
/* ln()
----------------------------------------
*/
/*
----------------------------------------
color-token-type()
----------------------------------------
Returns the type of a color token.
Returns: "system" | "theme"
----------------------------------------
*/
/*
----------------------------------------
color-token-variant()
----------------------------------------
Returns the variant of color token.
Returns: "vivid" | false
color-token-variant("accent-warm")
> false
color-token-variant("accent-warm-vivid")
> "vivid"
color-token-variant("red-50v")
> "vivid"
color-token-variant(("red", 50, "vivid"))
> "vivid"
----------------------------------------
*/
/*
----------------------------------------
magic-number()
----------------------------------------
Returns the magic number of two color
grades. Takes numbers or color tokens.
magic-number(50, 10)
return: 40
magic-number("red-50", "red-10")
return: 40
----------------------------------------
*/
/*
----------------------------------------
is-accessible-magic-number()
----------------------------------------
Returns whether two grades achieve
specified target color contrast
Returns: true | false
is-accessible-magic-number(10, 50, "AA")
> false
is-accessible-magic-number(10, 60, "AA")
> true
----------------------------------------
*/
/*
----------------------------------------
wcag-magic-number()
----------------------------------------
Returns the magic number of a specific
wcag grade:
"AA"
"AA-Large"
"AAA"
wcag-magic-number("AA")
> 50
----------------------------------------
*/
/*
----------------------------------------
get-link-tokens-from-bg()
----------------------------------------
Get accessible link colors for a given
background color
returns: link-token, hover-token
get-link-tokens-from-bg(
  "black",
  "red-60",
  "red-10",
  "AA")
> "red-10", "red-5"
get-link-tokens-from-bg(
  "black",
  "red-60v",
  "red-10v",
  "AA-large")
> "red-60v", "red-50v"
get-link-tokens-from-bg(
  "black",
  "red-5v",
  "red-60v",
  "AA")
> "red-5v", "white"
get-link-tokens-from-bg(
  "black",
  "white",
  "red-60v",
  "AA")
> "white", "white"
----------------------------------------
*/
/*
----------------------------------------
next-token()
----------------------------------------
Returns next "darker" or "lighter" color
token of the same token type and variant.
Returns: color-token | false
next-token("accent-warm", "lighter")
> "accent-warm-light"
next-token("gray-10", "lighter")
> "gray-5"
next-token("gray-5", "lighter")
> "white"
next-token("white", "lighter")
> false
next-token("red-50v", "darker")
> "red-60v"
next-token("red-50", "darker")
> "red-60"
next-token("red-80v", "darker")
> "red-90"
next-token("red-90", "darker")
> "black"
next-token("white", "darker")
> "gray-5"
next-token("black", "lighter")
> "gray-90"
----------------------------------------
*/
/*
----------------------------------------
test-colors()
----------------------------------------
Check to see if all system colors
fall between the proper relative
luminance range for their grade.
Has a couple quirks, as the luminance()
function returns slightly different
results than expected.
----------------------------------------
*/
/*
----------------------------------------
columns()
----------------------------------------
outputs a grid-col number based on
the number of desired columns in the
12-column grid

Ex: columns(2) --> 6
    grid-col(columns(2))
----------------------------------------
*/
/*
----------------------------------------
USWDS Properties
----------------------------------------
*/
/*
----------------------------------------
get-uswds-value()
----------------------------------------
Finds and outputs a value from the
USWDS standard values.

Used to build other standard utility
functions and mixins.
----------------------------------------
*/
/*
----------------------------------------
get-standard-values()
----------------------------------------
Gets a map of USWDS standard values
for a property
----------------------------------------
*/
/*
----------------------------------------
border-radius()
----------------------------------------
Get a border-radius from the system
border-radii
----------------------------------------
*/
/*
----------------------------------------
font-weight()
fw()
----------------------------------------
Get a font-weight value from the
system font-weight
----------------------------------------
*/
/*
----------------------------------------
feature()
----------------------------------------
Gets a valid USWDS font feature setting
----------------------------------------
*/
/*
----------------------------------------
flex()
----------------------------------------
Gets a valid USWDS flex value
----------------------------------------
*/
/*
----------------------------------------
font-family()
family()
----------------------------------------
Get a font-family stack from a
role-based or type-based font family
----------------------------------------
*/
/*
----------------------------------------
letter-spacing()
ls()
----------------------------------------
Get a letter-spacing value from the
system letter-spacing
----------------------------------------
*/
/*
----------------------------------------
measure()
----------------------------------------
Gets a valid USWDS reading line length
----------------------------------------
*/
/*
----------------------------------------
opacity()
----------------------------------------
Get an opacity from the system
opacities
----------------------------------------
*/
/*
----------------------------------------
order()
----------------------------------------
Get an order value from the
system orders
----------------------------------------
*/
/*
----------------------------------------
radius()
----------------------------------------
Get a border-radius value from the
system letter-spacing
----------------------------------------
*/
/*
----------------------------------------
font-size()
----------------------------------------
Get type scale value from a [family] and
[scale]
----------------------------------------
*/
/*
----------------------------------------
z-index()
z()
----------------------------------------
Get a z-index value from the
system z-index
----------------------------------------
*/
/*
----------------------------------------
utility-font()
----------------------------------------
Get a normalized font-size in rem from
a family and a type size in either
system scale or project scale
----------------------------------------
Not the public-facing function.
Used for building the utilities and
withholds certain errors.
----------------------------------------
*/
/*
----------------------------------------
family()
----------------------------------------
Get a font-family stack
----------------------------------------
*/
/*
----------------------------------------
size()
----------------------------------------
Get a normalized font-size in rem from
a family and a type size in either
system scale or project scale
----------------------------------------
*/
/*
----------------------------------------
font()
----------------------------------------
Get a font-family stack
AND
Get a normalized font-size in rem from
a family and a type size in either
system scale or project scale
----------------------------------------
*/
/*
----------------------------------------
typeset()
----------------------------------------
Sets:
- family
- size
- line-height
----------------------------------------
*/
/* stylelint-disable max-nesting-depth */
/*
----------------------------------------
@render-pseudoclass
----------------------------------------
Build a pseucoclass utiliy from values
calculated in the @render-utilities-in
loop
----------------------------------------
*/
/*
----------------------------------------
@render-utility
----------------------------------------
Build a utility from values calculated
in the @render-utilities-in loop
----------------------------------------
TODO: Determine the proper use of
unquote() in the following. Changed to
account for a 'interpolation near
operators will be simplified in a
future version of Sass' warning.
----------------------------------------
*/
/*
----------------------------------------
@render-utilities-in
----------------------------------------
The master loop that sets the building
blocks of utilities from the values
in individual rule settings and loops
through all possible variants
----------------------------------------
*/
/* stylelint-enable */
/*  notifications.scss
    ---
    Adds a notification at the top of each USWDS
    compile. Use this file for important notifications
    and updates to the design system.

    This file should started fresh at each
    major version.

*/
/* prettier-ignore */
/* prettier-ignore */
/**
  /uswds/dist/scss/lib/addons/_margin.scss
**/
/**
  uswds/src/stylesheets/lib/helpers/_directional-values.scss
**/
/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in iOS.
 */
html {
  line-height: 1.15; /* 1 */
  -webkit-text-size-adjust: 100%; /* 2 */
}

/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers.
 */
body {
  margin: 0;
}

/**
 * Render the `main` element consistently in IE.
 */
main {
  display: block;
}

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/* Grouping content
   ========================================================================== */
/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  box-sizing: content-box; /* 1 */
  height: 0; /* 1 */
  overflow: visible; /* 2 */
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
}

/* Text-level semantics
   ========================================================================== */
/**
 * Remove the gray background on active links in IE 10.
 */
a {
  background-color: transparent;
}

/**
 * 1. Remove the bottom border in Chrome 57-
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none; /* 1 */
  text-decoration: underline; /* 2 */
  text-decoration: underline dotted; /* 2 */
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
samp {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
}

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
   ========================================================================== */
/**
 * Remove the border on images inside links in IE 10.
 */
img {
  border-style: none;
}

/* Forms
   ========================================================================== */
/**
 * 1. Change the font styles in all browsers.
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  font-family: inherit; /* 1 */
  font-size: 100%; /* 1 */
  line-height: 1.15; /* 1 */
  margin: 0; /* 2 */
}

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input {
  /* 1 */
  overflow: visible;
}

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none;
}

/**
 * Correct the inability to style clickable types in iOS and Safari.
 */
button,
[type=button],
[type=reset],
[type=submit] {
  -webkit-appearance: button;
}

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type=button]::-moz-focus-inner,
[type=reset]::-moz-focus-inner,
[type=submit]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type=button]:-moz-focusring,
[type=reset]:-moz-focusring,
[type=submit]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
 * Correct the padding in Firefox.
 */
fieldset {
  padding: 0.35em 0.75em 0.625em;
}

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  box-sizing: border-box; /* 1 */
  color: inherit; /* 2 */
  display: table; /* 1 */
  max-width: 100%; /* 1 */
  padding: 0; /* 3 */
  white-space: normal; /* 1 */
}

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  vertical-align: baseline;
}

/**
 * Remove the default vertical scrollbar in IE 10+.
 */
textarea {
  overflow: auto;
}

/**
 * 1. Add the correct box sizing in IE 10.
 * 2. Remove the padding in IE 10.
 */
[type=checkbox],
[type=radio] {
  box-sizing: border-box; /* 1 */
  padding: 0; /* 2 */
}

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type=number]::-webkit-inner-spin-button,
[type=number]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type=search] {
  -webkit-appearance: textfield; /* 1 */
  outline-offset: -2px; /* 2 */
}

/**
 * Remove the inner padding in Chrome and Safari on macOS.
 */
[type=search]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button; /* 1 */
  font: inherit; /* 2 */
}

/* Interactive
   ========================================================================== */
/*
 * Add the correct display in Edge, IE 10+, and Firefox.
 */
details {
  display: block;
}

/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item;
}

/* Misc
   ========================================================================== */
/**
 * Add the correct display in IE 10+.
 */
template {
  display: none;
}

/**
 * Add the correct display in IE 10.
 */
[hidden] {
  display: none;
}

/**
  Variables ported over from Formation so that we can keep those stylesheets
  working while we work on deprecation.
**/
/*
  Original: @import "~uswds/src/stylesheets/core/fonts";
  ***THIS IS USWDS v1***
*/
/* stylelint-disable at-rule-empty-line-before */
@font-face {
  font-family: "Source Sans Pro";
  font-style: normal;
  font-weight: 300;
  src: url("./fonts/sourcesanspro-light-webfont.eot?#iefix") format("embedded-opentype"), url("./fonts/sourcesanspro-light-webfont.woff2") format("woff2"), url("./fonts/sourcesanspro-light-webfont.woff") format("woff"), url("./fonts/sourcesanspro-light-webfont.ttf") format("truetype"), url("./fonts/sourcesanspro-light-webfont.svg#Source Sans Pro") format("svg");
}
@font-face {
  font-family: "Source Sans Pro";
  font-style: normal;
  font-weight: 400;
  src: url("./fonts/sourcesanspro-regular-webfont.eot?#iefix") format("embedded-opentype"), url("./fonts/sourcesanspro-regular-webfont.woff2") format("woff2"), url("./fonts/sourcesanspro-regular-webfont.woff") format("woff"), url("./fonts/sourcesanspro-regular-webfont.ttf") format("truetype"), url("./fonts/sourcesanspro-regular-webfont.svg#Source Sans Pro") format("svg");
}
@font-face {
  font-family: "Source Sans Pro";
  font-style: italic;
  font-weight: 400;
  src: url("./fonts/sourcesanspro-italic-webfont.eot?#iefix") format("embedded-opentype"), url("./fonts/sourcesanspro-italic-webfont.woff2") format("woff2"), url("./fonts/sourcesanspro-italic-webfont.woff") format("woff"), url("./fonts/sourcesanspro-italic-webfont.ttf") format("truetype"), url("./fonts/sourcesanspro-italic-webfont.svg#Source Sans Pro") format("svg");
}
@font-face {
  font-family: "Source Sans Pro";
  font-style: normal;
  font-weight: 700;
  src: url("./fonts/sourcesanspro-bold-webfont.eot?#iefix") format("embedded-opentype"), url("./fonts/sourcesanspro-bold-webfont.woff2") format("woff2"), url("./fonts/sourcesanspro-bold-webfont.woff") format("woff"), url("./fonts/sourcesanspro-bold-webfont.ttf") format("truetype"), url("./fonts/sourcesanspro-bold-webfont.svg#Source Sans Pro") format("svg");
}
@font-face {
  font-family: "Merriweather";
  font-style: normal;
  font-weight: 300;
  src: url("./fonts/merriweather-light-webfont.eot?#iefix") format("embedded-opentype"), url("./fonts/merriweather-light-webfont.woff2") format("woff2"), url("./fonts/merriweather-light-webfont.woff") format("woff"), url("./fonts/merriweather-light-webfont.ttf") format("truetype"), url("./fonts/merriweather-light-webfont.svg#Merriweather") format("svg");
}
@font-face {
  font-family: "Merriweather";
  font-style: normal;
  font-weight: 400;
  src: url("./fonts/merriweather-regular-webfont.eot?#iefix") format("embedded-opentype"), url("./fonts/merriweather-regular-webfont.woff2") format("woff2"), url("./fonts/merriweather-regular-webfont.woff") format("woff"), url("./fonts/merriweather-regular-webfont.ttf") format("truetype"), url("./fonts/merriweather-regular-webfont.svg#Merriweather") format("svg");
}
@font-face {
  font-family: "Merriweather";
  font-style: italic;
  font-weight: 400;
  src: url("./fonts/merriweather-italic-webfont.eot?#iefix") format("embedded-opentype"), url("./fonts/merriweather-italic-webfont.woff2") format("woff2"), url("./fonts/merriweather-italic-webfont.woff") format("woff"), url("./fonts/merriweather-italic-webfont.ttf") format("truetype"), url("./fonts/merriweather-italic-webfont.svg#Merriweather") format("svg");
}
@font-face {
  font-family: "Merriweather";
  font-style: normal;
  font-weight: 700;
  src: url("./fonts/merriweather-bold-webfont.eot?#iefix") format("embedded-opentype"), url("./fonts/merriweather-bold-webfont.woff2") format("woff2"), url("./fonts/merriweather-bold-webfont.woff") format("woff"), url("./fonts/merriweather-bold-webfont.ttf") format("truetype"), url("./fonts/merriweather-bold-webfont.svg#Merriweather") format("svg");
}
/* stylelint-enable */
/*
  Original: @import "~uswds/src/stylesheets/core/utilities";
  ***THIS IS USWDS v1***
*/
.usa-sr-only {
  position: absolute;
  left: -999em;
}

/*
  ***THIS IS USWDS v1***
  Original import: @import "~uswds/src/stylesheets/core/base";
*/
html {
  box-sizing: border-box;
}

*,
*::before,
*::after {
  box-sizing: inherit;
}

body {
  background-color: #ffffff;
  color: #1b1b1b;
  overflow-x: hidden;
}

.lt-ie9 * {
  filter: none !important; /* stylelint-disable-line declaration-no-important */
}

[hidden] {
  display: none !important; /* stylelint-disable-line declaration-no-important */
}

input:not([disabled]):focus,
select:not([disabled]):focus,
textarea:not([disabled]):focus,
button:not([disabled]):focus {
  outline: 2px dotted #aeb0b5;
  outline-offset: 3px;
}

iframe:focus,
[href]:focus,
[tabindex]:focus,
[contentEditable=true]:focus {
  outline: 2px dotted #aeb0b5;
  outline-offset: 3px;
}

.usa-focus {
  outline: 2px dotted #aeb0b5;
  outline-offset: 3px;
}

/*
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
========================================
========================================
========================================
----------------------------------------
GENERAL SETTINGS
----------------------------------------
Read more about settings and
USWDS style tokens in the documentation:
https://designsystem.digital.gov/design-tokens
----------------------------------------
*/
/*
----------------------------------------
Image path
----------------------------------------
Relative image file path
----------------------------------------
*/
/*
----------------------------------------
Show compile warnings
----------------------------------------
Show Sass warnings when functions and
mixins use non-standard tokens.
AND
Show updates and notifications.
----------------------------------------
*/
/*
----------------------------------------
Namespace
----------------------------------------
*/
/*
----------------------------------------
Prefix separator
----------------------------------------
Set the character the separates
responsive and state prefixes from the
main class name.
The default (":") needs to be preceded
by two backslashes to be properly
escaped.
----------------------------------------
*/
/*
----------------------------------------
Layout grid
----------------------------------------
Should the layout grid classes output
with !important
----------------------------------------
*/
/*
----------------------------------------
Border box sizing
----------------------------------------
When set to true, sets the box-sizing
property of all site elements to
`border-box`.
----------------------------------------
*/
/*
----------------------------------------
Focus styles
----------------------------------------
*/
/*
----------------------------------------
Icons
----------------------------------------
*/
/*
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
========================================
========================================
========================================
----------------------------------------
TYPOGRAPHY SETTINGS
----------------------------------------
Read more about settings and
USWDS typography tokens in the documentation:
https://designsystem.digital.gov/design-tokens/typesetting/overview/
----------------------------------------
*/
/*
----------------------------------------
Root font size
----------------------------------------
Setting $theme-respect-user-font-size to
true sets the root font size to 100% and
uses ems for media queries
----------------------------------------
$theme-root-font-size only applies when
$theme-respect-user-font-size is set to
false.

This will set the root font size
as a specific px value and use px values
for media queries.

Accepts true or false
----------------------------------------
*/
/*
----------------------------------------
Global styles
----------------------------------------
Adds basic styling for the following
unclassed elements:

- paragraph: paragraph text
- link: links
- content: paragraph text, links,
  headings, lists, and tables
----------------------------------------
*/
/*
----------------------------------------
Broswer compatibility mode
----------------------------------------
When true, outputs woff and ttf font 
formats in addition to woff2
----------------------------------------
*/
/*
----------------------------------------
Font path
----------------------------------------
Relative font file path
----------------------------------------
*/
/*
----------------------------------------
Custom typeface tokens
----------------------------------------
Add a new custom typeface token if
your project uses a typeface not already
defined by USWDS.
----------------------------------------
USWDS defines the following tokens
by default:
----------------------------------------
'georgia'
'helvetica'
'merriweather'
'open-sans'
'public-sans'
'roboto-mono'
'source-sans-pro'
'system'
'tahoma'
'verdana'
----------------------------------------
Add as many new tokens as you have
custom typefaces. Reference your new
token(s) in the type-based font settings
using the quoted name of the token.

For example:

$theme-font-type-cond: 'example-font-token';

display-name:
The display name of your font

cap-height:
The height of a 500px `N` in Sketch
----------------------------------------
You should change `example-[style]-token`
names to something more descriptive.
----------------------------------------
*/
/*
----------------------------------------
Type-based font settings
----------------------------------------
Set the type-based tokens for your
project from the following tokens,
or from any new font tokens you added in
$theme-typeface-tokens.
----------------------------------------
'georgia'
'helvetica'
'merriweather'
'open-sans'
'public-sans'
'roboto-mono'
'source-sans-pro'
'system'
'tahoma'
'verdana'
----------------------------------------
*/
/*
----------------------------------------
Custom font stacks
----------------------------------------
Add custom font stacks to any of the
type-based fonts. Any USWDS typeface
token already has a default stack.

Custom stacks don't need to include the
font's display name. It will
automatically appear at the start of
the stack.
----------------------------------------
Example:
$theme-font-type-sans: 'source-sans-pro';
$theme-font-sans-custom-stack: "Helvetica Neue", Helvetica, Arial, sans;

Output:
font-family: "Source Sans Pro", "Helvetica Neue", Helvetica, Arial, sans;
----------------------------------------
*/
/*
----------------------------------------
Add any custom font source files
----------------------------------------
If you want USWDS to generate additional
@font-face declarations, add your font
data below, following the example that
follows.
----------------------------------------
USWDS automatically generates @font-face
declarations for the following

'merriweather'
'public-sans'
'roboto-mono'
'source-sans-pro'

These typefaces not require custom
source files.
----------------------------------------
EXAMPLE

- dir:
  Directory relative to $theme-font-path
- This directory should include fonts saved as
  .woff2
  ExampleSerif-Normal.woff2

$theme-font-serif-custom-src: (
  dir: 'custom/example-serif',
  roman: (
    100: false,
    200: false,
    300: 'ExampleSerif-Light',
    400: 'ExampleSerif-Normal',
    500: false,
    600: false,
    700: 'ExampleSerif-Bold',
    800: false,
    900: false,
  ),
  italic: (
    100: false,
    200: false,
    300: 'ExampleSerif-LightItalic',
    400: 'ExampleSerif-Italic',
    500: false,
    600: false,
    700: 'ExampleSerif-BoldItalic',
    800: false,
    900: false,
  ),
);
----------------------------------------
*/
/*
----------------------------------------
Role-based font settings
----------------------------------------
Set the role-based tokens for your
project from the following font-type
tokens.
----------------------------------------
'cond'
'icon'
'lang'
'mono'
'sans'
'serif'
----------------------------------------
*/
/*
----------------------------------------
Type scale
----------------------------------------
Define your project's type scale using
values from the USWDS system type scale

1-20
----------------------------------------
*/
/*
----------------------------------------
Font weights
----------------------------------------
Assign weights 100-900
Or use `false` for unneeded weights.
----------------------------------------
*/
/*
----------------------------------------
General typography settings
----------------------------------------
Type scale tokens
----------------------------------------
micro:      10px
1:          12px
2:          13px
3:          14px
4:          15px
5:          16px
6:          17px
7:          18px
8:          20px
9:          22px
10:         24px
11:         28px
12:         32px
13:         36px
14:         40px
15:         48px
16:         56px
17:         64px
18:         80px
19:         120px
20:         140px
----------------------------------------
Line height tokens
----------------------------------------
1:    1
2:    1.15
3:    1.35
4:    1.5
5:    1.62
6:    1.75
----------------------------------------
Font role tokens
----------------------------------------
'ui'
'heading'
'body'
'code'
'alt'
----------------------------------------
Measure (max-width) tokens
----------------------------------------
1:       44ex
2:       60ex
3:       64ex
4:       68ex
5:       74ex
6:       88ex
none:    none
----------------------------------------
*/
/*
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
========================================
========================================
========================================
----------------------------------------
COLOR SETTINGS
----------------------------------------
Read more about settings and
USWDS color tokens in the documentation:
https://designsystem.digital.gov/design-tokens/color
----------------------------------------
*/
/*
----------------------------------------
Theme palette colors
----------------------------------------
*/
/*
----------------------------------------
State palette colors
----------------------------------------
*/
/*
----------------------------------------
General colors
----------------------------------------
*/
/*
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
========================================
========================================
========================================
----------------------------------------
COMPONENT SETTINGS
----------------------------------------
Read more about settings and
USWDS style tokens in the documentation:
https://designsystem.digital.gov/design-tokens
----------------------------------------
*/
/*
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
========================================
========================================
========================================
----------------------------------------
SPACING SETTINGS
----------------------------------------
Read more about settings and
USWDS spacing units tokens in the
documentation:
https://designsystem.digital.gov/design-tokens/spacing-units
----------------------------------------
*/
/*
----------------------------------------
Border radius
----------------------------------------
2px           2px
0.5           4px
1             8px
1.5           12px
2             16px
2.5           20px
3             24px
4             32px
5             40px
6             48px
7             56px
8             64px
9             72px
----------------------------------------
*/
/*
----------------------------------------
Column gap
----------------------------------------
2px         2px
0.5         4px
1           8px
2           16px
3           24px
4           32px
5           40px
6           48px
----------------------------------------
*/
/*
----------------------------------------
Grid container max-width
----------------------------------------
mobile
mobile-lg
tablet
tablet-lg
desktop
desktop-lg
widescreen
----------------------------------------
*/
/*
----------------------------------------
Site
----------------------------------------
*/
/*
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
========================================
========================================
========================================
----------------------------------------
UTILITIES SETTINGS
----------------------------------------
Read more about settings and
USWDS utilities in the documentation:
https://designsystem.digital.gov/utilities
----------------------------------------
*/
/*
----------------------------------------
Utility breakpoints
----------------------------------------
Which breakpoints does your project
need? Select as `true` any breakpoint
used by utilities or layout grid
----------------------------------------
*/
/*
----------------------------------------
Global colors
----------------------------------------
The following palettes will be added to
- background-color
- border-color
- color
- text-decoration-color
----------------------------------------
*/
/*
----------------------------------------
Settings
----------------------------------------
*/
/*
----------------------------------------
Values
----------------------------------------
*/
/*
----------------------------------------
color()
----------------------------------------
Derive a color from a color shortcode
----------------------------------------
*/
/*
----------------------------------------
append-important()
----------------------------------------
Append `!important` to a list
----------------------------------------
*/
/*
----------------------------------------
get-last()
----------------------------------------
Return the last item of a list,
Return null if the value is null
----------------------------------------
*/
/*
----------------------------------------
de-list()
----------------------------------------
Transform a one-element list or arglist
into that single element.
----------------------------------------
(1) => 1
((1)) => (1)
----------------------------------------
*/
/*
----------------------------------------
error-not-token()
----------------------------------------
Returns a common not-a-token error.
----------------------------------------
*/
/*
----------------------------------------
uswds-error()
----------------------------------------
Allow the system to pass an error as text
to test error states in unit testing
----------------------------------------
*/
/*
----------------------------------------
get-default()
----------------------------------------
Returns the default value from a map
of project defaults
get-default("bg-color")
> $theme-body-background-color
----------------------------------------
*/
/*
----------------------------------------
has-important()
----------------------------------------
Check to see if `!important` is
being passed in a mixin's props
----------------------------------------
*/
/*
----------------------------------------
map-collect()
----------------------------------------
Collect multiple maps into a single
large map
source: https://gist.github.com/bigglesrocks/d75091700f8f2be5abfe
----------------------------------------
*/
/*
----------------------------------------
map-deep-get()
----------------------------------------
@author Hugo Giraudel
@access public
@param {Map} $map - Map
@param {Arglist} $keys - Key chain
@return {*} - Desired value
----------------------------------------
*/
/*
----------------------------------------
multi-cat()
----------------------------------------
Concatenate two lists
----------------------------------------
*/
/*
----------------------------------------
remove()
----------------------------------------
Remove a value from a list
----------------------------------------
*/
/*
----------------------------------------
smart-quote()
----------------------------------------
Quotes strings
Inspects `px`, `xs`, and `xl` numbers
Leaves bools as is
----------------------------------------
*/
/*
----------------------------------------
str-replace()
----------------------------------------
Replace any substring with another
string
----------------------------------------
*/
/*
----------------------------------------
str-split()
----------------------------------------
Split a string at a given separator
and convert into a list of substrings
----------------------------------------
*/
/*
----------------------------------------
strip-unit()
----------------------------------------
Remove the unit of a length
@author Hugo Giraudel
@param {Number} $number - Number to remove unit from
@return {Number} - Unitless number
----------------------------------------
*/
/*
----------------------------------------
base-to-map()
@TODO: Deprecate and delete
----------------------------------------
Convert a single base to a USWDS
value map.

Candidate for deprecation if we remove
isReadable
----------------------------------------
*/
/*
----------------------------------------
to-number()
----------------------------------------
Casts a string into a number
----------------------------------------
@param {String | Number} $value - Value to be parsed
@return {Number}
----------------------------------------
*/
/*
----------------------------------------
unpack()
----------------------------------------
Create lists of single items from lists
of lists.
----------------------------------------
(1, (2.1, 2.2), 3) -->
(1, 2.1, 2.2, 3)
----------------------------------------
*/
/*
----------------------------------------
color()
----------------------------------------
Derive a color from a color shortcode
----------------------------------------
*/
/*
----------------------------------------
color()
----------------------------------------
Derive a color from a color shortcode
----------------------------------------
*/
/*
----------------------------------------
get-system-color()
----------------------------------------
Derive a system color from its
family, value, and vivid or a passed
variable that is, itself, a list
----------------------------------------
*/
/*
----------------------------------------
color()
----------------------------------------
Derive a color from a color shortcode
----------------------------------------
*/
/*
----------------------------------------
color()
----------------------------------------
Derive a color from a color shortcode
----------------------------------------
*/
/*
----------------------------------------
color()
----------------------------------------
Derive a color from a color shortcode
----------------------------------------
*/
/*
----------------------------------------
set-theme-color()
----------------------------------------
Derive a color from a system color token
or a hex value
----------------------------------------
*/
/*
----------------------------------------
px-to-rem()
----------------------------------------
Converts a value in px to a value in rem
----------------------------------------
*/
/*
----------------------------------------
rem-to-px()
----------------------------------------
Converts a value in rem to a value in px
----------------------------------------
*/
/*
----------------------------------------
rem-to-user-em()
----------------------------------------
Converts a value in rem to a value in
[user-settings] em for use in media
queries
----------------------------------------
*/
/*
----------------------------------------
spacing-multiple()
----------------------------------------
Converts a spacing unit multiple into
the desired final units (currently rem)
----------------------------------------
*/
/*
----------------------------------------
units()
----------------------------------------
Converts a spacing unit into
the desired final units (currently rem)
----------------------------------------
*/
/*
----------------------------------------
number-to-token()
----------------------------------------
Converts an integer or numeric value
into a system value

Ex: 0.5   --> '05'
    -1px  --> 'neg-1px'
----------------------------------------
*/
/*
----------------------------------------
Project fonts
----------------------------------------
Collects font settings in a map for
looping.
----------------------------------------
*/
/*
----------------------------------------
Luminance ranges
----------------------------------------
*/
/*
----------------------------------------
ns()
----------------------------------------
Add a namesspace of $type if that
namespace is set to output
----------------------------------------
*/
/*
----------------------------------------
Line height
----------------------------------------
*/
/*
----------------------------------------
Measure
----------------------------------------
*/
/*
----------------------------------------
cap-height()
----------------------------------------
Get the cap height of a valid typeface
----------------------------------------
*/
/*
----------------------------------------
validate-typeface-token()
----------------------------------------
Check to see if a typeface-token exists.
Throw an error if a passed token does
not exist in the typeface-token map.
----------------------------------------
*/
/*
----------------------------------------
convert-to-font-type()
----------------------------------------
Converts a font-role token into a
font-type token. Leaves font-type tokens
unchanged.
----------------------------------------
*/
/*
----------------------------------------
font-sources()
----------------------------------------
Outputs a list of font sources used in
a @font-face declaration.

$theme-font-browser-compatibility: true - output woff2, woff, ttf
$theme-font-browser-compatibility: false - output woff2

@param stem: string - [font path]/[custom-src.dir]/[custom-src.[style].[weight]]
@output: string

filetypes must be one of the filetypes set in variables/$project-font-face-filetypes (woff, woff2, ttf)
----------------------------------------
*/
/*
----------------------------------------
get-font-stack()
----------------------------------------
Get a font stack from a style- or
role-based font token.
----------------------------------------
*/
/*
----------------------------------------
get-typeface-token()
----------------------------------------
Get a typeface token from a font-type or
font-role token.
----------------------------------------
*/
/*
----------------------------------------
normalize-type-scale()
----------------------------------------
Normalizes a specific face's optical size
to a set target
----------------------------------------
*/
/*
----------------------------------------
system-type-scale()
----------------------------------------
Get a value from the system type scale
----------------------------------------
*/
/*
----------------------------------------
Easing
----------------------------------------
*/
/*  deprecated.scss
    ---
    Occasionally the design system will deprecate
    old variables or functionality. If we replace
    the old functionality with something new, this is a
    place to connect the old functionality to the
    new functionality, in the service of better
    continuity and backwards compatibility within a
    major release cycle.

    Note the USWDS version where we deprecated the
    old functionality in a comment.

    Be sure to update notifications.scss.

    This file should started fresh at each
    major version.
*/
/*
----------------------------------------
advanced-color()
----------------------------------------
Derive a color from a color triplet:
[family], [grade], [variant]
----------------------------------------
*/
/*
----------------------------------------
calculate-grade()
----------------------------------------
Derive the grade equivalent any color,
even non-token colors
----------------------------------------
*/
/*
----------------------------------------
color-token-assignment()
----------------------------------------
Get the system token equivalent of any
theme color token
----------------------------------------
*/
/*
----------------------------------------
is-system-color-token()
----------------------------------------
Return whether a token is a system
color token
----------------------------------------
*/
/*
----------------------------------------
is-theme-color-token()
----------------------------------------
Return whether a token is a theme
color token
----------------------------------------
*/
/*
----------------------------------------
color-token-family()
----------------------------------------
Returns the family of a color token.
Returns: color-family
color-token-family("accent-warm-vivid")
> "accent-warm"
color-token-family("red-50v")
> "red"
color-token-variant(("red", 50, "vivid"))
> "red"
----------------------------------------
*/
/*
----------------------------------------
decompose()
----------------------------------------
Convert a color token into into a list
of form [family], [grade], [variant]
Vivid variants return "vivid" as the
variant.
If neither grade nor variant exists,
returns 'null'
----------------------------------------
*/
/*
----------------------------------------
color-token-family()
----------------------------------------
Returns the family of a color token.
Returns: color-family
color-token-family("accent-warm-vivid")
> "accent-warm"
color-token-family("red-50v")
> "red"
color-token-variant(("red", 50, "vivid"))
> "red"
----------------------------------------
*/
/*
----------------------------------------
color-token-grade()
----------------------------------------
Returns the grade of a USWDS color token.
Returns: color-grade
color-token-grade("accent-warm")
> "root"
color-token-grade("accent-warm-vivid")
> "root"
color-token-grade("accent-warm-darker")
> "darker"
color-token-grade("red-50v")
> 50
color-token-variant(("red", 50, "vivid"))
> 50
----------------------------------------
*/
/*
----------------------------------------
color-token-family()
----------------------------------------
Returns the family of a color token.
Returns: color-family
color-token-family("accent-warm-vivid")
> "accent-warm"
color-token-family("red-50v")
> "red"
color-token-variant(("red", 50, "vivid"))
> "red"
----------------------------------------
*/
/*
----------------------------------------
is-color-token()
----------------------------------------
Returns whether a given string is a
USWDS color token.
----------------------------------------
*/
/*
----------------------------------------
pow()
----------------------------------------
Raises a unitless number to the power
of another unitless number
Includes helper functions
----------------------------------------
*/
/*
----------------------------------------
Helper functions
----------------------------------------
*/
/* factorial()
----------------------------------------
*/
/* summation()
----------------------------------------
*/
/* exp-maclaurin()
----------------------------------------
*/
/* ln()
----------------------------------------
*/
/*
----------------------------------------
color-token-type()
----------------------------------------
Returns the type of a color token.
Returns: "system" | "theme"
----------------------------------------
*/
/*
----------------------------------------
color-token-variant()
----------------------------------------
Returns the variant of color token.
Returns: "vivid" | false
color-token-variant("accent-warm")
> false
color-token-variant("accent-warm-vivid")
> "vivid"
color-token-variant("red-50v")
> "vivid"
color-token-variant(("red", 50, "vivid"))
> "vivid"
----------------------------------------
*/
/*
----------------------------------------
magic-number()
----------------------------------------
Returns the magic number of two color
grades. Takes numbers or color tokens.
magic-number(50, 10)
return: 40
magic-number("red-50", "red-10")
return: 40
----------------------------------------
*/
/*
----------------------------------------
is-accessible-magic-number()
----------------------------------------
Returns whether two grades achieve
specified target color contrast
Returns: true | false
is-accessible-magic-number(10, 50, "AA")
> false
is-accessible-magic-number(10, 60, "AA")
> true
----------------------------------------
*/
/*
----------------------------------------
wcag-magic-number()
----------------------------------------
Returns the magic number of a specific
wcag grade:
"AA"
"AA-Large"
"AAA"
wcag-magic-number("AA")
> 50
----------------------------------------
*/
/*
----------------------------------------
get-link-tokens-from-bg()
----------------------------------------
Get accessible link colors for a given
background color
returns: link-token, hover-token
get-link-tokens-from-bg(
  "black",
  "red-60",
  "red-10",
  "AA")
> "red-10", "red-5"
get-link-tokens-from-bg(
  "black",
  "red-60v",
  "red-10v",
  "AA-large")
> "red-60v", "red-50v"
get-link-tokens-from-bg(
  "black",
  "red-5v",
  "red-60v",
  "AA")
> "red-5v", "white"
get-link-tokens-from-bg(
  "black",
  "white",
  "red-60v",
  "AA")
> "white", "white"
----------------------------------------
*/
/*
----------------------------------------
next-token()
----------------------------------------
Returns next "darker" or "lighter" color
token of the same token type and variant.
Returns: color-token | false
next-token("accent-warm", "lighter")
> "accent-warm-light"
next-token("gray-10", "lighter")
> "gray-5"
next-token("gray-5", "lighter")
> "white"
next-token("white", "lighter")
> false
next-token("red-50v", "darker")
> "red-60v"
next-token("red-50", "darker")
> "red-60"
next-token("red-80v", "darker")
> "red-90"
next-token("red-90", "darker")
> "black"
next-token("white", "darker")
> "gray-5"
next-token("black", "lighter")
> "gray-90"
----------------------------------------
*/
/*
----------------------------------------
test-colors()
----------------------------------------
Check to see if all system colors
fall between the proper relative
luminance range for their grade.
Has a couple quirks, as the luminance()
function returns slightly different
results than expected.
----------------------------------------
*/
/*
----------------------------------------
columns()
----------------------------------------
outputs a grid-col number based on
the number of desired columns in the
12-column grid

Ex: columns(2) --> 6
    grid-col(columns(2))
----------------------------------------
*/
/*
----------------------------------------
USWDS Properties
----------------------------------------
*/
/*
----------------------------------------
get-uswds-value()
----------------------------------------
Finds and outputs a value from the
USWDS standard values.

Used to build other standard utility
functions and mixins.
----------------------------------------
*/
/*
----------------------------------------
get-standard-values()
----------------------------------------
Gets a map of USWDS standard values
for a property
----------------------------------------
*/
/*
----------------------------------------
border-radius()
----------------------------------------
Get a border-radius from the system
border-radii
----------------------------------------
*/
/*
----------------------------------------
font-weight()
fw()
----------------------------------------
Get a font-weight value from the
system font-weight
----------------------------------------
*/
/*
----------------------------------------
feature()
----------------------------------------
Gets a valid USWDS font feature setting
----------------------------------------
*/
/*
----------------------------------------
flex()
----------------------------------------
Gets a valid USWDS flex value
----------------------------------------
*/
/*
----------------------------------------
font-family()
family()
----------------------------------------
Get a font-family stack from a
role-based or type-based font family
----------------------------------------
*/
/*
----------------------------------------
letter-spacing()
ls()
----------------------------------------
Get a letter-spacing value from the
system letter-spacing
----------------------------------------
*/
/*
----------------------------------------
measure()
----------------------------------------
Gets a valid USWDS reading line length
----------------------------------------
*/
/*
----------------------------------------
opacity()
----------------------------------------
Get an opacity from the system
opacities
----------------------------------------
*/
/*
----------------------------------------
order()
----------------------------------------
Get an order value from the
system orders
----------------------------------------
*/
/*
----------------------------------------
radius()
----------------------------------------
Get a border-radius value from the
system letter-spacing
----------------------------------------
*/
/*
----------------------------------------
font-size()
----------------------------------------
Get type scale value from a [family] and
[scale]
----------------------------------------
*/
/*
----------------------------------------
z-index()
z()
----------------------------------------
Get a z-index value from the
system z-index
----------------------------------------
*/
/*
----------------------------------------
utility-font()
----------------------------------------
Get a normalized font-size in rem from
a family and a type size in either
system scale or project scale
----------------------------------------
Not the public-facing function.
Used for building the utilities and
withholds certain errors.
----------------------------------------
*/
/*
----------------------------------------
family()
----------------------------------------
Get a font-family stack
----------------------------------------
*/
/*
----------------------------------------
size()
----------------------------------------
Get a normalized font-size in rem from
a family and a type size in either
system scale or project scale
----------------------------------------
*/
/*
----------------------------------------
font()
----------------------------------------
Get a font-family stack
AND
Get a normalized font-size in rem from
a family and a type size in either
system scale or project scale
----------------------------------------
*/
/*
----------------------------------------
typeset()
----------------------------------------
Sets:
- family
- size
- line-height
----------------------------------------
*/
/* stylelint-disable max-nesting-depth */
/*
----------------------------------------
@render-pseudoclass
----------------------------------------
Build a pseucoclass utiliy from values
calculated in the @render-utilities-in
loop
----------------------------------------
*/
/*
----------------------------------------
@render-utility
----------------------------------------
Build a utility from values calculated
in the @render-utilities-in loop
----------------------------------------
TODO: Determine the proper use of
unquote() in the following. Changed to
account for a 'interpolation near
operators will be simplified in a
future version of Sass' warning.
----------------------------------------
*/
/*
----------------------------------------
@render-utilities-in
----------------------------------------
The master loop that sets the building
blocks of utilities from the values
in individual rule settings and loops
through all possible variants
----------------------------------------
*/
/* stylelint-enable */
/*  notifications.scss
    ---
    Adds a notification at the top of each USWDS
    compile. Use this file for important notifications
    and updates to the design system.

    This file should started fresh at each
    major version.

*/
/* prettier-ignore */
/* prettier-ignore */
/* stylelint-disable */
@font-face {
  font-family: "Roboto Mono Web";
  font-style: normal;
  font-weight: 300;
  font-display: fallback;
  src: url(../node_modules/@uswds/uswds/dist/fonts/roboto-mono/roboto-mono-v5-latin-300.woff2) format("woff2");
}
@font-face {
  font-family: "Roboto Mono Web";
  font-style: normal;
  font-weight: 400;
  font-display: fallback;
  src: url(../node_modules/@uswds/uswds/dist/fonts/roboto-mono/roboto-mono-v5-latin-regular.woff2) format("woff2");
}
@font-face {
  font-family: "Roboto Mono Web";
  font-style: normal;
  font-weight: 700;
  font-display: fallback;
  src: url(../node_modules/@uswds/uswds/dist/fonts/roboto-mono/roboto-mono-v5-latin-700.woff2) format("woff2");
}
@font-face {
  font-family: "Roboto Mono Web";
  font-style: italic;
  font-weight: 300;
  font-display: fallback;
  src: url(../node_modules/@uswds/uswds/dist/fonts/roboto-mono/roboto-mono-v5-latin-300italic.woff2) format("woff2");
}
@font-face {
  font-family: "Roboto Mono Web";
  font-style: italic;
  font-weight: 400;
  font-display: fallback;
  src: url(../node_modules/@uswds/uswds/dist/fonts/roboto-mono/roboto-mono-v5-latin-italic.woff2) format("woff2");
}
@font-face {
  font-family: "Roboto Mono Web";
  font-style: italic;
  font-weight: 700;
  font-display: fallback;
  src: url(../node_modules/@uswds/uswds/dist/fonts/roboto-mono/roboto-mono-v5-latin-700italic.woff2) format("woff2");
}
@font-face {
  font-family: "Source Sans Pro Web";
  font-style: normal;
  font-weight: 300;
  font-display: fallback;
  src: url(../node_modules/@uswds/uswds/dist/fonts/source-sans-pro/sourcesanspro-light-webfont.woff2) format("woff2");
}
@font-face {
  font-family: "Source Sans Pro Web";
  font-style: normal;
  font-weight: 400;
  font-display: fallback;
  src: url(../node_modules/@uswds/uswds/dist/fonts/source-sans-pro/sourcesanspro-regular-webfont.woff2) format("woff2");
}
@font-face {
  font-family: "Source Sans Pro Web";
  font-style: normal;
  font-weight: 700;
  font-display: fallback;
  src: url(../node_modules/@uswds/uswds/dist/fonts/source-sans-pro/sourcesanspro-bold-webfont.woff2) format("woff2");
}
@font-face {
  font-family: "Source Sans Pro Web";
  font-style: italic;
  font-weight: 300;
  font-display: fallback;
  src: url(../node_modules/@uswds/uswds/dist/fonts/source-sans-pro/sourcesanspro-lightitalic-webfont.woff2) format("woff2");
}
@font-face {
  font-family: "Source Sans Pro Web";
  font-style: italic;
  font-weight: 400;
  font-display: fallback;
  src: url(../node_modules/@uswds/uswds/dist/fonts/source-sans-pro/sourcesanspro-italic-webfont.woff2) format("woff2");
}
@font-face {
  font-family: "Source Sans Pro Web";
  font-style: italic;
  font-weight: 700;
  font-display: fallback;
  src: url(../node_modules/@uswds/uswds/dist/fonts/source-sans-pro/sourcesanspro-bolditalic-webfont.woff2) format("woff2");
}
@font-face {
  font-family: "Merriweather Web";
  font-style: normal;
  font-weight: 300;
  font-display: fallback;
  src: url(../node_modules/@uswds/uswds/dist/fonts/merriweather/Latin-Merriweather-Light.woff2) format("woff2");
}
@font-face {
  font-family: "Merriweather Web";
  font-style: normal;
  font-weight: 400;
  font-display: fallback;
  src: url(../node_modules/@uswds/uswds/dist/fonts/merriweather/Latin-Merriweather-Regular.woff2) format("woff2");
}
@font-face {
  font-family: "Merriweather Web";
  font-style: normal;
  font-weight: 700;
  font-display: fallback;
  src: url(../node_modules/@uswds/uswds/dist/fonts/merriweather/Latin-Merriweather-Bold.woff2) format("woff2");
}
@font-face {
  font-family: "Merriweather Web";
  font-style: italic;
  font-weight: 300;
  font-display: fallback;
  src: url(../node_modules/@uswds/uswds/dist/fonts/merriweather/Latin-Merriweather-LightItalic.woff2) format("woff2");
}
@font-face {
  font-family: "Merriweather Web";
  font-style: italic;
  font-weight: 400;
  font-display: fallback;
  src: url(../node_modules/@uswds/uswds/dist/fonts/merriweather/Latin-Merriweather-Italic.woff2) format("woff2");
}
@font-face {
  font-family: "Merriweather Web";
  font-style: italic;
  font-weight: 700;
  font-display: fallback;
  src: url(../node_modules/@uswds/uswds/dist/fonts/merriweather/Latin-Merriweather-BoldItalic.woff2) format("woff2");
}
/* stylelint-enable */
/* latin */
@font-face {
  font-family: "Bitter";
  font-style: normal;
  font-weight: 400;
  src: local("Bitter Regular"), local("Bitter-Regular"), url("./fonts/bitter-regular.woff2") format("woff2"), url("./fonts/bitter-regular.ttf") format("truetype");
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2212, U+2215;
}
/* latin */
@font-face {
  font-family: "Bitter";
  font-style: normal;
  font-weight: 700;
  src: local("Bitter Bold"), local("Bitter-Bold"), url("./fonts/bitter-bold.woff2") format("woff2"), url("./fonts/bitter-bold.ttf") format("truetype");
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2212, U+2215;
}
/*
  Original: @import "~uswds/src/stylesheets/elements/buttons";
  ***THIS IS USWDS v1***
*/
/* stylelint-disable selector-no-qualifying-type */
.usa-button,
.usa-button-primary,
.usa-button:visited,
.usa-button-primary:visited,
button,
[type=button],
[type=submit],
[type=reset],
[type=image] {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  margin-top: 0.5em;
  margin-right: 0.5em;
  margin-bottom: 0.5em;
  appearance: none;
  background-color: #005ea2;
  border: 0;
  border-radius: 5px;
  color: #ffffff;
  cursor: pointer;
  display: inline-block;
  font-family: "Source Sans Pro", "Helvetica Neue", Helvetica, Roboto, Arial, sans-serif;
  font-size: 16px;
  font-weight: 700;
  line-height: 1;
  padding: 0.625rem 1.25rem;
  text-align: center;
  text-decoration: none;
  width: 100%;
}
@media screen and (min-width: 481px) {
  .usa-button,
  .usa-button-primary,
  .usa-button:visited,
  .usa-button-primary:visited,
  button,
  [type=button],
  [type=submit],
  [type=reset],
  [type=image] {
    width: auto;
  }
}
.usa-button:hover, .usa-button.usa-button-hover,
.usa-button-primary:hover,
.usa-button-primary.usa-button-hover,
.usa-button:visited:hover,
.usa-button:visited.usa-button-hover,
.usa-button-primary:visited:hover,
.usa-button-primary:visited.usa-button-hover,
button:hover,
button.usa-button-hover,
[type=button]:hover,
[type=button].usa-button-hover,
[type=submit]:hover,
[type=submit].usa-button-hover,
[type=reset]:hover,
[type=reset].usa-button-hover,
[type=image]:hover,
[type=image].usa-button-hover {
  background-color: #1a4480;
  border-bottom: 0;
  color: #ffffff;
  text-decoration: none;
}
.usa-button:active, .usa-button.usa-button-active,
.usa-button-primary:active,
.usa-button-primary.usa-button-active,
.usa-button:visited:active,
.usa-button:visited.usa-button-active,
.usa-button-primary:visited:active,
.usa-button-primary:visited.usa-button-active,
button:active,
button.usa-button-active,
[type=button]:active,
[type=button].usa-button-active,
[type=submit]:active,
[type=submit].usa-button-active,
[type=reset]:active,
[type=reset].usa-button-active,
[type=image]:active,
[type=image].usa-button-active {
  background-color: #162e51;
}
.usa-button.usa-button-primary-alt,
.usa-button-primary.usa-button-primary-alt,
.usa-button:visited.usa-button-primary-alt,
.usa-button-primary:visited.usa-button-primary-alt,
button.usa-button-primary-alt,
[type=button].usa-button-primary-alt,
[type=submit].usa-button-primary-alt,
[type=reset].usa-button-primary-alt,
[type=image].usa-button-primary-alt {
  background-color: #02bfe7;
  color: #212121;
}
.usa-button.usa-button-primary-alt:hover, .usa-button.usa-button-primary-alt.usa-button-hover,
.usa-button-primary.usa-button-primary-alt:hover,
.usa-button-primary.usa-button-primary-alt.usa-button-hover,
.usa-button:visited.usa-button-primary-alt:hover,
.usa-button:visited.usa-button-primary-alt.usa-button-hover,
.usa-button-primary:visited.usa-button-primary-alt:hover,
.usa-button-primary:visited.usa-button-primary-alt.usa-button-hover,
button.usa-button-primary-alt:hover,
button.usa-button-primary-alt.usa-button-hover,
[type=button].usa-button-primary-alt:hover,
[type=button].usa-button-primary-alt.usa-button-hover,
[type=submit].usa-button-primary-alt:hover,
[type=submit].usa-button-primary-alt.usa-button-hover,
[type=reset].usa-button-primary-alt:hover,
[type=reset].usa-button-primary-alt.usa-button-hover,
[type=image].usa-button-primary-alt:hover,
[type=image].usa-button-primary-alt.usa-button-hover {
  background-color: #00a6d2;
}
.usa-button.usa-button-primary-alt:active, .usa-button.usa-button-primary-alt.usa-button-active,
.usa-button-primary.usa-button-primary-alt:active,
.usa-button-primary.usa-button-primary-alt.usa-button-active,
.usa-button:visited.usa-button-primary-alt:active,
.usa-button:visited.usa-button-primary-alt.usa-button-active,
.usa-button-primary:visited.usa-button-primary-alt:active,
.usa-button-primary:visited.usa-button-primary-alt.usa-button-active,
button.usa-button-primary-alt:active,
button.usa-button-primary-alt.usa-button-active,
[type=button].usa-button-primary-alt:active,
[type=button].usa-button-primary-alt.usa-button-active,
[type=submit].usa-button-primary-alt:active,
[type=submit].usa-button-primary-alt.usa-button-active,
[type=reset].usa-button-primary-alt:active,
[type=reset].usa-button-primary-alt.usa-button-active,
[type=image].usa-button-primary-alt:active,
[type=image].usa-button-primary-alt.usa-button-active {
  background-color: #046b99;
  color: #ffffff;
}
.usa-button.usa-button-secondary,
.usa-button-primary.usa-button-secondary,
.usa-button:visited.usa-button-secondary,
.usa-button-primary:visited.usa-button-secondary,
button.usa-button-secondary,
[type=button].usa-button-secondary,
[type=submit].usa-button-secondary,
[type=reset].usa-button-secondary,
[type=image].usa-button-secondary {
  background-color: #ffffff;
  box-shadow: inset 0 0 0 2px #005ea2;
  color: #005ea2;
}
.usa-button.usa-button-secondary:hover, .usa-button.usa-button-secondary.usa-button-hover,
.usa-button-primary.usa-button-secondary:hover,
.usa-button-primary.usa-button-secondary.usa-button-hover,
.usa-button:visited.usa-button-secondary:hover,
.usa-button:visited.usa-button-secondary.usa-button-hover,
.usa-button-primary:visited.usa-button-secondary:hover,
.usa-button-primary:visited.usa-button-secondary.usa-button-hover,
button.usa-button-secondary:hover,
button.usa-button-secondary.usa-button-hover,
[type=button].usa-button-secondary:hover,
[type=button].usa-button-secondary.usa-button-hover,
[type=submit].usa-button-secondary:hover,
[type=submit].usa-button-secondary.usa-button-hover,
[type=reset].usa-button-secondary:hover,
[type=reset].usa-button-secondary.usa-button-hover,
[type=image].usa-button-secondary:hover,
[type=image].usa-button-secondary.usa-button-hover {
  box-shadow: inset 0 0 0 2px #1a4480;
  color: #1a4480;
}
.usa-button.usa-button-secondary:active, .usa-button.usa-button-secondary.usa-button-active,
.usa-button-primary.usa-button-secondary:active,
.usa-button-primary.usa-button-secondary.usa-button-active,
.usa-button:visited.usa-button-secondary:active,
.usa-button:visited.usa-button-secondary.usa-button-active,
.usa-button-primary:visited.usa-button-secondary:active,
.usa-button-primary:visited.usa-button-secondary.usa-button-active,
button.usa-button-secondary:active,
button.usa-button-secondary.usa-button-active,
[type=button].usa-button-secondary:active,
[type=button].usa-button-secondary.usa-button-active,
[type=submit].usa-button-secondary:active,
[type=submit].usa-button-secondary.usa-button-active,
[type=reset].usa-button-secondary:active,
[type=reset].usa-button-secondary.usa-button-active,
[type=image].usa-button-secondary:active,
[type=image].usa-button-secondary.usa-button-active {
  box-shadow: inset 0 0 0 2px #162e51;
  color: #162e51;
}
.usa-button.usa-button-secondary-inverse, .usa-button.usa-button-outline-inverse,
.usa-button-primary.usa-button-secondary-inverse,
.usa-button-primary.usa-button-outline-inverse,
.usa-button:visited.usa-button-secondary-inverse,
.usa-button:visited.usa-button-outline-inverse,
.usa-button-primary:visited.usa-button-secondary-inverse,
.usa-button-primary:visited.usa-button-outline-inverse,
button.usa-button-secondary-inverse,
button.usa-button-outline-inverse,
[type=button].usa-button-secondary-inverse,
[type=button].usa-button-outline-inverse,
[type=submit].usa-button-secondary-inverse,
[type=submit].usa-button-outline-inverse,
[type=reset].usa-button-secondary-inverse,
[type=reset].usa-button-outline-inverse,
[type=image].usa-button-secondary-inverse,
[type=image].usa-button-outline-inverse {
  background: transparent;
  box-shadow: inset 0 0 0 2px #ffffff;
  color: #ffffff;
}
.usa-button.usa-button-secondary-inverse:hover, .usa-button.usa-button-secondary-inverse.usa-button-hover, .usa-button.usa-button-outline-inverse:hover, .usa-button.usa-button-outline-inverse.usa-button-hover,
.usa-button-primary.usa-button-secondary-inverse:hover,
.usa-button-primary.usa-button-secondary-inverse.usa-button-hover,
.usa-button-primary.usa-button-outline-inverse:hover,
.usa-button-primary.usa-button-outline-inverse.usa-button-hover,
.usa-button:visited.usa-button-secondary-inverse:hover,
.usa-button:visited.usa-button-secondary-inverse.usa-button-hover,
.usa-button:visited.usa-button-outline-inverse:hover,
.usa-button:visited.usa-button-outline-inverse.usa-button-hover,
.usa-button-primary:visited.usa-button-secondary-inverse:hover,
.usa-button-primary:visited.usa-button-secondary-inverse.usa-button-hover,
.usa-button-primary:visited.usa-button-outline-inverse:hover,
.usa-button-primary:visited.usa-button-outline-inverse.usa-button-hover,
button.usa-button-secondary-inverse:hover,
button.usa-button-secondary-inverse.usa-button-hover,
button.usa-button-outline-inverse:hover,
button.usa-button-outline-inverse.usa-button-hover,
[type=button].usa-button-secondary-inverse:hover,
[type=button].usa-button-secondary-inverse.usa-button-hover,
[type=button].usa-button-outline-inverse:hover,
[type=button].usa-button-outline-inverse.usa-button-hover,
[type=submit].usa-button-secondary-inverse:hover,
[type=submit].usa-button-secondary-inverse.usa-button-hover,
[type=submit].usa-button-outline-inverse:hover,
[type=submit].usa-button-outline-inverse.usa-button-hover,
[type=reset].usa-button-secondary-inverse:hover,
[type=reset].usa-button-secondary-inverse.usa-button-hover,
[type=reset].usa-button-outline-inverse:hover,
[type=reset].usa-button-outline-inverse.usa-button-hover,
[type=image].usa-button-secondary-inverse:hover,
[type=image].usa-button-secondary-inverse.usa-button-hover,
[type=image].usa-button-outline-inverse:hover,
[type=image].usa-button-outline-inverse.usa-button-hover {
  box-shadow: inset 0 0 0 2px #dfe1e2;
  color: #dfe1e2;
}
.usa-button.usa-button-secondary-inverse:active, .usa-button.usa-button-secondary-inverse.usa-button-active, .usa-button.usa-button-outline-inverse:active, .usa-button.usa-button-outline-inverse.usa-button-active,
.usa-button-primary.usa-button-secondary-inverse:active,
.usa-button-primary.usa-button-secondary-inverse.usa-button-active,
.usa-button-primary.usa-button-outline-inverse:active,
.usa-button-primary.usa-button-outline-inverse.usa-button-active,
.usa-button:visited.usa-button-secondary-inverse:active,
.usa-button:visited.usa-button-secondary-inverse.usa-button-active,
.usa-button:visited.usa-button-outline-inverse:active,
.usa-button:visited.usa-button-outline-inverse.usa-button-active,
.usa-button-primary:visited.usa-button-secondary-inverse:active,
.usa-button-primary:visited.usa-button-secondary-inverse.usa-button-active,
.usa-button-primary:visited.usa-button-outline-inverse:active,
.usa-button-primary:visited.usa-button-outline-inverse.usa-button-active,
button.usa-button-secondary-inverse:active,
button.usa-button-secondary-inverse.usa-button-active,
button.usa-button-outline-inverse:active,
button.usa-button-outline-inverse.usa-button-active,
[type=button].usa-button-secondary-inverse:active,
[type=button].usa-button-secondary-inverse.usa-button-active,
[type=button].usa-button-outline-inverse:active,
[type=button].usa-button-outline-inverse.usa-button-active,
[type=submit].usa-button-secondary-inverse:active,
[type=submit].usa-button-secondary-inverse.usa-button-active,
[type=submit].usa-button-outline-inverse:active,
[type=submit].usa-button-outline-inverse.usa-button-active,
[type=reset].usa-button-secondary-inverse:active,
[type=reset].usa-button-secondary-inverse.usa-button-active,
[type=reset].usa-button-outline-inverse:active,
[type=reset].usa-button-outline-inverse.usa-button-active,
[type=image].usa-button-secondary-inverse:active,
[type=image].usa-button-secondary-inverse.usa-button-active,
[type=image].usa-button-outline-inverse:active,
[type=image].usa-button-outline-inverse.usa-button-active {
  box-shadow: inset 0 0 0 2px #aeb0b5;
  color: #dfe1e2;
}
.usa-button.usa-button-gray,
.usa-button-primary.usa-button-gray,
.usa-button:visited.usa-button-gray,
.usa-button-primary:visited.usa-button-gray,
button.usa-button-gray,
[type=button].usa-button-gray,
[type=submit].usa-button-gray,
[type=reset].usa-button-gray,
[type=image].usa-button-gray {
  background-color: #5b616b;
}
.usa-button.usa-button-gray:hover, .usa-button.usa-button-gray.usa-button-hover,
.usa-button-primary.usa-button-gray:hover,
.usa-button-primary.usa-button-gray.usa-button-hover,
.usa-button:visited.usa-button-gray:hover,
.usa-button:visited.usa-button-gray.usa-button-hover,
.usa-button-primary:visited.usa-button-gray:hover,
.usa-button-primary:visited.usa-button-gray.usa-button-hover,
button.usa-button-gray:hover,
button.usa-button-gray.usa-button-hover,
[type=button].usa-button-gray:hover,
[type=button].usa-button-gray.usa-button-hover,
[type=submit].usa-button-gray:hover,
[type=submit].usa-button-gray.usa-button-hover,
[type=reset].usa-button-gray:hover,
[type=reset].usa-button-gray.usa-button-hover,
[type=image].usa-button-gray:hover,
[type=image].usa-button-gray.usa-button-hover {
  background-color: #323a45;
}
.usa-button.usa-button-gray:active, .usa-button.usa-button-gray.usa-button-active,
.usa-button-primary.usa-button-gray:active,
.usa-button-primary.usa-button-gray.usa-button-active,
.usa-button:visited.usa-button-gray:active,
.usa-button:visited.usa-button-gray.usa-button-active,
.usa-button-primary:visited.usa-button-gray:active,
.usa-button-primary:visited.usa-button-gray.usa-button-active,
button.usa-button-gray:active,
button.usa-button-gray.usa-button-active,
[type=button].usa-button-gray:active,
[type=button].usa-button-gray.usa-button-active,
[type=submit].usa-button-gray:active,
[type=submit].usa-button-gray.usa-button-active,
[type=reset].usa-button-gray:active,
[type=reset].usa-button-gray.usa-button-active,
[type=image].usa-button-gray:active,
[type=image].usa-button-gray.usa-button-active {
  background-color: #212121;
}
.usa-button.usa-button-red,
.usa-button-primary.usa-button-red,
.usa-button:visited.usa-button-red,
.usa-button-primary:visited.usa-button-red,
button.usa-button-red,
[type=button].usa-button-red,
[type=submit].usa-button-red,
[type=reset].usa-button-red,
[type=image].usa-button-red {
  background-color: #e31c3d;
}
.usa-button.usa-button-red:hover, .usa-button.usa-button-red.usa-button-hover,
.usa-button-primary.usa-button-red:hover,
.usa-button-primary.usa-button-red.usa-button-hover,
.usa-button:visited.usa-button-red:hover,
.usa-button:visited.usa-button-red.usa-button-hover,
.usa-button-primary:visited.usa-button-red:hover,
.usa-button-primary:visited.usa-button-red.usa-button-hover,
button.usa-button-red:hover,
button.usa-button-red.usa-button-hover,
[type=button].usa-button-red:hover,
[type=button].usa-button-red.usa-button-hover,
[type=submit].usa-button-red:hover,
[type=submit].usa-button-red.usa-button-hover,
[type=reset].usa-button-red:hover,
[type=reset].usa-button-red.usa-button-hover,
[type=image].usa-button-red:hover,
[type=image].usa-button-red.usa-button-hover {
  background-color: #cd2026;
}
.usa-button.usa-button-red:active, .usa-button.usa-button-red.usa-button-active,
.usa-button-primary.usa-button-red:active,
.usa-button-primary.usa-button-red.usa-button-active,
.usa-button:visited.usa-button-red:active,
.usa-button:visited.usa-button-red.usa-button-active,
.usa-button-primary:visited.usa-button-red:active,
.usa-button-primary:visited.usa-button-red.usa-button-active,
button.usa-button-red:active,
button.usa-button-red.usa-button-active,
[type=button].usa-button-red:active,
[type=button].usa-button-red.usa-button-active,
[type=submit].usa-button-red:active,
[type=submit].usa-button-red.usa-button-active,
[type=reset].usa-button-red:active,
[type=reset].usa-button-red.usa-button-active,
[type=image].usa-button-red:active,
[type=image].usa-button-red.usa-button-active {
  background-color: #981b1e;
}
.usa-button.usa-button-big,
.usa-button-primary.usa-button-big,
.usa-button:visited.usa-button-big,
.usa-button-primary:visited.usa-button-big,
button.usa-button-big,
[type=button].usa-button-big,
[type=submit].usa-button-big,
[type=reset].usa-button-big,
[type=image].usa-button-big {
  border-radius: 8px;
  font-size: 1.5rem;
  padding: 0.9375rem 1.875rem;
}
.usa-button:disabled,
.usa-button-primary:disabled,
.usa-button:visited:disabled,
.usa-button-primary:visited:disabled,
button:disabled,
[type=button]:disabled,
[type=submit]:disabled,
[type=reset]:disabled,
[type=image]:disabled {
  background-color: #dfe1e2;
  pointer-events: none;
}
.usa-button:disabled:hover, .usa-button:disabled.usa-button-hover, .usa-button:disabled:active, .usa-button:disabled.usa-button-active, .usa-button:disabled:focus, .usa-button:disabled.usa-focus,
.usa-button-primary:disabled:hover,
.usa-button-primary:disabled.usa-button-hover,
.usa-button-primary:disabled:active,
.usa-button-primary:disabled.usa-button-active,
.usa-button-primary:disabled:focus,
.usa-button-primary:disabled.usa-focus,
.usa-button:visited:disabled:hover,
.usa-button:visited:disabled.usa-button-hover,
.usa-button:visited:disabled:active,
.usa-button:visited:disabled.usa-button-active,
.usa-button:visited:disabled:focus,
.usa-button:visited:disabled.usa-focus,
.usa-button-primary:visited:disabled:hover,
.usa-button-primary:visited:disabled.usa-button-hover,
.usa-button-primary:visited:disabled:active,
.usa-button-primary:visited:disabled.usa-button-active,
.usa-button-primary:visited:disabled:focus,
.usa-button-primary:visited:disabled.usa-focus,
button:disabled:hover,
button:disabled.usa-button-hover,
button:disabled:active,
button:disabled.usa-button-active,
button:disabled:focus,
button:disabled.usa-focus,
[type=button]:disabled:hover,
[type=button]:disabled.usa-button-hover,
[type=button]:disabled:active,
[type=button]:disabled.usa-button-active,
[type=button]:disabled:focus,
[type=button]:disabled.usa-focus,
[type=submit]:disabled:hover,
[type=submit]:disabled.usa-button-hover,
[type=submit]:disabled:active,
[type=submit]:disabled.usa-button-active,
[type=submit]:disabled:focus,
[type=submit]:disabled.usa-focus,
[type=reset]:disabled:hover,
[type=reset]:disabled.usa-button-hover,
[type=reset]:disabled:active,
[type=reset]:disabled.usa-button-active,
[type=reset]:disabled:focus,
[type=reset]:disabled.usa-focus,
[type=image]:disabled:hover,
[type=image]:disabled.usa-button-hover,
[type=image]:disabled:active,
[type=image]:disabled.usa-button-active,
[type=image]:disabled:focus,
[type=image]:disabled.usa-focus {
  background-color: #dfe1e2;
  border: 0;
  box-shadow: none;
}

/* stylelint-disable */
.usa-button-disabled {
  background-color: #dfe1e2;
  pointer-events: none;
}
.usa-button-disabled:hover, .usa-button-disabled.usa-button-hover, .usa-button-disabled:active, .usa-button-disabled.usa-button-active, .usa-button-disabled:focus, .usa-button-disabled.usa-focus {
  background-color: #dfe1e2;
  border: 0;
  box-shadow: none;
}

.usa-button-secondary-disabled,
.usa-button-secondary-inverse-disabled,
.usa-button-secondary:disabled,
.usa-button-secondary-inverse:disabled,
.usa-button-outline-inverse:disabled {
  box-shadow: inset 0 0 0 2px #dfe1e2;
  pointer-events: none;
  color: #dfe1e2;
}
.usa-button-secondary-disabled:hover, .usa-button-secondary-disabled.usa-button-hover, .usa-button-secondary-disabled:active, .usa-button-secondary-disabled.usa-button-active, .usa-button-secondary-disabled:focus, .usa-button-secondary-disabled.usa-focus,
.usa-button-secondary-inverse-disabled:hover,
.usa-button-secondary-inverse-disabled.usa-button-hover,
.usa-button-secondary-inverse-disabled:active,
.usa-button-secondary-inverse-disabled.usa-button-active,
.usa-button-secondary-inverse-disabled:focus,
.usa-button-secondary-inverse-disabled.usa-focus,
.usa-button-secondary:disabled:hover,
.usa-button-secondary:disabled.usa-button-hover,
.usa-button-secondary:disabled:active,
.usa-button-secondary:disabled.usa-button-active,
.usa-button-secondary:disabled:focus,
.usa-button-secondary:disabled.usa-focus,
.usa-button-secondary-inverse:disabled:hover,
.usa-button-secondary-inverse:disabled.usa-button-hover,
.usa-button-secondary-inverse:disabled:active,
.usa-button-secondary-inverse:disabled.usa-button-active,
.usa-button-secondary-inverse:disabled:focus,
.usa-button-secondary-inverse:disabled.usa-focus,
.usa-button-outline-inverse:disabled:hover,
.usa-button-outline-inverse:disabled.usa-button-hover,
.usa-button-outline-inverse:disabled:active,
.usa-button-outline-inverse:disabled.usa-button-active,
.usa-button-outline-inverse:disabled:focus,
.usa-button-outline-inverse:disabled.usa-focus {
  background-color: #ffffff;
  border: 0;
}

html .usa-button-secondary-disabled,
.usa-button-secondary:disabled {
  background-color: #ffffff;
}

html .usa-button-secondary-inverse-disabled,
.usa-button-secondary-inverse:disabled {
  background-color: transparent;
  color: #5b616b;
  box-shadow: inset 0 0 0 2px #5b616b;
}

.usa-button-unstyled {
  background-color: transparent;
  border: 0;
  border-radius: 0;
  font-weight: 400;
  margin: 0;
  padding: 0;
  text-align: left;
  -webkit-font-smoothing: auto;
}
.usa-button-unstyled:hover {
  background-color: transparent;
}

/*
  Original: @import "~uswds/src/stylesheets/elements/inputs";
  ***THIS IS USWDS v1***
*/
/* stylelint-disable selector-no-qualifying-type */
input,
textarea,
select {
  appearance: none;
  border: 1px solid #5b616b;
  border-radius: 0;
  box-sizing: border-box;
  color: #1b1b1b;
  display: block;
  font-size: 16px;
  height: 42px;
  line-height: 1.3;
  margin: 0.2em 0;
  max-width: 460px;
  padding: 10px 11.2px;
  width: 100%;
}
input.usa-input-success,
textarea.usa-input-success,
select.usa-input-success {
  border: 3px solid #4aa564;
}

/* stylelint-enable */
.usa-input-error {
  border-left: 4px solid #cd2026;
  margin-top: 1.875rem;
  padding-bottom: 0.5rem;
  padding-left: 0.9375rem;
  padding-top: 0.5rem;
  position: relative;
  right: 1.1875rem;
}
.usa-input-error input,
.usa-input-error textarea,
.usa-input-error select {
  border: 3px solid #cd2026;
  width: calc(100% + 1.1875rem);
}
.usa-input-error label {
  margin-top: 0;
}
.usa-input-error .usa-input-inline {
  border: 0.0625rem solid #5b616b;
  width: inherit;
}
.usa-input-error .usa-input-inline-error {
  border: 3px solid #cd2026;
}

.usa-input-error-label {
  display: block;
  font-size: 1rem;
  font-weight: 700;
}

.usa-input-error-message {
  color: #cd2026;
  display: block;
  font-size: 1rem;
  font-weight: 700;
  padding-bottom: 3px;
  padding-top: 3px;
}

.usa-input-required:after {
  color: #981b1e;
  content: " (*required)";
}

.usa-input-optional:after {
  color: #757575;
  content: " (optional)";
}

.usa-input-label-helper {
  color: #757575;
}

.usa-input-label-required {
  color: #981b1e;
}

label {
  display: block;
  margin-top: 1.875rem;
  max-width: 28.75rem;
}

textarea {
  height: 10rem;
}

select {
  appearance: none;
  background-color: #ffffff;
  background-image: url("./img/arrow-both.png");
  background-image: none, url("./img/arrow-both.svg"), url("./img/arrow-both.png");
  background-position: right 0.8125rem center;
  background-repeat: no-repeat;
  background-size: 0.625rem;
  padding-right: 1.875rem;
}
select::-ms-expand {
  display: none;
}
select:-webkit-autofill {
  appearance: menulist;
}
select:-moz-focusring {
  color: transparent;
  text-shadow: 0 0 0 #000000;
}

option:first-child {
  font-weight: 700;
}

legend {
  font-size: 1.875rem;
  font-weight: 700;
}

.usa-fieldset-inputs label {
  margin-top: 0;
}

.usa-form-hint {
  color: #757575;
  font-family: "Source Sans Pro", "Helvetica Neue", Helvetica, Roboto, Arial, sans-serif;
  margin-bottom: 0;
}

[type=checkbox],
[type=radio] {
  position: absolute;
  left: -999em;
}
.lt-ie9 [type=checkbox],
.lt-ie9 [type=radio] {
  border: 0;
  float: left;
  margin: 0.4em 0.4em 0 0;
  position: static;
  width: auto;
}

[type=checkbox] + label,
[type=radio] + label {
  cursor: pointer;
  font-weight: 400;
  margin-bottom: 0.65em;
}

[type=checkbox] + label::before,
[type=radio] + label::before {
  background: #ffffff;
  content: " ";
  display: inline-block;
  text-indent: 0.15em;
  vertical-align: middle\0 ;
}

[type=checkbox] + label::before {
  border-radius: 2px;
  box-shadow: 0 0 0 1px #757575;
  height: 1.25rem;
  line-height: 1.25rem;
  margin-left: 1px;
  margin-right: 0.6em;
  width: 1.25rem;
}

[type=radio] + label::before {
  border-radius: 100%;
  box-shadow: 0 0 0 2px #ffffff, 0 0 0 3px #757575;
  height: 0.875rem;
  line-height: 0.875rem;
  margin-left: 3px;
  margin-right: 0.75em;
  width: 0.875rem;
}

[type=checkbox]:checked + label::before,
[type=radio]:checked + label::before {
  background-color: #005ea2;
  box-shadow: 0 0 0 1px #005ea2;
}

[type=radio]:checked + label::before {
  box-shadow: 0 0 0 2px #ffffff, 0 0 0 4px #005ea2;
}

[type=checkbox]:checked + label::before,
[type=checkbox]:checked:disabled + label::before {
  background-image: url("./img/correct8.png");
  background-image: url("./img/correct8.svg");
  background-position: 50%;
  background-repeat: no-repeat;
}

[type=radio]:focus + label::before {
  outline: 2px dotted #aeb0b5;
  outline-offset: 6px;
}

[type=checkbox]:disabled + label {
  color: #d6d7d9;
}

[type=checkbox]:focus + label::before {
  outline: 2px dotted #aeb0b5;
  outline-offset: 3px;
}

[type=checkbox]:disabled + label::before,
[type=radio]:disabled + label::before {
  background: #f1f1f1;
  box-shadow: 0 0 0 1px #aeb0b5;
  cursor: not-allowed;
}

@media print {
  [type=checkbox]:checked + label::before,
  [type=checkbox]:checked:disabled + label::before {
    background-image: none;
    background-color: #ffffff;
    content: url("./img/correct8-alt.png");
    content: url("./img/correct8-alt.svg");
    text-indent: 0;
  }
  [type=radio]:checked:disabled + label::before,
  [type=radio]:checked + label::before {
    box-shadow: 0 0 0 2px #ffffff, inset 0 0 0 14px #005ea2, 0 0 0 4px #005ea2;
  }
}
[type=range] {
  appearance: none;
  border: none;
  padding-left: 0;
  overflow: hidden;
  width: 100%;
}
[type=range]:focus {
  outline: none;
}
[type=range]:focus::-webkit-slider-thumb {
  box-shadow: 0 0 0 2px #005ea2;
}
[type=range]:focus::-moz-range-thumb {
  box-shadow: 0 0 0 2px #005ea2;
}
[type=range]:focus::-ms-thumb {
  box-shadow: 0 0 0 2px #005ea2;
}
[type=range]::-webkit-slider-runnable-track {
  background: #d6d7d9;
  border: 1px solid #757575;
  cursor: pointer;
  height: 1rem;
  width: 100%;
}
[type=range]::-moz-range-track {
  background: #d6d7d9;
  border: 1px solid #757575;
  cursor: pointer;
  height: 1rem;
  width: 100%;
}
[type=range]::-ms-track {
  background: #d6d7d9;
  border: 1px solid #757575;
  cursor: pointer;
  height: 1rem;
  width: 100%;
}
[type=range]::-webkit-slider-thumb {
  background: #f1f1f1;
  box-shadow: 0 0 0 1px #757575;
  border-radius: 0.9375rem;
  cursor: pointer;
  height: 1.5625rem;
  width: 1.5625rem;
  appearance: none;
  margin-top: -0.375rem;
}
[type=range]::-moz-range-thumb {
  background: #f1f1f1;
  box-shadow: 0 0 0 1px #757575;
  border-radius: 0.9375rem;
  cursor: pointer;
  height: 1.5625rem;
  width: 1.5625rem;
}
[type=range]::-ms-thumb {
  background: #f1f1f1;
  box-shadow: 0 0 0 1px #757575;
  border-radius: 0.9375rem;
  cursor: pointer;
  height: 1.5625rem;
  width: 1.5625rem;
}
[type=range]::-ms-fill-lower {
  background: #aeb0b5;
  border: 1px solid #757575;
  border-radius: 1.25rem;
}
[type=range]::-ms-fill-upper {
  background: #aeb0b5;
  border: 1px solid #757575;
  border-radius: 1.25rem;
}

[type=file] {
  border: none;
  padding-left: 0;
}

.usa-date-of-birth { /* stylelint-disable-line */ }
.usa-date-of-birth label {
  margin-top: 0;
}
.usa-date-of-birth [type=number] {
  -moz-appearance: textfield;
}
.usa-date-of-birth [type=number]::-webkit-inner-spin-button {
  appearance: none;
}
.usa-date-of-birth [type=number]::-webkit-contacts-auto-fill-button {
  visibility: hidden;
  display: none !important; /* stylelint-disable-line declaration-no-important */
  pointer-events: none;
  height: 0;
  width: 0;
  margin: 0;
}

.usa-form-group-day,
.usa-form-group-month,
.usa-form-group-year {
  clear: none;
  float: left;
  margin-right: 0.9375rem;
  width: 3.125rem;
}

.usa-form-group-year {
  width: 4.375rem;
}

/*
  Original: @import "~uswds/src/stylesheets/elements/labels";
  ***THIS IS USWDS v1***
*/
.usa-label, .usa-label-big {
  background-color: #565c65;
  border-radius: 2px;
  color: #ffffff;
  font-size: 0.9375rem;
  margin-right: 0.3125rem;
  padding: 0.0625rem 0.4375rem;
  text-transform: uppercase;
}
.usa-label:only-of-type, .usa-label-big:only-of-type {
  margin-right: 0;
}

.usa-label-big {
  font-size: 1rem;
  padding-left: 0.5625rem;
  padding-right: 0.5625rem;
}

/*
  Original: @import "~uswds/src/stylesheets/elements/labels";
  ***THIS IS USWDS v1***
*/
ul,
ol {
  margin-top: 1em;
  margin-bottom: 1em;
  padding-left: 1.94em;
}

li {
  line-height: 1.5;
  margin-bottom: 0.5em;
}
li:last-child {
  margin-bottom: 0;
}

.usa-unstyled-list {
  margin-top: 0;
  margin-bottom: 0;
  list-style-type: none;
  padding-left: 0;
}
.usa-unstyled-list > li {
  margin-bottom: 0;
}

/*
  Original: @import "~uswds/src/stylesheets/elements/table";
  ***THIS IS USWDS v1***
*/
table {
  border-spacing: 0;
  margin: 2em 0;
}

thead th {
  font-weight: 700;
}
thead th,
thead td {
  background-color: #f0f0f0;
}

th {
  text-align: left;
}

th,
td {
  background-color: #ffffff;
  border: 1px solid #565c65;
  font-weight: 400;
  padding: 0.625rem 0.9375rem;
}

.usa-table-borderless thead th {
  background-color: transparent;
  border-top: 0;
}
.usa-table-borderless th,
.usa-table-borderless td {
  border-left: 0;
  border-right: 0;
}
.usa-table-borderless th:first-child {
  padding-left: 0;
}

caption {
  font-size: 0.9375rem;
  font-weight: 700;
  font-family: Bitter, Georgia, Cambria, "Times New Roman", Times, serif;
  margin-bottom: 0.75rem;
  text-align: left;
}

/*
  Original: @import "~uswds/src/stylesheets/elements/typography";
  ***THIS IS USWDS v1***
*/
html {
  font-family: "Source Sans Pro", "Helvetica Neue", Helvetica, Roboto, Arial, sans-serif;
  font-size: 10px;
}

body {
  font-size: 16px;
}

p {
  line-height: 1.5;
  margin-bottom: 1em;
  margin-top: 1em;
}

a {
  color: #005ea2;
  text-decoration: underline;
}
a:hover, a:active {
  color: #1a4480;
}
a:focus {
  outline: 2px dotted #aeb0b5;
  outline-offset: 3px;
}
a:visited {
  color: #54278f;
}

.usa-external_link::after {
  background: url("./img/external-link.png") no-repeat 0 0;
  background: url("./img/external-link.svg") no-repeat 0 0;
  background-size: 100%;
  content: "";
  display: inline-block;
  height: 0.65em;
  margin-bottom: -1px;
  margin-left: 4px;
  width: 0.65em;
}
.usa-external_link:hover::after {
  background-image: url("./img/external-link-hover.png");
  background-image: url("./img/external-link-hover.svg");
}

.usa-external_link-alt::after {
  background: url("./img/external-link-alt.png") no-repeat 0 0;
  background: url("./img/external-link-alt.svg") no-repeat 0 0;
  background-size: 100%;
  content: "";
  display: inline-block;
  height: 0.65em;
  margin-bottom: -1px;
  margin-left: 4px;
  width: 0.65em;
}
.usa-external_link-alt:hover::after {
  background-image: url("./img/external-link-alt-hover.png");
  background-image: url("./img/external-link-alt-hover.svg");
}

h1,
h2,
h3,
h4,
h5,
h6 {
  clear: both;
  font-family: Bitter, Georgia, Cambria, "Times New Roman", Times, serif;
  line-height: 1.3;
  margin-bottom: 0.5em;
  margin-top: 1.5em;
}

h1 {
  font-size: 2.5rem;
  font-weight: 700;
}

h2 {
  font-size: 1.875rem;
  font-weight: 700;
}

h3 {
  font-size: 1.25rem;
  font-weight: 700;
}

h4 {
  font-size: 1.0625rem;
  font-weight: 700;
}

h5 {
  font-size: 0.9375rem;
  font-weight: 700;
}

h6 {
  font-size: 0.8125rem;
  font-weight: 400;
  line-height: 1.5;
  text-transform: uppercase;
  font-family: "Source Sans Pro", "Helvetica Neue", Helvetica, Roboto, Arial, sans-serif;
}

cite,
var,
address,
dfn {
  font-style: normal;
}

.usa-content p,
.usa-content ul:not(.usa-accordion):not(.usa-accordion-bordered),
.usa-content ol:not(.usa-accordion):not(.usa-accordion-bordered) {
  max-width: 43.75rem;
}

.usa-content-list {
  max-width: 43.75rem;
}

.usa-sans p,
.usa-sans a,
.usa-sans li,
.usa-sans span {
  font-family: "Source Sans Pro", "Helvetica Neue", Helvetica, Roboto, Arial, sans-serif;
}
.usa-sans a {
  border-bottom: none;
  font-weight: 700;
}

.usa-serif p,
.usa-serif a,
.usa-serif li,
.usa-serif span {
  font-family: Bitter, Georgia, Cambria, "Times New Roman", Times, serif;
}

.usa-display {
  font-size: 1.25rem;
  font-weight: 700;
  margin-bottom: 0;
}
@media screen and (min-width: 481px) {
  .usa-display {
    font-size: 2.5rem;
    font-weight: 700;
  }
}
@media screen and (min-width: 768px) {
  .usa-display {
    font-size: 3.25rem;
    font-weight: 700;
  }
}

.usa-font-lead {
  font-family: Bitter, Georgia, Cambria, "Times New Roman", Times, serif;
  font-size: 1.25rem;
  font-weight: 400;
  line-height: 1.7;
  max-width: 48.125rem;
}

.usa-background-dark {
  background-color: #323a45;
}
.usa-background-dark p,
.usa-background-dark span {
  color: #ffffff;
}
.usa-background-dark a {
  color: #d6d7d9;
}
.usa-background-dark a:hover {
  color: #ffffff;
}

.usa-text-small {
  font-size: 0.8125rem;
  margin-top: 0;
}

.usa-section > :first-child,
.usa-grid > :first-child,
.usa-grid-full > :first-child {
  margin-top: 0;
}
.usa-section > :last-child,
.usa-grid > :last-child,
.usa-grid-full > :last-child {
  margin-bottom: 0;
}

.usa-width-one-whole:first-child > :first-child,
.usa-width-one-half:first-child > :first-child,
.usa-width-one-third:first-child > :first-child,
.usa-width-two-thirds:first-child > :first-child,
.usa-width-one-fourth:first-child > :first-child,
.usa-width-three-fourths:first-child > :first-child,
.usa-width-one-sixth:first-child > :first-child,
.usa-width-five-sixths:first-child > :first-child,
.usa-width-one-twelfth:first-child > :first-child {
  margin-top: 0;
}
@media screen and (min-width: 768px) {
  .usa-width-one-whole > :first-child,
  .usa-width-one-half > :first-child,
  .usa-width-one-third > :first-child,
  .usa-width-two-thirds > :first-child,
  .usa-width-one-fourth > :first-child,
  .usa-width-three-fourths > :first-child,
  .usa-width-one-sixth > :first-child,
  .usa-width-five-sixths > :first-child,
  .usa-width-one-twelfth > :first-child {
    margin-top: 0;
  }
}
.usa-width-one-whole:last-child > :last-child,
.usa-width-one-half:last-child > :last-child,
.usa-width-one-third:last-child > :last-child,
.usa-width-two-thirds:last-child > :last-child,
.usa-width-one-fourth:last-child > :last-child,
.usa-width-three-fourths:last-child > :last-child,
.usa-width-one-sixth:last-child > :last-child,
.usa-width-five-sixths:last-child > :last-child,
.usa-width-one-twelfth:last-child > :last-child {
  margin-bottom: 0;
}
@media screen and (min-width: 768px) {
  .usa-width-one-whole > :last-child,
  .usa-width-one-half > :last-child,
  .usa-width-one-third > :last-child,
  .usa-width-two-thirds > :last-child,
  .usa-width-one-fourth > :last-child,
  .usa-width-three-fourths > :last-child,
  .usa-width-one-sixth > :last-child,
  .usa-width-five-sixths > :last-child,
  .usa-width-one-twelfth > :last-child {
    margin-bottom: 0;
  }
}

/*
  Original: @import "~uswds/src/stylesheets/components/accordions";
  ***THIS IS USWDS v1***
*/
.usa-accordion,
.usa-accordion-bordered {
  margin-top: 0;
  margin-bottom: 0;
  list-style-type: none;
  padding-left: 0;
  color: #212121;
  margin: 0;
  padding: 0;
  width: 100%;
}
.usa-accordion > li,
.usa-accordion-bordered > li {
  margin-bottom: 0;
}
.usa-accordion > ul li ul,
.usa-accordion-bordered > ul li ul {
  list-style: disc;
}
.usa-accordion > ul li ul > li > ul,
.usa-accordion-bordered > ul li ul > li > ul {
  list-style: circle;
}
.usa-accordion > ul li ul > li > ul > li > ul,
.usa-accordion-bordered > ul li ul > li > ul > li > ul {
  list-style: square;
}
.usa-accordion + .usa-accordion,
.usa-accordion + .usa-accordion-bordered,
.usa-accordion-bordered + .usa-accordion,
.usa-accordion-bordered + .usa-accordion-bordered {
  margin-top: 0.625rem;
}
.usa-accordion > ul,
.usa-accordion-bordered > ul {
  margin-top: 0;
  margin-bottom: 0;
  list-style-type: none;
  padding-left: 0;
  color: #212121;
  margin: 0;
  padding: 0;
  width: 100%;
}
.usa-accordion > ul > li,
.usa-accordion-bordered > ul > li {
  margin-bottom: 0;
}
.usa-accordion > ul > li,
.usa-accordion-bordered > ul > li {
  background-color: #f0f0f0;
  font-family: "Source Sans Pro", "Helvetica Neue", Helvetica, Roboto, Arial, sans-serif;
  list-style: none;
  margin-bottom: 0.3125rem;
  width: 100%;
}
.usa-accordion > ul button,
.usa-accordion-bordered > ul button {
  background-color: transparent;
  border: 0;
  border-radius: 0;
  font-weight: 400;
  margin: 0;
  padding: 0;
  text-align: left;
  -webkit-font-smoothing: auto;
  background-color: #f0f0f0;
  background-image: url("./img/minus.png");
  background-image: url("./img/minus.svg");
  background-position: right 1.25rem center;
  background-repeat: no-repeat;
  background-size: 0.9375rem;
  color: #212121;
  cursor: pointer;
  display: inline-block;
  font-family: "Source Sans Pro", "Helvetica Neue", Helvetica, Roboto, Arial, sans-serif;
  font-weight: 700;
  margin: 0;
  padding: 0.9375rem 3.4375rem 0.9375rem 1.25rem;
  width: 100%;
}
.usa-accordion > ul button:hover,
.usa-accordion-bordered > ul button:hover {
  background-color: transparent;
}
.usa-accordion > ul button:hover,
.usa-accordion-bordered > ul button:hover {
  background-color: #d6d7d9;
  color: #212121;
}
.usa-accordion > ul button h1,
.usa-accordion > ul button h2,
.usa-accordion > ul button h3,
.usa-accordion > ul button h4,
.usa-accordion > ul button h5,
.usa-accordion > ul button h6,
.usa-accordion-bordered > ul button h1,
.usa-accordion-bordered > ul button h2,
.usa-accordion-bordered > ul button h3,
.usa-accordion-bordered > ul button h4,
.usa-accordion-bordered > ul button h5,
.usa-accordion-bordered > ul button h6 {
  margin: 0;
}
.usa-accordion > ul [aria-expanded=false],
.usa-accordion-bordered > ul [aria-expanded=false] {
  background-image: url("./img/plus.png");
  background-image: url("./img/plus.svg");
  background-repeat: no-repeat;
  background-size: 0.9375rem;
}
.usa-accordion > li,
.usa-accordion-bordered > li {
  background-color: #f0f0f0;
  font-family: "Source Sans Pro", "Helvetica Neue", Helvetica, Roboto, Arial, sans-serif;
  list-style: none;
  margin-bottom: 0.3125rem;
  width: 100%;
}

.usa-accordion-bordered .usa-accordion-content {
  border-bottom: 3px solid #f0f0f0;
  border-left: 3px solid #f0f0f0;
  border-right: 3px solid #f0f0f0;
}

.usa-accordion-content {
  background-color: #ffffff;
  overflow: auto;
  padding: 0.9375rem 1.25rem;
}
.usa-accordion-content > *:first-child {
  margin-top: 0;
}
.usa-accordion-content > *:last-child {
  margin-bottom: 0;
}
.usa-accordion-content:not([aria-hidden]) {
  position: absolute;
  left: -999em;
}
.usa-accordion-content[aria-hidden=true] {
  display: none;
}

.usa-accordion-button {
  background-color: transparent;
  border: 0;
  border-radius: 0;
  font-weight: 400;
  margin: 0;
  padding: 0;
  text-align: left;
  -webkit-font-smoothing: auto;
  background-color: #f0f0f0;
  background-image: url("./img/minus.png");
  background-image: url("./img/minus.svg");
  background-position: right 1.25rem center;
  background-repeat: no-repeat;
  background-size: 0.9375rem;
  color: #212121;
  cursor: pointer;
  display: inline-block;
  font-family: "Source Sans Pro", "Helvetica Neue", Helvetica, Roboto, Arial, sans-serif;
  font-weight: 700;
  margin: 0;
  padding: 0.9375rem 3.4375rem 0.9375rem 1.25rem;
  width: 100%;
}
.usa-accordion-button:hover {
  background-color: transparent;
}
.usa-accordion-button:hover {
  background-color: #d6d7d9;
  color: #212121;
}
.usa-accordion-button h1,
.usa-accordion-button h2,
.usa-accordion-button h3,
.usa-accordion-button h4,
.usa-accordion-button h5,
.usa-accordion-button h6 {
  margin: 0;
}

.usa-accordion-button[aria-expanded=false] {
  background-image: url("./img/plus.png");
  background-image: url("./img/plus.svg");
  background-repeat: no-repeat;
  background-size: 0.9375rem;
}

/*
  Original: @import "~uswds/src/stylesheets/components/alerts";
  ***THIS IS USWDS v1***
*/
.usa-alert {
  background-color: #f1f1f1;
  background-position: 1.25rem 1.25rem;
  background-repeat: no-repeat;
  background-size: scale(5.2rem);
  padding-bottom: 0.875rem;
  padding-left: 1.875rem;
  padding-right: 1.25rem;
  padding-top: 1.25rem;
  position: relative;
}
.usa-alert::before {
  background-color: #8b8b8b;
  content: "";
  height: 100%;
  left: 0;
  position: absolute;
  top: 0;
  width: 0.625rem;
}
.usa-alert a {
  color: #1a4480;
}
.usa-alert a:focus, .usa-alert a:hover {
  color: #162e51;
}
.usa-alert ul {
  margin-bottom: 0;
  margin-top: 0.625rem;
  padding-left: 0.625rem;
}

.usa-alert-slim {
  background-position: 1.25rem 0.625rem;
  padding-bottom: 0.625rem;
  padding-top: 0.625rem;
}
.usa-alert-slim .usa-alert-text:only-child {
  margin-bottom: 0.3125rem;
  padding-top: 0.3125rem;
}

.usa-alert-icon {
  display: table-cell;
  padding-right: 0.625rem;
}

.usa-alert-body {
  display: table-cell;
  vertical-align: top;
}

.usa-alert-heading {
  margin-top: 0;
  margin-bottom: 0;
}

.usa-alert-text {
  font-family: "Source Sans Pro", "Helvetica Neue", Helvetica, Roboto, Arial, sans-serif;
  margin-bottom: 0;
  margin-top: 0;
}

.usa-alert-text:only-child {
  margin-bottom: 0.625rem;
  padding-top: 0.3125rem;
}

.usa-alert-success {
  background-color: #ecf3ec;
  background-image: url("./img/alerts/success.png");
  background-image: url("./img/alerts/success.svg");
}
.usa-alert-success::before {
  background-color: #008817;
}
.usa-alert-success .usa-alert-body {
  padding-left: 3.125rem;
}

.usa-alert-warning {
  background-color: #fef0c8;
  background-image: url("./img/alerts/warning.png");
  background-image: url("./img/alerts/warning.svg");
}
.usa-alert-warning::before {
  background-color: #ffbe2e;
}
.usa-alert-warning .usa-alert-body {
  padding-left: 3.125rem;
}

.usa-alert-error {
  background-color: #f8dfe2;
  background-image: url("./img/alerts/error.png");
  background-image: url("./img/alerts/error.svg");
}
.usa-alert-error::before {
  background-color: #d83933;
}
.usa-alert-error .usa-alert-body {
  padding-left: 3.125rem;
}

.usa-alert-info {
  background-color: #e1f3f8;
  background-image: url("./img/alerts/info.png");
  background-image: url("./img/alerts/info.svg");
}
.usa-alert-info::before {
  background-color: #00bde3;
}
.usa-alert-info .usa-alert-body {
  padding-left: 3.125rem;
}

.usa-alert-no_icon {
  background-image: none;
}

.usa-alert-paragraph {
  width: 43.75rem;
}

.usa-alert {
  margin-top: 1.5em;
}

/*
  Original: @import "~uswds/src/stylesheets/components/banner";
  ***THIS IS USWDS v1***
*/
.usa-banner {
  background-color: #f1f1f1;
  padding-bottom: 0.4375rem;
}
@media screen and (min-width: 481px) {
  .usa-banner {
    font-size: 0.8125rem;
    padding-bottom: 0;
  }
}

.usa-banner-content {
  padding-right: 0.9375rem;
  padding-bottom: 3px;
  padding-left: 0.9375rem;
  background-color: transparent;
  font-size: 0.9375rem;
  padding-top: 1.25rem;
  width: 100%;
}
@media screen and (min-width: 768px) {
  .usa-banner-content {
    padding-bottom: 23px;
    padding-top: 40px;
  }
}
@media screen and (min-width: 951px) {
  .usa-banner-content {
    padding-right: 1.875rem;
    padding-left: 1.875rem;
  }
}
.usa-banner-content p:first-child {
  margin-top: 0.625rem;
}
@media screen and (min-width: 768px) {
  .usa-banner-content p:first-child {
    margin-top: 0;
  }
}

.usa-banner-inner {
  max-width: 1040px;
  margin-left: auto;
  margin-right: auto;
  padding-right: 0.9375rem;
  padding-left: 0.9375rem;
}
.usa-banner-inner::after {
  clear: both;
  content: "";
  display: table;
}
@media screen and (min-width: 951px) {
  .usa-banner-inner {
    padding-right: 1.875rem;
    padding-left: 1.875rem;
  }
}

.usa-banner-header {
  padding-top: 0.34375rem;
  padding-bottom: 0.34375rem;
  font-size: 0.75rem;
  font-weight: 400;
}
@media screen and (min-width: 481px) {
  .usa-banner-header {
    padding-top: 0;
    padding-bottom: 0;
  }
}
.usa-banner-header p {
  margin-top: 0;
  margin-bottom: 0;
  display: inline;
  overflow: hidden;
  vertical-align: middle;
}
@media screen and (min-width: 481px) {
  .usa-banner-header p {
    margin-top: 2px;
    margin-bottom: 2px;
    display: inline-block;
  }
}
.usa-banner-header img {
  float: left;
  margin-right: 0.625rem;
  margin-top: 1px;
  width: 1.5rem;
}
@media screen and (min-width: 481px) {
  .usa-banner-header img {
    margin-right: 7px;
    width: 20px;
  }
}

.usa-banner-header-expanded {
  align-items: center;
  border-bottom: 1px solid #aeb0b5;
  display: flex;
  font-size: 0.9375rem;
  min-height: 3.5rem;
  padding-right: 1.875rem;
}
@media screen and (min-width: 481px) {
  .usa-banner-header-expanded {
    border-bottom: none;
    display: block;
    font-size: 0.75rem;
    font-weight: 400;
    min-height: 0;
    padding-right: 0;
  }
}
.usa-banner-header-expanded > .usa-banner-inner {
  margin-left: 0;
}
@media screen and (min-width: 481px) {
  .usa-banner-header-expanded > .usa-banner-inner {
    margin-left: auto;
  }
}
.usa-banner-header-expanded img {
  margin-right: 1.5rem;
}
@media screen and (min-width: 481px) {
  .usa-banner-header-expanded img {
    margin-right: 0.4375rem;
  }
}
.usa-banner-header-expanded p {
  line-height: 1.3;
  vertical-align: top;
}
@media screen and (min-width: 481px) {
  .usa-banner-header-expanded p {
    line-height: 1.5;
    vertical-align: middle;
  }
}

.usa-banner-button {
  background-color: transparent;
  border: 0;
  border-radius: 0;
  font-weight: 400;
  margin: 0;
  padding: 0;
  text-align: left;
  -webkit-font-smoothing: auto;
  padding-top: 13px;
  padding-left: 48px;
  background-position-x: right;
  color: #005ea2;
  display: block;
  font-size: 12px;
  height: 2.6875rem;
  left: 0;
  position: absolute;
  text-decoration: underline;
  top: 0;
  width: 100%;
}
.usa-banner-button:hover {
  background-color: transparent;
}
@media screen and (min-width: 481px) {
  .usa-banner-button {
    padding-top: 0;
    padding-left: 0;
    /* stylelint-disable declaration-block-no-ignored-properties */
    display: inline;
    height: auto;
    margin-left: 3px;
    position: relative;
    vertical-align: middle;
    width: auto;
    /* stylelint-enable */
  }
}
.usa-banner-button:hover {
  color: #1a4480;
  text-decoration: underline;
}
.usa-banner-button[aria-expanded=false] {
  background-image: none;
}
.usa-banner-button[aria-expanded=false]::after {
  background-image: url("./img/angle-arrow-down-primary.png");
  background-image: url("./img/angle-arrow-down-primary.svg");
  background-size: 100%;
  content: "";
  display: inline-block;
  height: 0.625rem;
  width: 0.625rem;
  /* stylelint-disable block-closing-brace-newline-after, at-rule-empty-line-before */
  margin-left: 0;
  /* stylelint-enable */
}
.usa-banner-button[aria-expanded=false]:hover::after {
  background-image: url("./img/angle-arrow-down-primary-hover.png");
  background-image: url("./img/angle-arrow-down-primary-hover.svg");
}
.usa-banner-button[aria-expanded=false]::after {
  background-position-y: 1px;
}
.usa-banner-button[aria-expanded=true] {
  background-image: none;
  height: 3.5rem;
}
.usa-banner-button[aria-expanded=true]::after {
  background-image: url("./img/close.png");
  background-image: url("./img/close.svg");
  background-size: 100%;
  content: "";
  display: inline-block;
  height: 0.8125rem;
  width: 0.8125rem;
  /* stylelint-disable block-closing-brace-newline-after, at-rule-empty-line-before */
  margin-left: 0;
  /* stylelint-enable */
}
@media screen and (min-width: 481px) {
  .usa-banner-button[aria-expanded=true] {
    height: initial;
    padding: 0;
    position: relative;
  }
  .usa-banner-button[aria-expanded=true]::after {
    background-image: url("./img/angle-arrow-up-primary.png");
    background-image: url("./img/angle-arrow-up-primary.svg");
    background-size: 100%;
    content: "";
    display: inline-block;
    height: 0.625rem;
    width: 0.625rem;
    /* stylelint-disable block-closing-brace-newline-after, at-rule-empty-line-before */
    margin-left: 0;
    /* stylelint-enable */
  }
  .usa-banner-button[aria-expanded=true]:hover::after {
    background-image: url("./img/angle-arrow-up-primary-hover.png");
    background-image: url("./img/angle-arrow-up-primary-hover.svg");
  }
  .usa-banner-button[aria-expanded=true]::after {
    background-position-y: 1px;
  }
}
.usa-banner-button[aria-expanded=true]::after {
  position: absolute;
  right: 0.9375rem;
  top: 1.34375rem;
}
@media screen and (min-width: 481px) {
  .usa-banner-button[aria-expanded=true]::after {
    position: static;
  }
}
.usa-banner-button[aria-expanded=true] .usa-banner-button-text {
  display: none;
}
@media screen and (min-width: 481px) {
  .usa-banner-button[aria-expanded=true] .usa-banner-button-text {
    display: inline;
  }
}

.usa-banner-icon {
  width: 38px;
}

/*
  Original: @import "~uswds/src/stylesheets/components/forms";
  ***THIS IS USWDS v1***
*/
@media screen and (min-width: 768px) {
  [type=submit] {
    margin-top: calc(3rem - 0.2em);
  }
}

fieldset {
  border: none;
  margin: 0;
  padding: 0;
}

@media screen and (min-width: 768px) {
  .usa-form {
    max-width: 20rem;
  }
}

@media screen and (min-width: 768px) {
  .usa-input-tiny {
    max-width: 3.75rem;
  }
}

@media screen and (min-width: 768px) {
  .usa-input-medium {
    max-width: 7.5rem;
  }
}

.usa-form-note {
  float: right;
  font-family: "Source Sans Pro", "Helvetica Neue", Helvetica, Roboto, Arial, sans-serif;
  font-size: 0.9375rem;
  margin: 0 0 scale(1.5rem);
}
.usa-form-note + * {
  clear: both;
}

@media screen and (min-width: 768px) {
  .usa-form-large {
    max-width: 28.75rem;
  }
}

@media screen and (min-width: 768px) {
  .usa-input-grid {
    padding-right: 5%;
  }
}

@media screen and (min-width: 768px) {
  .usa-input-grid:last-of-type {
    padding-right: 0;
  }
}

@media screen and (min-width: 768px) {
  .usa-input-grid-small {
    float: left;
    width: 35%;
  }
}
.usa-input-grid-small input {
  margin-bottom: 1.875rem;
}
.usa-input-grid-small select {
  margin-bottom: 1.875rem;
}

@media screen and (min-width: 768px) {
  .usa-input-grid-medium {
    float: left;
    width: 65%;
  }
}
.usa-input-grid-medium input {
  margin-bottom: 1.875rem;
}
.usa-input-grid-medium select {
  margin-bottom: 1.875rem;
}

@media screen and (min-width: 768px) {
  .usa-input-grid-large {
    float: left;
    width: 100%;
  }
}
.usa-input-grid-large input {
  margin-bottom: 1.875rem;
}
.usa-input-grid-large select {
  margin-bottom: 1.875rem;
}

.usa-additional_text {
  font-weight: normal;
}

.usa-checklist {
  list-style: none;
  margin-left: 0;
  padding-left: 0;
}
.usa-checklist li {
  display: inline-block;
  list-style: none;
  margin-bottom: 0;
  margin-top: 0;
  padding-left: 3em;
  text-indent: -2em;
}
.usa-checklist li::before {
  content: " ";
  display: inline-block;
  height: 0.8em;
  margin-right: 0.2em;
  width: 1.8em;
}

.usa-checklist-checked::before {
  background-image: url("./img/correct9.png");
  background-image: url("./img/correct9.svg");
  background-position: 100%;
  background-repeat: no-repeat;
  background-size: 100%;
}

/*
  Original: @import "~uswds/src/stylesheets/components/media-block";
  ***THIS IS USWDS v1***
*/
.usa-media_block-img {
  float: left;
  margin-right: 0.625rem;
}

.usa-media_block-body {
  overflow: hidden;
}

/*
  Original: @import "~uswds/src/stylesheets/components/side-nav";
  ***THIS IS USWDS v1***
*/
.usa-sidenav-list {
  margin-top: 0;
  margin-bottom: 0;
  list-style-type: none;
  padding-left: 0;
  border-bottom: 1px solid;
  border-top: 1px solid;
}
.usa-sidenav-list > li {
  margin-bottom: 0;
}
.usa-sidenav-list > li {
  background-color: transparent;
  border-top: 1px solid #5b616b;
  font-size: 1.0625rem;
}
.usa-sidenav-list > li:first-child {
  border-top: none;
}
.usa-sidenav-list a {
  border: none;
  color: #212121;
  display: block;
  font-family: "Source Sans Pro", "Helvetica Neue", Helvetica, Roboto, Arial, sans-serif;
  line-height: 1.3;
  padding: 0.53125rem 0.625rem 0.53125rem 0.5859375rem;
  text-decoration: none;
}
.usa-sidenav-list a:hover {
  background-color: #f1f1f1;
  color: #005ea2;
  text-decoration: none;
}
.usa-sidenav-list a:focus {
  outline-offset: 0;
  position: relative;
  z-index: 1;
}
.usa-sidenav-list a.usa-current { /* stylelint-disable-line selector-no-qualifying-type */
  border-left: 0.25rem solid #005ea2;
  color: #005ea2;
  font-weight: 700;
  padding-left: 0.6875rem;
}
@media screen and (min-width: 1201px) {
  .usa-sidenav-list {
    border-bottom: none;
    border-top: none;
  }
}
.usa-grid .usa-sidenav-list {
  margin-right: -0.9375rem;
  margin-left: -0.9375rem;
}
@media screen and (min-width: 768px) {
  .usa-grid .usa-sidenav-list {
    margin-right: 0;
    margin-left: 0;
  }
}

.usa-sidenav-sub_list {
  margin-top: 0;
  margin-bottom: 0;
  list-style-type: none;
  padding-left: 0;
  margin: 0;
  width: 100%;
}
.usa-sidenav-sub_list > li {
  margin-bottom: 0;
}
.usa-sidenav-sub_list li {
  border: none;
  font-size: 0.9375rem;
}
.usa-sidenav-sub_list a {
  padding-left: 1.75rem;
  line-height: 1.3;
}
.usa-sidenav-sub_list a:hover, .usa-sidenav-sub_list a.usa-current { /* stylelint-disable-line selector-no-qualifying-type */
  border: none;
  padding-left: 1.75rem;
}
.usa-sidenav-sub_list .usa-sidenav-sub_list a {
  padding-left: 2.375rem;
}
.usa-sidenav-sub_list .usa-sidenav-sub_list a:focus {
  outline-offset: 0;
}
.usa-sidenav-sub_list .usa-sidenav-sub_list a:hover {
  padding-left: 2.375rem;
}

.usa-layout-docs-sidenav {
  padding-top: 1.5rem;
}
@media screen and (min-width: 1201px) {
  .usa-layout-docs-sidenav {
    padding-top: 0;
  }
}

/*
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
========================================
========================================
========================================
----------------------------------------
GENERAL SETTINGS
----------------------------------------
Read more about settings and
USWDS style tokens in the documentation:
https://designsystem.digital.gov/design-tokens
----------------------------------------
*/
/*
----------------------------------------
Image path
----------------------------------------
Relative image file path
----------------------------------------
*/
/*
----------------------------------------
Show compile warnings
----------------------------------------
Show Sass warnings when functions and
mixins use non-standard tokens.
AND
Show updates and notifications.
----------------------------------------
*/
/*
----------------------------------------
Namespace
----------------------------------------
*/
/*
----------------------------------------
Prefix separator
----------------------------------------
Set the character the separates
responsive and state prefixes from the
main class name.
The default (":") needs to be preceded
by two backslashes to be properly
escaped.
----------------------------------------
*/
/*
----------------------------------------
Layout grid
----------------------------------------
Should the layout grid classes output
with !important
----------------------------------------
*/
/*
----------------------------------------
Border box sizing
----------------------------------------
When set to true, sets the box-sizing
property of all site elements to
`border-box`.
----------------------------------------
*/
/*
----------------------------------------
Focus styles
----------------------------------------
*/
/*
----------------------------------------
Icons
----------------------------------------
*/
/*
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
========================================
========================================
========================================
----------------------------------------
TYPOGRAPHY SETTINGS
----------------------------------------
Read more about settings and
USWDS typography tokens in the documentation:
https://designsystem.digital.gov/design-tokens/typesetting/overview/
----------------------------------------
*/
/*
----------------------------------------
Root font size
----------------------------------------
Setting $theme-respect-user-font-size to
true sets the root font size to 100% and
uses ems for media queries
----------------------------------------
$theme-root-font-size only applies when
$theme-respect-user-font-size is set to
false.

This will set the root font size
as a specific px value and use px values
for media queries.

Accepts true or false
----------------------------------------
*/
/*
----------------------------------------
Global styles
----------------------------------------
Adds basic styling for the following
unclassed elements:

- paragraph: paragraph text
- link: links
- content: paragraph text, links,
  headings, lists, and tables
----------------------------------------
*/
/*
----------------------------------------
Broswer compatibility mode
----------------------------------------
When true, outputs woff and ttf font 
formats in addition to woff2
----------------------------------------
*/
/*
----------------------------------------
Font path
----------------------------------------
Relative font file path
----------------------------------------
*/
/*
----------------------------------------
Custom typeface tokens
----------------------------------------
Add a new custom typeface token if
your project uses a typeface not already
defined by USWDS.
----------------------------------------
USWDS defines the following tokens
by default:
----------------------------------------
'georgia'
'helvetica'
'merriweather'
'open-sans'
'public-sans'
'roboto-mono'
'source-sans-pro'
'system'
'tahoma'
'verdana'
----------------------------------------
Add as many new tokens as you have
custom typefaces. Reference your new
token(s) in the type-based font settings
using the quoted name of the token.

For example:

$theme-font-type-cond: 'example-font-token';

display-name:
The display name of your font

cap-height:
The height of a 500px `N` in Sketch
----------------------------------------
You should change `example-[style]-token`
names to something more descriptive.
----------------------------------------
*/
/*
----------------------------------------
Type-based font settings
----------------------------------------
Set the type-based tokens for your
project from the following tokens,
or from any new font tokens you added in
$theme-typeface-tokens.
----------------------------------------
'georgia'
'helvetica'
'merriweather'
'open-sans'
'public-sans'
'roboto-mono'
'source-sans-pro'
'system'
'tahoma'
'verdana'
----------------------------------------
*/
/*
----------------------------------------
Custom font stacks
----------------------------------------
Add custom font stacks to any of the
type-based fonts. Any USWDS typeface
token already has a default stack.

Custom stacks don't need to include the
font's display name. It will
automatically appear at the start of
the stack.
----------------------------------------
Example:
$theme-font-type-sans: 'source-sans-pro';
$theme-font-sans-custom-stack: "Helvetica Neue", Helvetica, Arial, sans;

Output:
font-family: "Source Sans Pro", "Helvetica Neue", Helvetica, Arial, sans;
----------------------------------------
*/
/*
----------------------------------------
Add any custom font source files
----------------------------------------
If you want USWDS to generate additional
@font-face declarations, add your font
data below, following the example that
follows.
----------------------------------------
USWDS automatically generates @font-face
declarations for the following

'merriweather'
'public-sans'
'roboto-mono'
'source-sans-pro'

These typefaces not require custom
source files.
----------------------------------------
EXAMPLE

- dir:
  Directory relative to $theme-font-path
- This directory should include fonts saved as
  .woff2
  ExampleSerif-Normal.woff2

$theme-font-serif-custom-src: (
  dir: 'custom/example-serif',
  roman: (
    100: false,
    200: false,
    300: 'ExampleSerif-Light',
    400: 'ExampleSerif-Normal',
    500: false,
    600: false,
    700: 'ExampleSerif-Bold',
    800: false,
    900: false,
  ),
  italic: (
    100: false,
    200: false,
    300: 'ExampleSerif-LightItalic',
    400: 'ExampleSerif-Italic',
    500: false,
    600: false,
    700: 'ExampleSerif-BoldItalic',
    800: false,
    900: false,
  ),
);
----------------------------------------
*/
/*
----------------------------------------
Role-based font settings
----------------------------------------
Set the role-based tokens for your
project from the following font-type
tokens.
----------------------------------------
'cond'
'icon'
'lang'
'mono'
'sans'
'serif'
----------------------------------------
*/
/*
----------------------------------------
Type scale
----------------------------------------
Define your project's type scale using
values from the USWDS system type scale

1-20
----------------------------------------
*/
/*
----------------------------------------
Font weights
----------------------------------------
Assign weights 100-900
Or use `false` for unneeded weights.
----------------------------------------
*/
/*
----------------------------------------
General typography settings
----------------------------------------
Type scale tokens
----------------------------------------
micro:      10px
1:          12px
2:          13px
3:          14px
4:          15px
5:          16px
6:          17px
7:          18px
8:          20px
9:          22px
10:         24px
11:         28px
12:         32px
13:         36px
14:         40px
15:         48px
16:         56px
17:         64px
18:         80px
19:         120px
20:         140px
----------------------------------------
Line height tokens
----------------------------------------
1:    1
2:    1.15
3:    1.35
4:    1.5
5:    1.62
6:    1.75
----------------------------------------
Font role tokens
----------------------------------------
'ui'
'heading'
'body'
'code'
'alt'
----------------------------------------
Measure (max-width) tokens
----------------------------------------
1:       44ex
2:       60ex
3:       64ex
4:       68ex
5:       74ex
6:       88ex
none:    none
----------------------------------------
*/
/*
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
========================================
========================================
========================================
----------------------------------------
COLOR SETTINGS
----------------------------------------
Read more about settings and
USWDS color tokens in the documentation:
https://designsystem.digital.gov/design-tokens/color
----------------------------------------
*/
/*
----------------------------------------
Theme palette colors
----------------------------------------
*/
/*
----------------------------------------
State palette colors
----------------------------------------
*/
/*
----------------------------------------
General colors
----------------------------------------
*/
/*
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
========================================
========================================
========================================
----------------------------------------
COMPONENT SETTINGS
----------------------------------------
Read more about settings and
USWDS style tokens in the documentation:
https://designsystem.digital.gov/design-tokens
----------------------------------------
*/
/*
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
========================================
========================================
========================================
----------------------------------------
SPACING SETTINGS
----------------------------------------
Read more about settings and
USWDS spacing units tokens in the
documentation:
https://designsystem.digital.gov/design-tokens/spacing-units
----------------------------------------
*/
/*
----------------------------------------
Border radius
----------------------------------------
2px           2px
0.5           4px
1             8px
1.5           12px
2             16px
2.5           20px
3             24px
4             32px
5             40px
6             48px
7             56px
8             64px
9             72px
----------------------------------------
*/
/*
----------------------------------------
Column gap
----------------------------------------
2px         2px
0.5         4px
1           8px
2           16px
3           24px
4           32px
5           40px
6           48px
----------------------------------------
*/
/*
----------------------------------------
Grid container max-width
----------------------------------------
mobile
mobile-lg
tablet
tablet-lg
desktop
desktop-lg
widescreen
----------------------------------------
*/
/*
----------------------------------------
Site
----------------------------------------
*/
/*
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
* * * * * ==============================
========================================
========================================
========================================
----------------------------------------
UTILITIES SETTINGS
----------------------------------------
Read more about settings and
USWDS utilities in the documentation:
https://designsystem.digital.gov/utilities
----------------------------------------
*/
/*
----------------------------------------
Utility breakpoints
----------------------------------------
Which breakpoints does your project
need? Select as `true` any breakpoint
used by utilities or layout grid
----------------------------------------
*/
/*
----------------------------------------
Global colors
----------------------------------------
The following palettes will be added to
- background-color
- border-color
- color
- text-decoration-color
----------------------------------------
*/
/*
----------------------------------------
Settings
----------------------------------------
*/
/*
----------------------------------------
Values
----------------------------------------
*/
/*
----------------------------------------
append-important()
----------------------------------------
Append `!important` to a list
----------------------------------------
*/
/*
----------------------------------------
get-last()
----------------------------------------
Return the last item of a list,
Return null if the value is null
----------------------------------------
*/
/*
----------------------------------------
de-list()
----------------------------------------
Transform a one-element list or arglist
into that single element.
----------------------------------------
(1) => 1
((1)) => (1)
----------------------------------------
*/
/*
----------------------------------------
error-not-token()
----------------------------------------
Returns a common not-a-token error.
----------------------------------------
*/
/*
----------------------------------------
uswds-error()
----------------------------------------
Allow the system to pass an error as text
to test error states in unit testing
----------------------------------------
*/
/*
----------------------------------------
get-default()
----------------------------------------
Returns the default value from a map
of project defaults
get-default("bg-color")
> $theme-body-background-color
----------------------------------------
*/
/*
----------------------------------------
has-important()
----------------------------------------
Check to see if `!important` is
being passed in a mixin's props
----------------------------------------
*/
/*
----------------------------------------
map-collect()
----------------------------------------
Collect multiple maps into a single
large map
source: https://gist.github.com/bigglesrocks/d75091700f8f2be5abfe
----------------------------------------
*/
/*
----------------------------------------
map-deep-get()
----------------------------------------
@author Hugo Giraudel
@access public
@param {Map} $map - Map
@param {Arglist} $keys - Key chain
@return {*} - Desired value
----------------------------------------
*/
/*
----------------------------------------
multi-cat()
----------------------------------------
Concatenate two lists
----------------------------------------
*/
/*
----------------------------------------
remove()
----------------------------------------
Remove a value from a list
----------------------------------------
*/
/*
----------------------------------------
smart-quote()
----------------------------------------
Quotes strings
Inspects `px`, `xs`, and `xl` numbers
Leaves bools as is
----------------------------------------
*/
/*
----------------------------------------
str-replace()
----------------------------------------
Replace any substring with another
string
----------------------------------------
*/
/*
----------------------------------------
str-split()
----------------------------------------
Split a string at a given separator
and convert into a list of substrings
----------------------------------------
*/
/*
----------------------------------------
strip-unit()
----------------------------------------
Remove the unit of a length
@author Hugo Giraudel
@param {Number} $number - Number to remove unit from
@return {Number} - Unitless number
----------------------------------------
*/
/*
----------------------------------------
base-to-map()
@TODO: Deprecate and delete
----------------------------------------
Convert a single base to a USWDS
value map.

Candidate for deprecation if we remove
isReadable
----------------------------------------
*/
/*
----------------------------------------
to-number()
----------------------------------------
Casts a string into a number
----------------------------------------
@param {String | Number} $value - Value to be parsed
@return {Number}
----------------------------------------
*/
/*
----------------------------------------
unpack()
----------------------------------------
Create lists of single items from lists
of lists.
----------------------------------------
(1, (2.1, 2.2), 3) -->
(1, 2.1, 2.2, 3)
----------------------------------------
*/
/*
----------------------------------------
color()
----------------------------------------
Derive a color from a color shortcode
----------------------------------------
*/
/*
----------------------------------------
get-system-color()
----------------------------------------
Derive a system color from its
family, value, and vivid or a passed
variable that is, itself, a list
----------------------------------------
*/
/*
----------------------------------------
color()
----------------------------------------
Derive a color from a color shortcode
----------------------------------------
*/
/*
----------------------------------------
advanced-color()
----------------------------------------
Derive a color from a color triplet:
[family], [grade], [variant]
----------------------------------------
*/
/*
----------------------------------------
Luminance ranges
----------------------------------------
*/
/*
----------------------------------------
calculate-grade()
----------------------------------------
Derive the grade equivalent any color,
even non-token colors
----------------------------------------
*/
/*
----------------------------------------
color-token-assignment()
----------------------------------------
Get the system token equivalent of any
theme color token
----------------------------------------
*/
/*
----------------------------------------
is-system-color-token()
----------------------------------------
Return whether a token is a system
color token
----------------------------------------
*/
/*
----------------------------------------
color()
----------------------------------------
Derive a color from a color shortcode
----------------------------------------
*/
/*
----------------------------------------
color()
----------------------------------------
Derive a color from a color shortcode
----------------------------------------
*/
/*
----------------------------------------
set-theme-color()
----------------------------------------
Derive a color from a system color token
or a hex value
----------------------------------------
*/
/*
----------------------------------------
is-theme-color-token()
----------------------------------------
Return whether a token is a theme
color token
----------------------------------------
*/
/*
----------------------------------------
color-token-family()
----------------------------------------
Returns the family of a color token.
Returns: color-family
color-token-family("accent-warm-vivid")
> "accent-warm"
color-token-family("red-50v")
> "red"
color-token-variant(("red", 50, "vivid"))
> "red"
----------------------------------------
*/
/*
----------------------------------------
decompose()
----------------------------------------
Convert a color token into into a list
of form [family], [grade], [variant]
Vivid variants return "vivid" as the
variant.
If neither grade nor variant exists,
returns 'null'
----------------------------------------
*/
/*
----------------------------------------
color-token-family()
----------------------------------------
Returns the family of a color token.
Returns: color-family
color-token-family("accent-warm-vivid")
> "accent-warm"
color-token-family("red-50v")
> "red"
color-token-variant(("red", 50, "vivid"))
> "red"
----------------------------------------
*/
/*
----------------------------------------
color-token-grade()
----------------------------------------
Returns the grade of a USWDS color token.
Returns: color-grade
color-token-grade("accent-warm")
> "root"
color-token-grade("accent-warm-vivid")
> "root"
color-token-grade("accent-warm-darker")
> "darker"
color-token-grade("red-50v")
> 50
color-token-variant(("red", 50, "vivid"))
> 50
----------------------------------------
*/
/*
----------------------------------------
color-token-family()
----------------------------------------
Returns the family of a color token.
Returns: color-family
color-token-family("accent-warm-vivid")
> "accent-warm"
color-token-family("red-50v")
> "red"
color-token-variant(("red", 50, "vivid"))
> "red"
----------------------------------------
*/
/*
----------------------------------------
color()
----------------------------------------
Derive a color from a color shortcode
----------------------------------------
*/
/*
----------------------------------------
is-color-token()
----------------------------------------
Returns whether a given string is a
USWDS color token.
----------------------------------------
*/
/*
----------------------------------------
pow()
----------------------------------------
Raises a unitless number to the power
of another unitless number
Includes helper functions
----------------------------------------
*/
/*
----------------------------------------
Helper functions
----------------------------------------
*/
/* factorial()
----------------------------------------
*/
/* summation()
----------------------------------------
*/
/* exp-maclaurin()
----------------------------------------
*/
/* ln()
----------------------------------------
*/
/*
----------------------------------------
color-token-type()
----------------------------------------
Returns the type of a color token.
Returns: "system" | "theme"
----------------------------------------
*/
/*
----------------------------------------
color-token-variant()
----------------------------------------
Returns the variant of color token.
Returns: "vivid" | false
color-token-variant("accent-warm")
> false
color-token-variant("accent-warm-vivid")
> "vivid"
color-token-variant("red-50v")
> "vivid"
color-token-variant(("red", 50, "vivid"))
> "vivid"
----------------------------------------
*/
/*
----------------------------------------
magic-number()
----------------------------------------
Returns the magic number of two color
grades. Takes numbers or color tokens.
magic-number(50, 10)
return: 40
magic-number("red-50", "red-10")
return: 40
----------------------------------------
*/
/*
----------------------------------------
is-accessible-magic-number()
----------------------------------------
Returns whether two grades achieve
specified target color contrast
Returns: true | false
is-accessible-magic-number(10, 50, "AA")
> false
is-accessible-magic-number(10, 60, "AA")
> true
----------------------------------------
*/
/*
----------------------------------------
wcag-magic-number()
----------------------------------------
Returns the magic number of a specific
wcag grade:
"AA"
"AA-Large"
"AAA"
wcag-magic-number("AA")
> 50
----------------------------------------
*/
/*
----------------------------------------
get-link-tokens-from-bg()
----------------------------------------
Get accessible link colors for a given
background color
returns: link-token, hover-token
get-link-tokens-from-bg(
  "black",
  "red-60",
  "red-10",
  "AA")
> "red-10", "red-5"
get-link-tokens-from-bg(
  "black",
  "red-60v",
  "red-10v",
  "AA-large")
> "red-60v", "red-50v"
get-link-tokens-from-bg(
  "black",
  "red-5v",
  "red-60v",
  "AA")
> "red-5v", "white"
get-link-tokens-from-bg(
  "black",
  "white",
  "red-60v",
  "AA")
> "white", "white"
----------------------------------------
*/
/*
----------------------------------------
next-token()
----------------------------------------
Returns next "darker" or "lighter" color
token of the same token type and variant.
Returns: color-token | false
next-token("accent-warm", "lighter")
> "accent-warm-light"
next-token("gray-10", "lighter")
> "gray-5"
next-token("gray-5", "lighter")
> "white"
next-token("white", "lighter")
> false
next-token("red-50v", "darker")
> "red-60v"
next-token("red-50", "darker")
> "red-60"
next-token("red-80v", "darker")
> "red-90"
next-token("red-90", "darker")
> "black"
next-token("white", "darker")
> "gray-5"
next-token("black", "lighter")
> "gray-90"
----------------------------------------
*/
/*
----------------------------------------
color()
----------------------------------------
Derive a color from a color shortcode
----------------------------------------
*/
/*
----------------------------------------
test-colors()
----------------------------------------
Check to see if all system colors
fall between the proper relative
luminance range for their grade.
Has a couple quirks, as the luminance()
function returns slightly different
results than expected.
----------------------------------------
*/
/*
----------------------------------------
Line height
----------------------------------------
*/
/*
----------------------------------------
Measure
----------------------------------------
*/
/*
----------------------------------------
spacing-multiple()
----------------------------------------
Converts a spacing unit multiple into
the desired final units (currently rem)
----------------------------------------
*/
/*
----------------------------------------
cap-height()
----------------------------------------
Get the cap height of a valid typeface
----------------------------------------
*/
/*
----------------------------------------
validate-typeface-token()
----------------------------------------
Check to see if a typeface-token exists.
Throw an error if a passed token does
not exist in the typeface-token map.
----------------------------------------
*/
/*
----------------------------------------
convert-to-font-type()
----------------------------------------
Converts a font-role token into a
font-type token. Leaves font-type tokens
unchanged.
----------------------------------------
*/
/*
----------------------------------------
font-sources()
----------------------------------------
Outputs a list of font sources used in
a @font-face declaration.

$theme-font-browser-compatibility: true - output woff2, woff, ttf
$theme-font-browser-compatibility: false - output woff2

@param stem: string - [font path]/[custom-src.dir]/[custom-src.[style].[weight]]
@output: string

filetypes must be one of the filetypes set in variables/$project-font-face-filetypes (woff, woff2, ttf)
----------------------------------------
*/
/*
----------------------------------------
Project fonts
----------------------------------------
Collects font settings in a map for
looping.
----------------------------------------
*/
/*
----------------------------------------
get-font-stack()
----------------------------------------
Get a font stack from a style- or
role-based font token.
----------------------------------------
*/
/*
----------------------------------------
get-typeface-token()
----------------------------------------
Get a typeface token from a font-type or
font-role token.
----------------------------------------
*/
/*
----------------------------------------
px-to-rem()
----------------------------------------
Converts a value in px to a value in rem
----------------------------------------
*/
/*
----------------------------------------
rem-to-px()
----------------------------------------
Converts a value in rem to a value in px
----------------------------------------
*/
/*
----------------------------------------
rem-to-user-em()
----------------------------------------
Converts a value in rem to a value in
[user-settings] em for use in media
queries
----------------------------------------
*/
/*
----------------------------------------
units()
----------------------------------------
Converts a spacing unit into
the desired final units (currently rem)
----------------------------------------
*/
/*
----------------------------------------
number-to-token()
----------------------------------------
Converts an integer or numeric value
into a system value

Ex: 0.5   --> '05'
    -1px  --> 'neg-1px'
----------------------------------------
*/
/*
----------------------------------------
normalize-type-scale()
----------------------------------------
Normalizes a specific face's optical size
to a set target
----------------------------------------
*/
/*
----------------------------------------
system-type-scale()
----------------------------------------
Get a value from the system type scale
----------------------------------------
*/
/*
----------------------------------------
columns()
----------------------------------------
outputs a grid-col number based on
the number of desired columns in the
12-column grid

Ex: columns(2) --> 6
    grid-col(columns(2))
----------------------------------------
*/
/*
----------------------------------------
USWDS Properties
----------------------------------------
*/
/*
----------------------------------------
get-uswds-value()
----------------------------------------
Finds and outputs a value from the
USWDS standard values.

Used to build other standard utility
functions and mixins.
----------------------------------------
*/
/*
----------------------------------------
get-standard-values()
----------------------------------------
Gets a map of USWDS standard values
for a property
----------------------------------------
*/
/*
----------------------------------------
ns()
----------------------------------------
Add a namesspace of $type if that
namespace is set to output
----------------------------------------
*/
/*
----------------------------------------
border-radius()
----------------------------------------
Get a border-radius from the system
border-radii
----------------------------------------
*/
/*
----------------------------------------
font-weight()
fw()
----------------------------------------
Get a font-weight value from the
system font-weight
----------------------------------------
*/
/*
----------------------------------------
feature()
----------------------------------------
Gets a valid USWDS font feature setting
----------------------------------------
*/
/*
----------------------------------------
flex()
----------------------------------------
Gets a valid USWDS flex value
----------------------------------------
*/
/*
----------------------------------------
font-family()
family()
----------------------------------------
Get a font-family stack from a
role-based or type-based font family
----------------------------------------
*/
/*
----------------------------------------
letter-spacing()
ls()
----------------------------------------
Get a letter-spacing value from the
system letter-spacing
----------------------------------------
*/
/*
----------------------------------------
measure()
----------------------------------------
Gets a valid USWDS reading line length
----------------------------------------
*/
/*
----------------------------------------
opacity()
----------------------------------------
Get an opacity from the system
opacities
----------------------------------------
*/
/*
----------------------------------------
order()
----------------------------------------
Get an order value from the
system orders
----------------------------------------
*/
/*
----------------------------------------
radius()
----------------------------------------
Get a border-radius value from the
system letter-spacing
----------------------------------------
*/
/*
----------------------------------------
font-size()
----------------------------------------
Get type scale value from a [family] and
[scale]
----------------------------------------
*/
/*
----------------------------------------
z-index()
z()
----------------------------------------
Get a z-index value from the
system z-index
----------------------------------------
*/
/*
----------------------------------------
utility-font()
----------------------------------------
Get a normalized font-size in rem from
a family and a type size in either
system scale or project scale
----------------------------------------
Not the public-facing function.
Used for building the utilities and
withholds certain errors.
----------------------------------------
*/
/*
----------------------------------------
family()
----------------------------------------
Get a font-family stack
----------------------------------------
*/
/*
----------------------------------------
size()
----------------------------------------
Get a normalized font-size in rem from
a family and a type size in either
system scale or project scale
----------------------------------------
*/
/*
----------------------------------------
font()
----------------------------------------
Get a font-family stack
AND
Get a normalized font-size in rem from
a family and a type size in either
system scale or project scale
----------------------------------------
*/
/*
----------------------------------------
typeset()
----------------------------------------
Sets:
- family
- size
- line-height
----------------------------------------
*/
/*
----------------------------------------
Easing
----------------------------------------
*/
html,
body {
  padding: 0;
  margin: 0;
}

html {
  font-size: 10px;
  font-weight: 500;
}

body {
  background: #ffffff;
  color: #1b1b1b;
  font-size: 16px;
  font-family: inherit;
}
body.modal-open {
  overflow: hidden;
}

.show-on-focus {
  position: absolute;
  top: -10em;
  background: #ffffff;
  padding: 1em;
  margin: 1em;
  color: #162e51;
  display: block;
  font-weight: 600;
}
.show-on-focus:focus {
  position: inherit;
  top: auto;
  outline: 2px solid #ffbe2e;
}

body .row.full {
  width: 100%;
  max-width: 100%;
}

.sr-only {
  border: 0;
  clip: rect(0, 0, 0, 0);
  clip-path: inset(50%);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute !important;
  width: 1px;
  word-wrap: normal !important;
}

.no-print-no-sr {
  display: none !important;
}

#content abbr {
  border-bottom: 0px;
  text-decoration: none;
  font-weight: inherit;
  font-style: inherit;
  color: inherit;
  cursor: pointer;
}

a {
  color: #005ea2;
  text-decoration: underline;
  -webkit-transition-duration: 0.3s;
  transition-duration: 0.3s;
  -webkit-transition-timing-function: ease-in-out;
  transition-timing-function: ease-in-out;
  -webkit-transition-property: color, background-color, border-color;
  transition-property: color, background-color, border-color;
}
a:hover {
  background-color: rgba(0, 0, 0, 0.05);
  color: inherit;
  text-decoration: underline;
}
a:active {
  background: rgba(0, 0, 0, 0.05);
}
a:visited, a:visited abbr {
  color: #54278f;
}

h1 {
  margin-top: 0;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  margin-bottom: 0;
  margin-top: 0;
  clear: both;
}
* + h1,
* + h2,
* + h3,
* + h4,
* + h5,
* + h6 {
  margin-top: 1.5em;
}
h1 + *,
h2 + *,
h3 + *,
h4 + *,
h5 + *,
h6 + * {
  margin-top: 1em;
}

h1 {
  font-size: 2.5rem;
  font-weight: 700;
}

h2 {
  font-size: 1.875rem;
  font-weight: 700;
}

h3 {
  font-size: 1.25rem;
  font-weight: 700;
}

h4 {
  font-size: 1.0625rem;
  font-weight: 700;
}

h5 {
  font-size: 0.9375rem;
  font-weight: 700;
}

h6 {
  font-size: 0.8125rem;
  font-weight: 400;
  line-height: 1.5;
  text-transform: uppercase;
}

h1, h2, h3, h4, h5 {
  font-family: Bitter, Georgia, Cambria, "Times New Roman", Times, serif;
  font-weight: 700;
}

h6 {
  font-family: "Source Sans Pro", "Helvetica Neue", Helvetica, Roboto, Arial, sans-serif;
  font-weight: 700;
}

h1 {
  margin-top: 0;
  font-size: 4rem;
}

h2 {
  font-size: 3rem;
}

h3 {
  font-size: 2rem;
}

h4 {
  font-size: 1.7rem;
}

h5 {
  font-size: 1.5rem;
}

h6 {
  font-size: 1.5rem;
}

@media (max-width: 481px) {
  h1 {
    font-size: 30px;
  }
  h2 {
    font-size: 24px;
  }
}
h6 {
  margin: 0.5em 0 0;
  text-transform: none;
  font-weight: 700;
}

ul {
  padding: 0 0 0 1.5em;
  list-style: square;
}

ol {
  margin: 0 0 0 1.25em;
  list-style-position: outside;
}

ul > ul,
ul ol,
ol > ul,
ol ol {
  margin: 0.5em 0 0.5em 1.2em;
}

dd {
  margin-left: 0;
}

dd + dt {
  margin-top: 1.5em;
}

figure {
  font-size: 0.85em;
  margin-left: -15px;
  margin-right: -15px;
}
@media screen and (min-width: 1201px), print and (min-width: 1201px) {
  figure {
    margin-left: -16.66667%;
    margin-right: -16.66667%;
  }
}

figcaption {
  color: #162e51;
}

input::-webkit-input-placeholder {
  color: #565c65;
}

input::-moz-placeholder {
  color: #565c65;
}

input:-ms-input-placeholder {
  color: #565c65;
}

input:focus::-webkit-input-placeholder {
  color: transparent;
}

input:focus::-moz-placeholder {
  color: transparent;
}

input:focus:-ms-input-placeholder {
  color: transparent;
}

input.va-input-medium-large {
  max-width: 11.25rem;
}

hr {
  margin: 2.5em 0;
  margin: 48px 0 40px;
  border: 1px solid #a9aeb1;
}

table {
  width: 100%;
}

.va-pos-fixed {
  position: fixed;
}

.header {
  background: #162e51;
  clear: both;
  margin: 0;
  padding: 0;
  min-height: 189.19px;
}
@media screen and (min-width: 481px) {
  .header {
    min-height: 167.19px;
  }
}
@media screen and (min-width: 768px) {
  .header {
    position: relative;
    min-height: 159px;
  }
}
.header .login-container {
  background: #162e51;
  flex-wrap: wrap;
  white-space: nowrap;
}
.header .login-container .row {
  padding: 0;
}
@media screen and (min-width: 640px) {
  .header .login-container {
    flex: 1 0 100%;
  }
}

#va-header-logo-menu {
  flex-wrap: wrap;
  padding: 1em 0.75em 0;
}
@media screen and (min-width: 640px) {
  #va-header-logo-menu {
    padding-bottom: 0;
  }
}

.va-header-logo-wrapper {
  flex: 1 0 164px;
}
@media screen and (min-width: 640px) {
  .va-header-logo-wrapper {
    flex-basis: 3.75rem;
  }
}

.va-header-logo {
  background-color: transparent;
  border-bottom: none;
  display: block;
  height: 40px;
  margin: 0;
  width: 164px;
}
.va-header-logo:hover .vets-logo-va path {
  fill: #ffbe2e;
}

.va-notice--banner {
  background: #ffffff;
  margin: 0 0 0.75em 0;
  padding: 0;
  font-weight: 400;
}
@media screen and (min-width: 768px) {
  .va-notice--banner {
    background: #f1f1f1;
  }
  .va-notice--banner .usa-banner-inner {
    padding-left: 0.9375rem;
  }
  .va-notice--banner .usa-banner-content {
    padding-left: 0;
    padding-right: 0;
  }
}
@media screen and (min-width: 1008px) {
  .va-notice--banner .usa-banner-inner {
    padding-left: 0;
  }
}
.va-notice--banner-inner {
  margin: auto;
  max-width: 1000px;
  position: relative;
}

.va-notice--banner p {
  margin: 0;
}
.va-notice--banner a {
  background-image: none;
  color: inherit;
  padding: 0;
}

.vets-logo {
  display: block;
  height: inherit;
  width: inherit;
}
.vets-logo-vetsdotgov path,
.vets-logo-vetsdotgov rect, .vets-logo-va path,
.vets-logo-va rect {
  fill: #ffffff;
}

article > h1 {
  margin-top: 0;
}

#content {
  margin: 0;
  padding: 0;
  color: #1b1b1b;
  overflow: hidden;
}

.va-introtext {
  font-family: Bitter, Georgia, Cambria, "Times New Roman", Times, serif;
  font-size: 1.25rem;
  font-weight: 400;
  line-height: 1.7;
  max-width: 48.125rem;
}
.va-introtext p {
  line-height: 1.7;
}

.external-link-icon-black {
  background-image: url("./img/exit-icon.png");
  background-position: 100% 50%;
  background-repeat: no-repeat;
  background-size: 1em auto;
  padding-right: 1.2em;
  position: relative;
}

.usa-alert {
  background: none;
  background-color: #f1f1f1;
  border-left-style: solid;
  border-left-width: 10px;
  display: table;
  padding: 2rem 4rem 2rem 1.5rem;
  width: 100%;
}
.usa-alert::before {
  display: block;
  width: auto;
  background: none;
  font-family: "Font Awesome 5 Free";
  font-size: 1.25rem;
  margin-right: 1rem;
  position: static;
  font-weight: 900;
}
.usa-alert .usa-alert-body {
  display: table-cell;
  padding-left: 0;
  padding-right: 0;
  width: 100%;
  vertical-align: middle;
}
.usa-alert-heading {
  font-size: 1.25rem;
  margin-top: 0;
  padding-top: 0;
}
.usa-alert-text {
  margin-top: 1.25rem;
}
.usa-alert-text:only-child {
  margin: 0;
  padding: 0;
}
.usa-alert-text p:first-child {
  margin-top: 0;
}
.usa-alert-text p:last-child {
  margin-bottom: 0;
}
.usa-alert-text .usa-alert-heading + p:only-of-type {
  margin-top: 1.25rem;
}
.usa-alert-text ul {
  padding-left: 1.25rem;
}
.usa-alert-info {
  border-left-color: #00a6d2;
}
.usa-alert-info::before {
  content: "\f05a";
}
.usa-alert-info.background-color-only {
  background-color: #e1f3f8;
}
.usa-alert-error {
  border-left-color: #cd2026;
}
.usa-alert-error::before {
  color: #cd2026;
  content: "\f06a";
}
.usa-alert-error.background-color-only {
  background-color: #f9dede;
}
.usa-alert-success {
  border-left-color: #2e8540;
}
.usa-alert-success::before {
  color: #2e8540;
  content: "\f00c";
}
.usa-alert-success.background-color-only {
  background-color: #e7f4e4;
}
.usa-alert-warning {
  border-left-color: #fdb81e;
}
.usa-alert-warning::before {
  content: "\f071";
}
.usa-alert-warning.background-color-only {
  background-color: #fff1d2;
}
.usa-alert-continue {
  border-left-color: #2e8540;
}
.usa-alert-continue::before {
  color: #2e8540;
  content: "\f023";
}
.usa-alert.background-color-only {
  border-left: none;
  padding: 1.25rem;
}
.usa-alert.background-color-only::before {
  content: none;
}

.va-alert-close {
  background-color: transparent;
  color: #005ea2;
  font-size: 1.40625rem;
  padding: 0;
  position: absolute;
  margin: 1rem;
  right: 0;
  top: 0;
  width: auto;
  z-index: 9;
}
.va-alert-close:hover {
  background-color: transparent;
  color: #1a4480;
}
.va-alert-close:active {
  background-color: transparent;
  color: #112e51;
}

p.usa-alert-heading {
  margin-top: 0;
}

.claims-list-alert {
  margin-bottom: 1em;
  margin-top: 0;
}

.va-alert-close-icon {
  font-size: 1.1em !important;
}

.claims-alert-status {
  margin-top: 0;
  margin-bottom: 2em;
}

.claims-alert-header {
  padding-bottom: 0 !important;
  margin-top: 0;
}

.alerts-list {
  list-style: none;
}
.alerts-list li {
  margin-left: -0.4em;
}

.claims-alert-checkbox > label {
  margin-top: 0;
  margin-bottom: 0;
  max-width: 100%;
}

.need-files-alert {
  padding-bottom: 4em;
}
@media screen and (min-width: 768px) {
  .need-files-alert {
    padding-bottom: 1em;
  }
}

.alert-with-details {
  display: flex;
  justify-content: space-between;
  flex-direction: column;
}
@media screen and (min-width: 768px) {
  .alert-with-details {
    flex-direction: row;
  }
}

.usa-alert-full-width {
  background-color: #f1f1f1;
}
.usa-alert-full-width.dismissable-option-header {
  display: none;
}
.usa-alert-full-width.dismissable-option-header.show-alert {
  display: block;
}
.usa-alert-full-width.dismissable-option-header.dismissed {
  display: none;
}
.usa-alert-full-width .usa-alert-dismiss {
  position: absolute;
  right: 0;
  top: 5px;
  cursor: pointer;
}
.usa-alert-full-width > .usa-alert {
  border-left: none;
  max-width: 1000px;
  margin: 0 auto;
}
.usa-alert-full-width > .usa-alert .paragraph--type--expandable-text .field--name-field-text-expander .field__label {
  display: none;
}
.usa-alert-full-width > .usa-alert .paragraph--type--expandable-text .field--name-field-text-expander .field__item {
  font-size: 1.25rem;
  margin-top: 0;
  padding-top: 0;
  font-weight: 700;
  text-decoration: underline;
  color: #1a4480;
  cursor: pointer;
}
.usa-alert-full-width > .usa-alert .paragraph--type--expandable-text .field--type-text-long {
  display: none;
}
.usa-alert-full-width > .usa-alert .paragraph--type--expandable-text .field--type-text-long .field__label {
  display: none;
}
.usa-alert-full-width > .usa-alert .paragraph--type--expandable-text .field--type-text-long.expander-content-open {
  display: block;
}
.usa-alert-full-width-warning {
  border-top: 0.625rem solid #fdb81e;
}
.usa-alert-full-width-info, .usa-alert-full-width-information {
  border-top: 0.625rem solid #00a6d2;
}
.usa-alert-full-width-info .usa-alert:before, .usa-alert-full-width-information .usa-alert:before {
  content: "\f05a";
  background: none;
  font-size: 1.25rem;
  margin-right: 0.9375rem;
  position: static;
  font-weight: 900;
}

.va-nav-breadcrumbs {
  background: #ffffff;
  color: #005ea2;
  font-size: inherit;
  padding: 1em 0;
}
.va-nav-breadcrumbs--gate {
  margin-bottom: -1em;
}
.va-nav-breadcrumbs li {
  display: inline-block;
  margin: 0.25em 0;
  padding: 0.25em 0 0.25em 0;
  vertical-align: middle;
}
.va-nav-breadcrumbs li:after {
  content: " › ";
  display: inline-block;
  padding: 0 0.35em;
}
.va-nav-breadcrumbs li:last-child:after {
  content: "";
}
.va-nav-breadcrumbs li.active {
  font-weight: bold;
  padding: 0.3em 0;
}
.va-nav-breadcrumbs li.active:after {
  content: "";
}
.va-nav-breadcrumbs a {
  color: #005ea2;
  display: inline-block;
  padding: 2px;
}
.va-nav-breadcrumbs a:hover {
  background: rgba(0, 0, 0, 0.05);
}
.va-nav-breadcrumbs a[aria-current=page] {
  color: #323a45 !important;
  cursor: default;
  font-weight: bold;
  pointer-events: none;
  text-decoration: none;
}

.va-nav-breadcrumbs-list {
  float: none !important;
  position: relative;
}

/* Mobile class declaration for React apps, manual override */
.va-nav-breadcrumbs--mobile li {
  display: none;
}
.va-nav-breadcrumbs--mobile li:nth-last-child(2) {
  display: inline-block;
}
.va-nav-breadcrumbs--mobile li:nth-last-child(2)::before {
  content: " ‹";
  display: inline-block;
  padding: 0 0.15em;
}
.va-nav-breadcrumbs--mobile li:nth-last-child(2)::after {
  content: "";
  display: none;
  padding: 0;
}

/* Activate the mobile breadcrumb at $small-screen breakpoint */
@media screen and (max-width: 481px) {
  .va-nav-breadcrumbs li {
    display: none;
  }
  .va-nav-breadcrumbs li:nth-last-child(2) {
    display: inline-block;
  }
  .va-nav-breadcrumbs li:nth-last-child(2)::before {
    content: " ‹";
    display: inline-block;
    padding: 0 0.15em;
  }
  .va-nav-breadcrumbs li:nth-last-child(2)::after {
    content: "";
    display: none;
    padding: 0;
  }
}
.usa-button,
.usa-button-primary,
.usa-button:visited,
.usa-button-primary:visited,
button,
[type=button],
[type=submit],
[type=reset],
[type=image] {
  -webkit-font-smoothing: inherit;
  -moz-osx-font-smoothing: inherit;
  background-color: #005ea2;
  box-sizing: border-box;
}
.usa-button.usa-button-secondary,
.usa-button-primary.usa-button-secondary,
.usa-button:visited.usa-button-secondary,
.usa-button-primary:visited.usa-button-secondary,
button.usa-button-secondary,
[type=button].usa-button-secondary,
[type=submit].usa-button-secondary,
[type=reset].usa-button-secondary,
[type=image].usa-button-secondary {
  background: transparent;
}
.usa-button.usa-button-secondary:focus, .usa-button.usa-button-secondary:hover,
.usa-button-primary.usa-button-secondary:focus,
.usa-button-primary.usa-button-secondary:hover,
.usa-button:visited.usa-button-secondary:focus,
.usa-button:visited.usa-button-secondary:hover,
.usa-button-primary:visited.usa-button-secondary:focus,
.usa-button-primary:visited.usa-button-secondary:hover,
button.usa-button-secondary:focus,
button.usa-button-secondary:hover,
[type=button].usa-button-secondary:focus,
[type=button].usa-button-secondary:hover,
[type=submit].usa-button-secondary:focus,
[type=submit].usa-button-secondary:hover,
[type=reset].usa-button-secondary:focus,
[type=reset].usa-button-secondary:hover,
[type=image].usa-button-secondary:focus,
[type=image].usa-button-secondary:hover {
  background-color: #dce4ef;
}

.usa-button-primary {
  color: #ffffff !important;
}
.usa-button-primary[href^=http] {
  background-image: none;
  text-decoration: none !important;
}
.usa-button-primary[href^=http]:after {
  content: none;
}

.usa-accordion .usa-button-secondary:focus {
  box-shadow: inset 0 0 0 2px #112e51, 0 0 3px #aeb0b5, 0 0 7px #aeb0b5;
}

.usa-accordion-button:active {
  background-color: inherit;
}

.usa-button-disabled {
  background-color: #d6d7d9;
}

.row.form-progress-buttons {
  max-width: 29.375rem;
}

button i.fa {
  font-size: 0.75em;
}
button i.fa.before-text {
  margin-right: 0.5em;
}
button i.fa.after-text {
  margin-left: 0.5em;
}

button.short {
  font-weight: 500;
  padding: 0.625rem;
}

.va-icon-link,
.va-icon-link[type=button] {
  background: transparent;
  border-radius: 0;
  color: #005ea2 !important;
  font-weight: normal;
  line-height: 1.3;
  margin: 0;
  text-align: left;
  -webkit-transition-duration: 0.3s;
  transition-duration: 0.3s;
  -webkit-transition-timing-function: ease-in-out;
  transition-timing-function: ease-in-out;
  -webkit-transition-property: color, background-color, border-color;
  transition-property: color, background-color, border-color;
  white-space: nowrap;
}
.va-icon-link:hover,
.va-icon-link[type=button]:hover {
  background: #f1f1f1;
}
.va-icon-link .fa,
.va-icon-link[type=button] .fa {
  display: inline-block;
  font-size: 1.125rem;
}
.va-icon-link span,
.va-icon-link[type=button] span {
  display: inline-block;
  padding-left: 0.3125rem;
  text-decoration: underline;
}

.va-btn-withicon > span {
  display: flex;
  align-items: center;
}
.va-btn-withicon svg {
  display: none;
}
@media screen and (min-width: 768px) {
  .va-btn-withicon svg {
    display: block;
    height: 15px;
    margin-right: 2.5px;
    pointer-events: none;
    width: 15px;
  }
}

legend.legend-label + .form-radio-buttons {
  margin-top: 0.75rem;
}

.form-radio-buttons label {
  margin-top: 12px;
}
.form-radio-buttons label a {
  position: relative;
}
.form-radio-buttons [type=radio] {
  height: 3rem !important;
  margin: 0;
  border: 0;
  cursor: pointer;
}
.form-radio-buttons .errorable-radio-button label {
  outline: none;
  padding: 0.75rem;
  display: inline-block;
  margin: 0 0 0 0.75rem;
}
.form-radio-buttons .errorable-radio-button input:focus + label {
  background: #ffe396;
}

.form-required-span {
  color: #cd2026;
  margin: 0 0.35em;
}

button.form-button-green {
  background: #2e8540;
}

button.form-button-disabled {
  pointer-events: none;
}

.form-datefield-month,
.form-datefield-day {
  clear: none;
  float: left;
  margin-right: 0.9375rem;
}
.form-datefield-month select,
.form-datefield-day select {
  padding-top: 0.53125rem;
  padding-bottom: 0.53125rem;
}

.form-alert-body {
  padding: 0 2.1875rem;
}

.form-datefield-month {
  width: 8.125rem;
}

.form-datefield-day {
  width: 5rem;
}

.form-radio-buttons > input[type=radio] + label::before {
  display: block;
  float: left;
  margin-left: -1.7em;
  margin-top: 0.25em;
  margin-right: 0;
  pointer-events: none;
}
.form-radio-buttons > input[type=radio] + label {
  margin-left: 1.8em;
}
.form-radio-buttons > input[type=radio] {
  cursor: pointer;
}

.form-required-span {
  color: #cd2026;
  margin: 0 0.35em;
}

.form-checkbox [type=checkbox] {
  height: 1.125rem !important;
  margin: 0;
  width: 1.125rem !important;
  cursor: pointer;
}
.form-checkbox > input[type=checkbox] + label::before {
  display: block;
  float: left;
  margin-left: -1.7em;
  margin-top: 0.14em;
  margin-right: 0;
  pointer-events: none;
}
.form-checkbox > input[type=checkbox] + label {
  margin-left: 1.7em;
}

legend.legend-label + .form-checkbox-buttons {
  margin-top: 0.75rem;
}

.form-checkbox-buttons [type=checkbox] {
  height: 1.125rem !important;
  width: 1.125rem !important;
  cursor: pointer;
  margin: 0.75rem 0 0 1.5rem;
}
.form-checkbox-buttons label {
  padding: 0.75rem;
  display: inline-block;
  margin: 0 0 0 0.75rem;
}

.form-field-alert label {
  margin-top: 0.5em;
}

.form-error-date {
  margin-top: 0;
}

.usa-input-error.form-error-date input, .usa-input-error.form-error-date select {
  width: 100%;
}

@media screen and (min-width: 768px) {
  .form-select-medium {
    max-width: 7.5rem;
  }
}
.form-expanding-group-active-radio {
  margin-left: 28px;
}

.form-expanding-group-active-radio.form-expanding-group-inner-enter,
.form-expanding-group-active-radio.form-expanding-group-inner-leave-active {
  margin-top: -16px;
}

.form-expanding-group-inner-leave {
  max-height: 800px;
  opacity: 1;
  margin-top: 0;
}

.form-expanding-group-inner-enter {
  opacity: 0;
  max-height: 0;
}

.form-expanding-group-inner-leave.form-expanding-group-inner-leave-active {
  -webkit-transition: margin-top 500ms 0ms, max-height 300ms 0ms, opacity 300ms 0ms;
  transition: margin-top 500ms 0ms, max-height 300ms 0ms, opacity 300ms 0ms;
  max-height: 0;
  opacity: 0;
}

.form-expanding-group-inner-enter.form-expanding-group-inner-enter-active {
  -webkit-transition: margin-top 300ms 0ms, max-height 700ms 0ms, opacity 500ms 200ms;
  transition: margin-top 300ms 0ms, max-height 700ms 0ms, opacity 500ms 200ms;
  max-height: 800px;
  opacity: 1;
  margin-top: 0 !important;
}

.form-expanding-group > span .usa-input-error {
  padding-left: calc(1.5rem - 6px);
  right: calc(1.9rem - 6px);
}
.form-expanding-group > span .schemaform-expandUnder-indent .usa-input-error {
  padding-left: 0.9375rem;
  right: 1.1875rem;
}

.form-expanding-group {
  margin-left: -1.25rem;
  padding-left: 1.25rem;
}

.form-expanding-group-open {
  padding-left: calc(2rem - 7px);
  border-left: 7px solid #97d4ea;
}
.form-expanding-group-open .form-expanding-group-open {
  border-left-color: transparent;
}

.form-expanding-group-plus {
  position: relative;
}
.form-expanding-group-plus::after {
  content: "+";
  font-size: 20px;
  position: absolute;
  right: 0;
  top: 0;
}

.form-expanding-group-open.form-expanding-group-plus::after {
  content: "-";
}

.form-errorable-group > .usa-input-error label {
  margin-top: 1.875rem;
}
.form-errorable-group > .usa-input-error .usa-input-error-label {
  margin-top: 0;
}
.form-errorable-group > .usa-input-error .usa-input-error-message {
  margin-bottom: -1.25rem;
}

.loading-indicator-container {
  text-align: center;
}
.loading-indicator-container .loading-indicator {
  display: block;
  height: 4rem;
  margin-top: 1rem;
}
.loading-indicator-container .loading-indicator:after {
  content: " ";
  display: inline-block;
  width: 3.5rem;
  height: 3.5rem;
  margin: 1px;
  border-radius: 50%;
  border: 8px solid #005ea2;
  border-color: #005ea2 transparent #005ea2 transparent;
  animation: spin 1.2s linear infinite;
}
.loading-indicator-container .loading-indicator:focus {
  outline: none;
}

.async-loader {
  padding-bottom: 0.5rem;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}
.print-only {
  display: none;
}

@media print {
  header, footer, nav {
    display: none;
  }
  .schemaform-title,
  .schemaform-subtitle,
  .screen-only {
    display: none;
  }
  .print-only {
    display: block;
  }
  /* Relative URLs - include the HREF with the domain prepended */
  a[href^="/"]:after {
    content: " (https://www.va.gov" attr(href) ")";
  }
  /* Absolute URLs - show the HREF without prepending the domain. */
  a[href^=http]:after {
    content: " (" attr(href) ")";
  }
}
.va-dropdown {
  position: relative;
}
.va-dropdown-trigger {
  background: transparent url("./img/arrow-down-white.svg") no-repeat;
  background-position: right 8px center;
  background-size: 10px 10px;
  border-radius: 0;
  border-top: 3px solid transparent;
  margin: 0;
  padding: 9px 25px 8px 8px;
}
.va-dropdown-trigger:hover {
  background-color: #005ea2;
}
.va-dropdown-trigger[aria-expanded=true] {
  border-top-color: #8a7237;
  background-color: #ffffff;
  background-image: url("./img/arrow-up.svg") !important;
  color: #1b1b1b;
}
.va-dropdown-trigger[aria-expanded=true] path {
  fill: currentColor;
}
.va-dropdown-panel {
  background: #ffffff;
  box-shadow: 0px 4px 10px -4px #1b1b1b;
  color: #1b1b1b;
  padding: 0.5rem;
  position: absolute;
  min-width: 100%;
  z-index: 2;
}
.va-dropdown-panel a {
  color: #005ea2;
  display: inline-block;
}

[id=helpmenu] {
  width: 13.125rem;
}

.usa-sidenav-list a {
  font-size: 15px;
  text-decoration: none;
  padding: 8px 16px 8px 12px;
}
.usa-sidenav-list a.va-button-primary {
  padding: 0.625rem 1.25rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .va-sidebarnav {
    display: none;
  }
  button.va-sidebarnav-close {
    position: absolute;
    right: 2px;
    top: 2px;
  }
  button.va-sidebarnav-close:hover, button.va-sidebarnav-close:focus {
    background-color: #f0f0f0;
  }
}
.left-side-nav-title {
  color: #000000;
  padding-left: 1em;
}
@media screen and (min-width: 1008px) {
  .left-side-nav-title {
    padding-left: 0;
  }
}

.va-sidebarnav {
  color: #005ea2;
}
.va-sidebarnav h4 {
  margin-top: 0;
}
.va-sidebarnav li {
  border-top-color: #d6d7d9;
}
@media screen and (max-width: 767px) {
  .va-sidebarnav {
    left: 0;
    height: 100%;
    overflow: scroll;
    padding: 1.6rem;
    position: absolute;
    top: 0;
    visibility: hidden;
  }
  .va-l-detail-page .va-sidebarnav {
    width: 100%;
  }
  .va-sidebarnav::before {
    background: rgba(0, 0, 0, 0.05);
    content: " ";
    display: block;
    height: 100%;
    left: 0;
    position: fixed;
    top: 0;
    width: 100%;
    z-index: 1;
  }
  .va-sidebarnav > div {
    visibility: visible;
    background: #ffffff;
    border-left: 1px solid #aeb0b5;
    height: 100%;
    max-width: 18.75rem;
    overflow: auto;
    padding: 2rem 1rem 1rem;
    z-index: 2;
    position: absolute;
    top: 0;
    right: 0;
    width: 80%;
    transform: translateX(100%);
    -webkit-transition: 100ms transform linear;
    transition: 100ms transform linear;
  }
  .va-sidebarnav--opened {
    visibility: visible;
    display: block;
    position: fixed;
    z-index: 300;
  }
  .va-sidebarnav--opened > div {
    transform: translateX(0);
  }
  .va-sidebarnav-close {
    position: absolute;
    top: 0;
    right: 0;
  }
}
@media screen and (min-width: 768px) {
  .va-sidebarnav a {
    padding-right: 1rem;
  }
  .va-sidebarnav-close {
    display: none;
  }
  .va-sidebarnav .usa-sidenav-list {
    margin-right: 1rem;
  }
}
.va-sidebarnav ul.usa-accordion > li {
  margin-bottom: -1px;
}
.va-sidebarnav .left-side-nav-title {
  padding-bottom: 25px;
}
.va-sidebarnav .left-side-nav-title > .icon-small {
  vertical-align: middle;
  padding-left: initial;
  margin-right: 5px;
  font-size: 1.0625rem;
}
.va-sidebarnav .usa-sidenav-list {
  margin-right: 0;
  margin-left: 0;
}
.va-sidebarnav .usa-sidenav-list > li {
  border-top: 0;
}
.va-sidebarnav .usa-sidenav-list > li .active-menu {
  border-bottom: 0;
}
.va-sidebarnav .usa-sidenav-list > li a {
  color: #005ea2;
  display: inline-block;
  vertical-align: middle;
  width: 100%;
  border-left: 4px solid transparent;
}
.va-sidebarnav .usa-sidenav-list > li a:hover, .va-sidebarnav .usa-sidenav-list > li a:focus {
  background-color: #e1f3f8;
  padding: 8px 14px;
  border-color: #005ea2;
  transition: background-color 0.1s ease-in-out 0s, border-color 0.1s ease-in-out 0s, padding 0.1s ease-in-out 0s;
}
.va-sidebarnav .usa-sidenav-list > li i {
  color: #000000;
  vertical-align: middle;
  font-size: 15px;
  padding-left: 0;
}
.va-sidebarnav .usa-sidenav-list .menu-item-container > a {
  font-weight: bold;
}
.va-sidebarnav .usa-sidenav-list .menu-item-container:hover {
  background-color: #f1f1f1;
  color: #005ea2;
}
.va-sidebarnav .usa-sidenav-list .menu-item-container:focus {
  outline: 2px solid #fdb81e;
  outline-offset: 3px;
}
.va-sidebarnav .usa-sidenav-list a.usa-current {
  color: #212121;
  border-left: 4px solid #212121;
  padding-left: 12px;
  margin-left: 16px;
  background-color: #f0f0f0;
  cursor: auto;
}
.va-sidebarnav .usa-sidenav-list a.usa-current.level-one {
  padding-left: 14px;
  margin-left: 0;
}
.va-sidebarnav .usa-sidenav-list a.usa-current:hover {
  background-color: #f0f0f0;
  font-weight: bold;
}
.va-sidebarnav .usa-sidenav-list .active-level {
  background-color: #f0f0f0;
}
.va-sidebarnav .usa-sidenav-list .active-level .usa-sidenav-sub_list {
  margin-top: 2px;
  margin-bottom: 2px;
}
.va-sidebarnav .usa-sidenav-list .active-level .usa-sidenav-sub_list li > a {
  padding: 8px 14px 8px 28px;
}
.va-sidebarnav .usa-sidenav-list .active-level .usa-sidenav-sub_list li > a:hover {
  padding: 8px 12px 8px 30px;
}
.va-sidebarnav .usa-sidenav-list .active-level .usa-sidenav-sub_list li:last-child a {
  padding-bottom: 12px;
}
.va-sidebarnav h4 {
  display: inline-block;
  margin-bottom: 0;
  margin-top: 0;
  vertical-align: middle;
  width: 75%;
}
.va-sidebarnav .usa-sidenav-list > li i {
  position: relative;
  right: -20px;
}
.va-sidebarnav .usa-sidenav-list > li .menu-item-container > a {
  font-weight: initial;
}
.va-sidebarnav .usa-sidenav-list > li a.usa-current {
  font-weight: bold;
  margin-left: 0;
}
.va-sidebarnav .usa-sidenav-list > li a.usa-current:hover, .va-sidebarnav .usa-sidenav-list > li a.usa-current:focus {
  border-color: #212121;
  padding: 8px 16px 8px 12px;
}
.va-sidebarnav .usa-sidenav-sub_list a {
  width: 100% !important;
  padding-left: 40px;
  font-size: 15px;
}
.va-sidebarnav .usa-sidenav-sub_list a:focus {
  outline: 2px dotted #aeb0b5;
  outline-offset: 0px;
}
.va-sidebarnav .usa-sidenav-sub_list a:hover, .va-sidebarnav .usa-sidenav-sub_list a:focus {
  background-color: #e1f3f8;
  padding: 8px 12px 8px 30px;
  border-color: #005ea2;
}
.va-sidebarnav .usa-sidenav-sub_list a.usa-current {
  margin-left: 16px !important;
}
.va-sidebarnav .usa-accordion .usa-accordion-button {
  background-color: #ffffff;
  border-top: 1px solid #d6d7d9;
  border-bottom: 1px solid #d6d7d9;
  background-size: 0.6875rem;
  color: #005ea2;
  font-weight: normal;
  font-size: 17px;
  padding-left: 0.625rem;
}
.va-sidebarnav .usa-accordion .usa-accordion-button:focus {
  outline: 0;
  border: 2px solid #fdb81e;
  background-color: #f0f0f0;
  font-weight: bold;
}
.va-sidebarnav .usa-accordion .usa-accordion-button:hover {
  background-color: #e1f3f8;
}
.va-sidebarnav .usa-accordion .usa-accordion-button[aria-expanded=false] {
  background-image: url("./img/plus-blue.svg");
}
.va-sidebarnav .usa-accordion .usa-accordion-button[aria-expanded=true] {
  border-bottom: 0;
  background-image: url("./img/minus-blue.svg");
}
.va-sidebarnav .usa-accordion .usa-accordion-button[aria-expanded=true]:focus {
  border: 2px solid #fdb81e;
}
.va-sidebarnav .usa-accordion .usa-accordion-content {
  padding: 0;
}
.va-sidebarnav .usa-accordion .usa-sidenav-list a {
  font-size: 15px;
  padding: 8px 16px 8px 12px;
}
.va-sidebarnav .usa-accordion .usa-sidenav-list a:focus {
  width: 98% !important;
  margin: 2px;
}
.va-sidebarnav .usa-accordion .usa-current:focus {
  width: 99% !important;
  margin-top: 2px;
}
.va-sidebarnav .usa-accordion-button-dark {
  background-color: #f1f1f1;
}

.va-btn-sidebarnav-trigger {
  margin: 0;
  padding: 0;
}
.va-btn-sidebarnav-trigger.fixed-trigger {
  position: fixed;
  top: 0;
  width: 100%;
  z-index: 299;
}
.va-btn-sidebarnav-trigger .button-wrapper {
  position: absolute;
  width: 100%;
  padding: 0.5rem 0.5rem 1rem;
}
.va-btn-sidebarnav-trigger button {
  background-color: #ffffff;
  color: #005ea2;
  margin: 0;
  padding: 0.75rem;
  border: 1px solid #005ea2;
  border-radius: 4px;
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: space-between;
}
.va-btn-sidebarnav-trigger button strong {
  line-height: 1.25rem;
}
.va-btn-sidebarnav-trigger button svg {
  fill: #005ea2;
}
.va-btn-sidebarnav-trigger .button-background {
  position: absolute;
  background-color: #ffffff;
  width: 100%;
}
@media screen and (min-width: 768px) {
  .va-btn-sidebarnav-trigger {
    display: none;
  }
}

.va-btn-close-icon {
  background: transparent url("./img/close.svg") center no-repeat;
  background-size: 0.625rem 0.625rem;
  height: 1.375rem;
  padding: 1.375rem;
  margin: 0;
  text-indent: -6249.375rem;
  width: 0.625rem;
}

.va-overlay {
  background: rgba(50, 58, 69, 0.8);
  height: 100%;
  left: 0;
  -webkit-transition: opacity 0.5s, visibility 0s 0.5s;
  opacity: 0;
  position: fixed;
  top: 0;
  transition: opacity 0.5s, visibility 0s 0.5s;
  visibility: hidden;
  width: 100%;
  z-index: 800;
}
.va-overlay [type=text] {
  -webkit-appearance: none;
  border-radius: 3px 0 0 3px;
}

.va-mobile-searchclose {
  border-radius: 0;
  display: block !important;
  width: 100% !important;
  margin: 0;
  width: auto;
  background: #005ea2;
}

.va-overlay--open {
  opacity: 1;
  visibility: visible;
  -webkit-transition: opacity 0.5s;
  transition: opacity 0.5s;
}
.va-overlay--open .columns {
  padding: 0;
}

.va-overlay .menu {
  -webkit-perspective: 1200px;
  perspective: 1200px;
  padding: 1em 1em;
}

.va-overlay form {
  opacity: 0.4;
  -webkit-transform: translateY(-25%) rotateX(35deg);
  transform: translateY(-25%) rotateX(35deg);
  -webkit-transition: -webkit-transform 0.5s, opacity 0.5s;
  transition: transform 0.5s, opacity 0.5s;
}

.va-overlay--open form {
  opacity: 1;
  -webkit-transform: rotateX(0deg);
  transform: rotateX(0deg);
}

.va-overlay-body {
  margin: 0.625rem auto;
}

@media (max-height: 30.5em) {
  .overlay form {
    height: 70%;
  }
}
.additional-info-content {
  margin-top: 1em;
  margin-bottom: 1em;
}

.additional-info-button {
  text-decoration: none;
}
.additional-info-button:hover {
  text-decoration: none;
}

.additional-info-title {
  border-bottom-right-radius: 1px;
  border-bottom: 2px #005ea2 dotted;
  color: #323a45;
}
.additional-info-title:hover {
  color: #000000;
}

.fa-angle-down {
  color: #aeb0b5;
  font-size: 16px !important;
  margin: 0.3125rem;
  transform: rotate(0deg);
  transition: transform 0.15s linear;
}

.fa-angle-down.open {
  transform: rotate(180deg);
  transition: transform 0.15s linear;
}

@media (max-width: 481px) {
  h1 {
    font-size: 30px;
  }
  h2 {
    font-size: 24px;
  }
  .va-introtext {
    font-size: 16px;
  }
}
body .row {
  max-width: 62.5em;
}
body .row-padded {
  max-width: 62.5rem;
  padding: 0 0.625rem;
  margin: 0 auto;
}

@media screen and (min-width: 768px) {
  .form-panel {
    max-width: 20rem;
  }
}

.progress-box button {
  width: 100%;
}

.progress-box {
  border: 1px solid #f1f1f1;
  margin: 0.9375rem 0;
  padding: 0.625rem 1.25rem;
}

.button-icon {
  font-size: 1.0625rem;
}

.input-section {
  margin-bottom: 2em;
}
.input-section .row {
  margin: 0;
}

.usa-input-error select {
  border: 3px solid #cd2026;
}

.hidden {
  display: none !important;
}

.csp-inline-patch-footer {
  display: none;
  visibility: hidden;
}

.csp-inline-patch-page-react {
  padding: 2em 0;
}

@media screen and (min-width: 768px) {
  .usa-grid .usa-width-one-fourth {
    margin-right: 2.35765%;
    width: 23.23176%;
  }
  .usa-grid .usa-width-three-fourths {
    width: 74.41059%;
  }
}
input[type=checkbox],
input[type=radio] {
  margin-left: -1.25rem;
  opacity: 0;
  position: absolute;
  left: auto;
}

[hidden=false] {
  display: block !important;
}

@media screen and (min-width: 768px) {
  form [type=submit] {
    padding-left: 1.25rem;
    padding-right: 1.25rem;
    width: 100%;
  }
}

#top-of-page-alert-container {
  width: 100%;
  background-color: #fef0c8;
  position: relative;
}
#top-of-page-alert-container:before {
  background-color: #fdb81e;
  content: "";
  height: 100%;
  left: 0;
  position: absolute;
  top: 0;
  width: 0.625rem;
}

#top-of-page-alert {
  max-width: 62.5em;
  margin: 0 auto;
}
#top-of-page-alert.usa-alert::before {
  content: none;
}
#top-of-page-alert .usa-alert-body {
  margin: 0 auto;
  text-align: left;
}
#top-of-page-alert .usa-alert-body .usa-alert-heading {
  margin: 0 auto;
  padding: 0;
}

#va-modal {
  display: none;
}

.va-modal {
  background: rgba(50, 58, 69, 0.8);
  content: " ";
  display: block;
  height: 100%;
  left: 0;
  position: fixed;
  top: 0;
  width: 100%;
  z-index: 6;
}
@media screen and (max-width: 481px) {
  .va-modal {
    overflow-y: scroll;
  }
}
.va-modal .va-modal-body {
  margin-right: 1.25rem;
}
.va-modal .va-modal-body p:first-of-type {
  margin-top: 0;
}
.va-modal-title {
  margin: 0;
  margin-bottom: 1rem;
}
.va-modal-inner {
  background: #ffffff;
  margin: auto;
  max-width: 25rem;
  position: relative;
  top: 50%;
  transform: translateY(-50%);
  width: 100%;
  cursor: auto;
}
@media screen and (max-width: 481px) {
  .va-modal-inner {
    transform: none;
    top: 0;
  }
}
.va-modal-alert {
  max-width: 37.5rem;
}
.va-modal-alert .alert-actions {
  margin-top: 1.5rem;
}
.va-modal-alert .alert-actions button {
  margin: 0;
}
.va-modal-alert .alert-actions button + button {
  margin-left: 1.25rem;
}
.va-modal-body {
  overflow-wrap: break-word;
  padding: 1.25rem;
  word-break: break-word;
  word-wrap: break-word;
}
.va-modal-large .va-modal-inner {
  max-width: 46.875rem;
  width: 75vw;
}
.va-modal-large .va-modal-inner .va-modal-body {
  max-height: 95vh;
  overflow-y: auto;
}

.va-modal-body h3 {
  margin-top: 0;
}

.va-modal button {
  white-space: nowrap;
}

button.va-modal-close {
  background-color: transparent;
  color: #005ea2;
  font-size: 1.40625rem;
  padding: 0;
  position: absolute;
  margin: 1rem;
  right: 0;
  top: 0;
  width: auto;
  z-index: 9;
}
button.va-modal-close:hover {
  background-color: transparent;
  color: #1a4480;
}
button.va-modal-close:active {
  background-color: transparent;
  color: #112e51;
}

.va-pagination {
  border-top: 1px solid #f1f1f1;
  font-size: 0.9em;
  overflow: hidden;
  padding: 1.25rem 0 0.625rem;
  position: relative;
  text-align: center;
  width: 100%;
  display: flex;
  justify-content: center;
}
@media (max-width: 768px) {
  .va-pagination-prev {
    margin-left: -1.875rem;
    padding: 0 0.625rem 0 0;
  }
}
@media (min-width: 481px) {
  .va-pagination-prev:not(:empty) a::before {
    content: "‹  ";
  }
}
@media (max-width: 768px) {
  .va-pagination-next {
    margin-right: -1.875rem;
    padding: 0 0 0 0.625rem;
  }
}
@media (min-width: 481px) {
  .va-pagination-next:not(:empty) a::after {
    content: "  ›";
  }
}
.va-pagination-prev, .va-pagination-next {
  position: relative;
}
.va-pagination-prev:hover, .va-pagination-prev:focus, .va-pagination-next:hover, .va-pagination-next:focus {
  text-decoration: underline;
}
@media (min-width: 768px) {
  .va-pagination-prev, .va-pagination-next {
    padding: 0 0.625rem;
  }
}
.va-pagination-inner {
  white-space: nowrap;
  overflow: hidden;
}
@media (max-width: 768px) {
  .va-pagination-inner {
    width: 12.5rem;
  }
}
@media (min-width: 1201px) {
  .va-pagination-inner {
    width: 25rem;
  }
}
.va-pagination-prev, .va-pagination-next, .va-pagination-inner {
  padding-bottom: 4px;
  padding-top: 4px;
}
.va-pagination a {
  line-height: 2;
  text-decoration: none;
}

.va-pagination-inner a {
  border-radius: 1000px;
  display: inline-block;
  height: 1.875rem;
  margin: 0 0.3125rem;
  width: 1.875rem;
  text-decoration: none;
}

.va-pagination-inner a:hover,
.va-pagination-inner a:focus,
.va-pagination-active,
.va-pagination-active:visited {
  background: #005ea2;
  color: #ffffff;
}

.va-tabs {
  list-style: none;
  margin-bottom: -1px;
  min-width: 260px;
  padding-left: 0;
}
.va-tabs > li {
  background: #f1f1f1;
  border-width: 1px 0px 0 1px;
  border-color: #5b616b;
  border-style: solid;
  display: inline-block;
  margin-bottom: 0;
}
.va-tabs > li:last-child {
  border-right-width: 1px;
}

.va-tab-trigger {
  border-width: 5px 1px 1px;
  border-style: solid;
  border-color: transparent;
  border-bottom-color: #5b616b;
  color: #5b616b;
  display: inline-block;
  padding: 0.625rem;
  margin: 0px -1px;
  text-decoration: none;
}
.va-tab-trigger:hover, .va-tab-trigger:focus, .va-tab-trigger--current {
  background: #ffffff;
  border-color: #005ea2;
  border-bottom-color: #ffffff;
}
.va-tab-trigger:visited {
  color: inherit;
}
@media (min-width: 481px) {
  .va-tab-trigger {
    padding-left: 1.25rem;
    padding-right: 1.25rem;
  }
}

.va-tab-content {
  border-top: 1px solid #5b616b;
}

/*
  Original: @import "~uswds/src/stylesheets/core/utilities";
  ***THIS IS USWDS v1***
*/
.usa-sr-only {
  position: absolute;
  left: -999em;
}

.process {
  list-style: none;
  padding: 1em 0;
  position: relative;
}
.process h2, .process h3, .process h4, .process h5 {
  margin-top: 0;
  clear: none;
  padding-top: 0.3em;
}
.process p {
  padding: 0;
  margin-top: 0;
}
.process p:only-of-type {
  margin-top: 0;
}
.process p.va-address-block {
  padding-left: 0.625rem;
}
.process ul {
  margin: 0 0 1em 1.25em !important;
  padding: 0;
}
.process ul li {
  list-style: square;
  margin: 0;
  padding: 0.1em 0;
}

.process-step {
  border-left: 8px solid #aeb0b5;
  padding: 0 0 2em 2em;
  list-style: none;
  margin: 0 !important;
}
.process-step:before {
  color: #ffffff;
  float: left;
  font-size: 1.3em;
  font-weight: 700;
  text-align: center;
  line-height: 1.575em;
  width: 2em;
  height: 2em;
  top: -0.2em;
  margin-left: -2.7em;
  display: block;
  border: 4px solid #ffffff;
  background: #8d9297;
  border-radius: 4em;
  position: relative;
}
.process-step:last-child {
  border-left: 0;
  padding-left: calc(2em + 8px);
}

.list-one:before {
  content: "1";
}

.list-two:before {
  content: "2";
}

.list-three:before {
  content: "3";
}

.list-four:before {
  content: "4";
}

.list-five:before {
  content: "5";
}

.list-six:before {
  content: "6";
}

.list-seven:before {
  content: "7";
}

.list-eight:before {
  content: "8";
}

.list-nine:before {
  content: "9";
}

.list-ten:before {
  content: "10";
}

.list-eleven:before {
  content: "11";
}

.list-twelve:before {
  content: "12";
}

.list-thirteen:before {
  content: "13";
}

.list-fourteen:before {
  content: "14";
}

.list-fifteen:before {
  content: "15";
}

.list-sixteen:before {
  content: "16";
}

.list-seventeen:before {
  content: "17";
}

.list-eighteen:before {
  content: "18";
}

.list-nineteen:before {
  content: "19";
}

.list-twenty:before {
  content: "20";
}

#mega-menu,
.mega-menu {
  flex: 1 0 100%;
  color: #005ea2;
  width: 100%;
  z-index: 2;
}
#mega-menu .panel-bottom-link,
.mega-menu .panel-bottom-link {
  position: unset;
  height: 25px;
  margin-left: 10px;
  margin-right: 10px;
  margin-bottom: 3px;
  border: none;
}
#mega-menu .panel-bottom-link a,
.mega-menu .panel-bottom-link a {
  padding: 20px 25px 20px 7px;
  font-weight: bold;
}
#mega-menu .panel-bottom-link a svg,
.mega-menu .panel-bottom-link a svg {
  width: 15px;
}
#mega-menu .column-three,
.mega-menu .column-three {
  display: none;
}
#mega-menu .vetnav-level2,
.mega-menu .vetnav-level2 {
  width: 100%;
}
#mega-menu .panel-top-link:nth-of-type(1),
.mega-menu .panel-top-link:nth-of-type(1) {
  display: block;
  font-weight: bold;
  padding-top: 15px;
}
#mega-menu .vetnav-panel--submenu:not([hidden]),
.mega-menu .vetnav-panel--submenu:not([hidden]) {
  position: static;
}
#mega-menu .vetnav-panel--submenu:not([hidden]) h3,
.mega-menu .vetnav-panel--submenu:not([hidden]) h3 {
  display: none;
}
#mega-menu .back-button,
.mega-menu .back-button {
  display: block;
}
#mega-menu .vetnav-panel,
.mega-menu .vetnav-panel {
  height: auto;
}
#mega-menu .mm-link-container-small,
.mega-menu .mm-link-container-small {
  background: #112e51;
  height: 100%;
  position: absolute;
  width: 100%;
  top: 0;
  z-index: 200;
}
#mega-menu .all-link-arrow,
.mega-menu .all-link-arrow {
  display: none;
}
#mega-menu .vetnav-level1:active, #mega-menu .vetnav-level1:visited, #mega-menu .vetnav-level1:focus, #mega-menu .vetnav-level1:hover,
.mega-menu .vetnav-level1:active,
.mega-menu .vetnav-level1:visited,
.mega-menu .vetnav-level1:focus,
.mega-menu .vetnav-level1:hover {
  color: #ffffff;
}
#mega-menu .mm-links,
.mega-menu .mm-links {
  white-space: pre-wrap;
}
@media screen and (min-width: 768px) {
  #mega-menu,
  .mega-menu {
    min-height: 51px;
  }
  #mega-menu .vetnav-panel--submenu:not([hidden]),
  .mega-menu .vetnav-panel--submenu:not([hidden]) {
    position: absolute;
    box-shadow: none;
    width: 260px;
    padding: 72px 0px 0px 28px;
    white-space: normal;
  }
  #mega-menu .vetnav-panel--submenu:not([hidden]) h3,
  .mega-menu .vetnav-panel--submenu:not([hidden]) h3 {
    display: block;
    color: #000000;
    font-family: Source Sans Pro, sans serif;
    font-size: 16px;
    font-weight: bold;
    margin-top: 4px;
    padding: 0;
  }
  #mega-menu .vetnav-panel--submenu:not([hidden]).panel-white,
  .mega-menu .vetnav-panel--submenu:not([hidden]).panel-white {
    padding-top: 22px;
  }
  #mega-menu .vetnav-level1[aria-expanded=true],
  .mega-menu .vetnav-level1[aria-expanded=true] {
    border-top-color: #8a7237;
  }
  #mega-menu .vetnav-level1[aria-expanded=true]:active, #mega-menu .vetnav-level1[aria-expanded=true]:visited, #mega-menu .vetnav-level1[aria-expanded=true]:focus, #mega-menu .vetnav-level1[aria-expanded=true]:hover,
  .mega-menu .vetnav-level1[aria-expanded=true]:active,
  .mega-menu .vetnav-level1[aria-expanded=true]:visited,
  .mega-menu .vetnav-level1[aria-expanded=true]:focus,
  .mega-menu .vetnav-level1[aria-expanded=true]:hover {
    color: #212121;
  }
  #mega-menu .vetnav-level2[aria-expanded=true],
  .mega-menu .vetnav-level2[aria-expanded=true] {
    box-shadow: -3px 0 #8a7237;
  }
  #mega-menu .vetnav-panel,
  .mega-menu .vetnav-panel {
    box-shadow: 0 7px 25px -11px #000000;
    height: 490px;
    width: 1008px;
    left: 0;
  }
  #mega-menu .vetnav-panel .mm-links,
  .mega-menu .vetnav-panel .mm-links {
    padding: 5px 0px;
  }
  #mega-menu .vetnav-panel .mm-link-container,
  .mega-menu .vetnav-panel .mm-link-container {
    width: 225px;
    margin-bottom: 0;
  }
  #mega-menu .column-one,
  .mega-menu .column-one {
    left: 20px;
  }
  #mega-menu .column-one.panel-white,
  .mega-menu .column-one.panel-white {
    background-color: #ffffff;
    border-left: none;
  }
  #mega-menu .column-two,
  .mega-menu .column-two {
    border-left: none;
    left: 280px;
  }
  #mega-menu .column-two.panel-white,
  .mega-menu .column-two.panel-white {
    background-color: #ffffff;
    border-left: none;
  }
  #mega-menu .column-three,
  .mega-menu .column-three {
    border-left: none;
    color: #000000;
    left: 540px;
    white-space: normal;
  }
  #mega-menu .column-three.vetnav-panel--submenu:not([hidden]),
  .mega-menu .column-three.vetnav-panel--submenu:not([hidden]) {
    padding: 86px 20px 20px 14px;
    width: 240px;
  }
  #mega-menu .column-three.vetnav-panel--submenu:not([hidden]).panel-white,
  .mega-menu .column-three.vetnav-panel--submenu:not([hidden]).panel-white {
    padding-top: 30px;
    background-color: #ffffff;
    border-left: none;
  }
  #mega-menu .column-three a,
  .mega-menu .column-three a {
    font-weight: bold;
    padding: 14px 0px 0px 0px;
  }
  #mega-menu .panel-bottom-link,
  .mega-menu .panel-bottom-link {
    margin: 0;
  }
  #mega-menu .all-link-arrow,
  .mega-menu .all-link-arrow {
    display: initial;
  }
  #mega-menu .panel-top-link,
  .mega-menu .panel-top-link {
    display: none !important;
  }
  #mega-menu .vetnav-level2,
  .mega-menu .vetnav-level2 {
    width: 15.1875rem;
  }
}
#mega-menu .panel-title,
.mega-menu .panel-title {
  font-weight: bold;
  color: #000000;
}
#mega-menu a.vetnav-level1,
.mega-menu a.vetnav-level1 {
  color: #ffffff;
}
#mega-menu .main-column,
.mega-menu .main-column {
  left: -230px;
}
#mega-menu .main-column.panel-white,
.mega-menu .main-column.panel-white {
  background-color: #ffffff;
}
#mega-menu .mm-marketing-container,
.mega-menu .mm-marketing-container {
  background-color: #ffffff;
  height: 380px;
  overflow: hidden;
}
#mega-menu .mm-marketing-container.mm-marketing-gray,
.mega-menu .mm-marketing-container.mm-marketing-gray {
  background-color: #f0f0f0;
}
#mega-menu .mm-marketing-container .mm-marketing-text,
.mega-menu .mm-marketing-container .mm-marketing-text {
  padding: 20px;
}
#mega-menu .mm-marketing-container p,
.mega-menu .mm-marketing-container p {
  margin-top: 5px;
}
#mega-menu #vetnav-column-one-col .panel-bottom-link,
.mega-menu #vetnav-column-one-col .panel-bottom-link {
  width: 200%;
}
@media screen and (min-width: 768px) {
  #mega-menu .panel-top-link,
  .mega-menu .panel-top-link {
    display: none;
  }
  #mega-menu .back-button,
  .mega-menu .back-button {
    display: none;
  }
  #mega-menu .vetnav-panel--submenu:not([hidden]) h3,
  .mega-menu .vetnav-panel--submenu:not([hidden]) h3 {
    font-family: Source Sans Pro, sans serif;
    font-size: 16px;
  }
}
#mega-menu #vetnav-menu,
#mega-menu #vetnav,
.mega-menu #vetnav-menu,
.mega-menu #vetnav {
  margin-top: 0;
}
#mega-menu .my-va-top-nav,
.mega-menu .my-va-top-nav {
  margin-left: auto;
}
#mega-menu .my-va-top-nav.current-page,
.mega-menu .my-va-top-nav.current-page {
  margin-left: auto;
}
#mega-menu .mm-marketing-container,
.mega-menu .mm-marketing-container {
  height: 380px;
}
#mega-menu .mm-marketing-container p,
.mega-menu .mm-marketing-container p {
  margin-top: 5px;
}
@media screen and (min-width: 768px) {
  #mega-menu .current-page,
  .mega-menu .current-page {
    box-shadow: inset 0 -5px 0 #005ea2;
    margin-left: 1rem;
    margin-right: 1rem;
  }
  #mega-menu .current-page a,
  .mega-menu .current-page a {
    padding: 1rem 0;
  }
  #mega-menu .vetnav-panel,
  .mega-menu .vetnav-panel {
    width: 768px;
    height: 380px;
  }
  #mega-menu .column-one,
  .mega-menu .column-one {
    width: 24.375rem;
  }
  #mega-menu .column-two,
  .mega-menu .column-two {
    width: 24.375rem;
  }
  #mega-menu .column-three,
  .mega-menu .column-three {
    display: none;
  }
  #mega-menu .panel-bottom-link,
  .mega-menu .panel-bottom-link {
    position: absolute;
    height: 60px;
    width: 471px;
    left: 280px;
    border-bottom: 1px solid #d0d0d0;
    z-index: 3;
    top: 0;
  }
  #mega-menu .panel-bottom-link a,
  .mega-menu .panel-bottom-link a {
    background-size: 13px;
    padding: 20px 0px;
    display: inline-block;
    padding-right: 25px;
  }
  #mega-menu .panel-bottom-link a svg,
  .mega-menu .panel-bottom-link a svg {
    height: 11px;
    width: 11px;
    margin-left: 5px;
    vertical-align: middle;
  }
}
@media screen and (min-width: 1008px) {
  #mega-menu .vetnav-panel,
  .mega-menu .vetnav-panel {
    width: 1008px;
    height: 490px;
  }
  #mega-menu .panel-bottom-link,
  .mega-menu .panel-bottom-link {
    position: absolute;
    width: 711px;
  }
  #mega-menu .column-one,
  .mega-menu .column-one {
    width: 260px;
  }
  #mega-menu .column-two,
  .mega-menu .column-two {
    width: 260px;
  }
  #mega-menu .column-three,
  .mega-menu .column-three {
    display: block;
  }
}

.hub-page-link-list {
  list-style: none;
  padding: 0;
}
.hub-page-link-list__item {
  margin-bottom: 1em;
  margin: 1rem 0;
}
.hub-page-link-list__item > a {
  text-decoration: none;
}
.hub-page-link-list__item > a:hover .all-link-arrow, .hub-page-link-list__item > a:focus .all-link-arrow {
  margin-left: 10px;
  content: url("./img/arrow-right.svg");
}
.hub-page-link-list__item > a:hover .hub-page-link-list__header, .hub-page-link-list__item > a:focus .hub-page-link-list__header {
  text-decoration: underline;
}
.hub-page-link-list__item > a .all-link-arrow {
  width: 11px;
  margin-left: 5px;
  transition: all 0.15s ease;
  margin-bottom: 2px;
}
.hub-page-link-list__header {
  font-weight: bold;
}
.hub-page-link-list__description {
  color: #000000;
  margin: 0;
}
.hub-page-link-list__title:focus {
  outline: none;
}

a.vads-c-action-link--blue, a.vads-c-action-link--green, a.vads-c-action-link--white {
  font-weight: bold;
  padding: 4px 0 4px 38px;
  position: relative;
  display: inline-block;
}
a.vads-c-action-link--blue:before, a.vads-c-action-link--green:before, a.vads-c-action-link--white:before {
  font-family: "Font Awesome 5 Free";
  font-weight: 900;
  font-size: 175%;
  content: "\f138";
  content: "\f138"/"";
  position: absolute;
  left: 0px;
  top: -4px;
}

a.vads-c-action-link--blue:before {
  color: #005ea2;
}

a.vads-c-action-link--green:before {
  color: #2e8540;
}

a.vads-c-action-link--white {
  color: #ffffff;
}
a.vads-c-action-link--white:before {
  color: #ffffff;
  -webkit-transition-duration: 0.3s;
  transition-duration: 0.3s;
  -webkit-transition-timing-function: ease-in-out;
  transition-timing-function: ease-in-out;
  -webkit-transition-property: color, background-color, border-color;
  transition-property: color, background-color, border-color;
}

a.vads-c-action-link--white:hover {
  color: #fef0c8;
  background-color: transparent;
}
a.vads-c-action-link--white:hover:before {
  color: #fef0c8;
}

body.va-pos-fixed {
  width: 100%;
  height: 100%;
}

#vetnav,
[role=menu] [role=menu] {
  min-height: calc(100vh - 153.16px);
}
@media screen and (min-width: 481px) {
  #vetnav,
  [role=menu] [role=menu] {
    min-height: calc(100vh - 131.16px);
  }
}
@media screen and (min-width: 768px) {
  #vetnav,
  [role=menu] [role=menu] {
    min-height: 100%;
  }
}

#vetnav {
  background-color: #112e51;
  overflow-y: scroll;
  position: absolute;
  width: 100%;
  z-index: 1011;
}
#vetnav.vetnav--submenu-expanded #vetnav-menu {
  overflow: hidden;
  height: 0;
}
@media screen and (min-width: 768px) {
  #vetnav.vetnav--submenu-expanded #vetnav-menu {
    height: auto;
    overflow: visible;
  }
}
@media screen and (min-width: 768px) {
  #vetnav {
    margin-top: 0.625rem;
    overflow-y: visible;
    position: relative;
    width: auto;
    top: 0;
  }
}

#vetnav-menu {
  height: auto;
  list-style: none;
  margin: 0;
  padding-left: 0;
}
@media screen and (min-width: 768px) {
  #vetnav-menu {
    display: flex;
    height: auto;
    margin-top: 0.625rem;
    margin-bottom: 0;
    overflow-y: visible;
    position: relative;
  }
}
#vetnav-menu > li {
  margin-bottom: 6px;
}
@media screen and (min-width: 768px) {
  #vetnav-menu > li {
    margin-bottom: 0;
  }
}
@media screen and (min-width: 768px) {
  #vetnav-menu > li:first-of-type {
    display: none;
  }
}
#vetnav-menu::before {
  display: block;
  content: " ";
}
#vetnav-menu ul {
  list-style: none;
  padding-left: 0;
  margin-bottom: 0;
}
#vetnav-menu .va-button-primary {
  border: 2px solid #ffffff;
  color: #ffffff;
  padding: 0.625rem;
  margin: 0.5rem 1rem;
  width: auto;
}
#vetnav-menu .va-button-primary:visited {
  color: #ffffff;
}
@media screen and (min-width: 768px) {
  #vetnav-menu .va-button-primary {
    border-color: transparent;
    display: inline-block;
  }
}
#vetnav-menu .usa-button-secondary {
  padding: calc(1rem + 2px);
  margin: 0.5rem 1rem;
  width: auto;
  background-color: #f1f1f1;
}
#vetnav-menu .usa-button-secondary:hover {
  text-decoration: none;
}
@media screen and (min-width: 768px) {
  #vetnav-menu .usa-button-secondary {
    display: inline-block;
    background-color: transparent;
  }
  #vetnav-menu .usa-button-secondary.vetnav-level2-button-second {
    margin-left: 0;
  }
}

#vetnav-controls {
  position: relative;
  width: 100px;
}
#vetnav-controls svg {
  display: inline-block;
  height: 1rem;
  margin-right: 0.5rem;
  width: 0.625rem;
  vertical-align: 0;
}
#vetnav-controls path {
  fill: #ffffff;
}
@media screen and (min-width: 768px) {
  #vetnav-controls {
    display: none;
  }
}

[class^=vetnav-controller] {
  position: absolute;
  top: 0;
  left: 0;
  margin: 0;
  min-width: 100px;
  width: auto;
}
[class^=vetnav-controller][hidden] {
  display: none;
}

@media screen and (min-width: 768px) {
  a.vetnav-level1:hover {
    background-color: #005ea2;
    border-bottom-color: #005ea2;
    transition: none;
  }
}
.vetnav-level1 {
  -webkit-font-smoothing: antialiased;
  background-color: #1a4480;
  background-position: right 1.875rem center;
  background-repeat: no-repeat;
  background-size: 0.8125rem auto;
  border-radius: 0;
  border-top: 3px solid transparent;
  color: #ffffff;
  cursor: pointer;
  display: block;
  font-weight: bold;
  line-height: 1;
  margin: 0;
  padding: 1rem;
  text-align: left;
  text-decoration: none;
  width: 100%;
}
.vetnav-level1:not([href]) {
  background-image: url("./img/minus-white.svg");
}
@media screen and (min-width: 768px) {
  .vetnav-level1:not([href]) {
    background-position: right 1rem center;
    padding-right: 2rem;
  }
}
@media screen and (min-width: 768px) {
  .vetnav-level1[aria-expanded=true] {
    color: #212121;
    background-color: #ffffff;
    background-image: url("./img/arrow-up.svg");
    border-top-color: #8a7237;
  }
}
.vetnav-level1[aria-expanded=false] {
  background-image: url("./img/plus-white.svg");
}
.vetnav-level1[aria-expanded=false]:hover {
  background-color: #005ea2;
}
@media screen and (min-width: 768px) {
  .vetnav-level1[aria-expanded=false] {
    background-image: url("./img/arrow-down-white.svg");
  }
}
@media screen and (min-width: 768px) {
  .vetnav-level1 {
    background-color: transparent;
    background-size: 0.625rem auto;
  }
}
.vetnav-level1:active {
  color: inherit;
}
.vetnav-level1:hover {
  text-decoration: none;
}
.vetnav-level1:visited, .vetnav-level1:active {
  color: inherit;
}

.vetnav-level2 {
  background: #112e51 url("./img/arrow-right-white.svg") right 3rem center no-repeat;
  background-size: 0.875rem auto;
  border-radius: 0;
  display: block;
  font-weight: normal;
  margin: 0;
  padding: 1rem;
  text-align: left;
  width: 100%;
  -webkit-font-smoothing: antialiased;
}
@media screen and (min-width: 768px) {
  .vetnav-level2 {
    background: transparent url("./img/arrow-right.svg") right 0.625rem center no-repeat;
    border-color: transparent;
    border-style: solid;
    border-width: 1px 0;
    color: #005ea2;
    background-size: 0.625rem auto;
    margin-left: 0.5rem;
    padding: 0.5rem 0 0.5rem 1rem;
    position: relative;
    width: 15.8125rem;
  }
  .vetnav-level2:hover {
    background-color: transparent;
    border-bottom: 1px solid transparent;
    box-shadow: -3px 0 #8a7237;
    color: #005ea2;
    text-decoration: underline;
  }
  .vetnav-level2[aria-expanded=true] {
    background-color: #f1f1f1;
    border-bottom-color: #e6e6e2;
    border-top-color: #e6e6e2;
    box-shadow: -3px 0 #8a7237;
    color: #323a45;
    font-weight: bold;
    text-decoration: inherit;
    position: relative;
    z-index: 2;
  }
}
.vetnav-level2-heading {
  -webkit-font-smoothing: antialiased;
  font-size: 1.25rem;
  font-weight: bold;
  padding: 0.5rem 1rem;
}
@media screen and (min-width: 768px) {
  .vetnav-level2-heading {
    display: none;
  }
}

#vetnav .back-button {
  background: #1a4480 url("./img/arrow-left-white.svg") right 1.875rem center no-repeat;
  background-position: left 0.625rem center;
  background-size: 0.875rem auto;
  border-radius: 0;
  padding: 1rem 1rem 1rem 1.875rem;
  text-align: left;
  width: 100%;
  margin: 0;
}
@media screen and (min-width: 768px) {
  #vetnav .back-button {
    display: none;
  }
}

.vetnav-panel a {
  background-image: none;
  color: #ffffff;
  display: block;
  padding: 0.5rem 1rem;
  text-decoration: none;
}
.vetnav-panel a:after {
  content: none;
}
@media screen and (min-width: 768px) {
  .vetnav-panel a {
    color: #005ea2;
  }
  .vetnav-panel a:hover {
    background: transparent;
    text-decoration: underline;
  }
}
@media screen and (min-width: 768px) {
  .vetnav-panel {
    box-shadow: 0 5px 9px -5px #212121;
    background: #ffffff;
    padding-bottom: 1rem;
    position: absolute;
  }
}

.vetnav-panel--submenu:not([hidden]) {
  background-color: #112e51;
  box-shadow: none;
  position: absolute;
  width: 100%;
  top: 0;
  left: 30px;
  visibility: visible;
  margin: 0;
}
@media screen and (min-width: 768px) {
  .vetnav-panel--submenu:not([hidden]) {
    border-left: 1px solid #e6e6e2;
    background-color: #f1f1f1;
    height: 100%;
    margin-left: 14.375rem;
    padding: 0.3125rem 0 1rem;
    width: 19.375rem;
  }
}

@media screen and (min-width: 768px) {
  #vetnav-explore {
    height: 415px;
    padding-top: 0.5rem;
    width: 540px;
  }
  #vetnav-benefits {
    width: 276.47px;
  }
}
.vet-toolbar {
  align-items: center;
  flex: 1 1 100%;
  margin-left: -1.25rem;
  position: relative;
}
.vet-toolbar > [data-reactroot],
.vet-toolbar > div {
  align-items: center;
  display: flex;
}
@media screen and (min-width: 768px) {
  .vet-toolbar {
    flex: 0 1 20.3125rem;
    margin-left: 0;
    margin-right: 0;
    z-index: 3;
  }
}
.vet-toolbar p {
  margin: 0;
}
.vet-toolbar [href^=tel] {
  text-decoration: none;
}
.vet-toolbar ul {
  list-style: none;
  margin: 0;
  padding-left: 0;
}
.vet-toolbar .va-dropdown,
.vet-toolbar .sign-in-link {
  margin-left: 0.625rem;
}
.vet-toolbar .va-dropdown-trigger {
  font-weight: 600;
}

.sign-in-link {
  white-space: nowrap;
}

[id=search] {
  width: 18.75rem;
}
[id=search] [type=text] {
  margin: 0;
  flex: 1 0 12.5rem;
}
[id=search] [type=submit] {
  border-radius: 0 0.1875rem 0.1875rem 0;
  display: flex;
  flex: 1 0 1.875rem;
  justify-content: center;
  margin: 0;
  padding: 0.625rem;
}
[id=search] > .va-flex {
  align-items: center;
}

.child-menu-opened {
  height: 0;
  overflow: hidden;
}

@media screen and (min-width: 768px) {
  .child-menu-opened {
    height: auto;
  }
}

/*# sourceMappingURL=full.css.map */
